(dp1
S'output'
p2
S''
sS'layer'
p3
S'applications/blog/controllers/default.py'
p4
sS'code'
p5
S'from gluon.fileutils import check_credentials\nsession.authorized=check_credentials(request)\n\nresponse.title = "PyPress - a web2py powered weblog"\nresponse.keywords = "web2py, Gluon, Python, Enterprise, Web, Framework, PyPress"\nresponse.description = "Just another PyPress weblog"\n\n# This dynamically adds the pages to the menu\npages = db(db.posts.post_type == \'page\').select(db.posts.ALL)\nitems = []\nfor page in pages:\n    item = [page.post_title, False, \'/%(app)s/default/page/%(id)s\' % {\'app\':request.application, \'id\':page.id}]\n    items.append(item)\nresponse.menu = items\n\n# This returns all the categories and their post count\ncats = db().select(db.categories.ALL)\nitems = []\nfor cat in cats:\n    count = len(db(\n                   (db.posts.post_type==\'post\') & \n                   (db.posts.post_status==\'published\') & \n                   (db.posts.id==db.cat_to_post.post_id) & \n                   (db.cat_to_post.cat_id==cat.id)\n                   ).select(db.posts.ALL))\n    if count > 0:\n        item = [cat.category_name, count, \'/%(app)s/default/category/%(name)s\' % {\'app\':request.application, \'name\':cat.category_name}]\n        items.append(item)\nresponse.categories = items\n\n# This returns all the links\nlinks = db().select(db.links.ALL)\nitems = []\nfor link in links:\n    item = [link.link_title, link.link_url, link.id]\n    items.append(item)\nresponse.links = items\n\n# The main page\n# Shows the first 10 posts    \ndef index():\n    posts = db((db.posts.post_status == \'published\') & (db.posts.post_type == \'post\')).select(db.posts.ALL, orderby=~db.posts.post_time)\n    return dict(posts = posts)\n\n# The post page\n# Shows the entire post, the comments, and the comment form\ndef post():\n    #try: \n    post_id = int(request.args[0])\n    post = db(db.posts.id == post_id).select()[0]\n    comments = db(db.comments.post_id == post_id).select(db.comments.ALL)\n    comment_count = len(db(db.comments.post_id == post_id).select(db.comments.ALL))\n    comment_form = SQLFORM(db.comments, fields = [\'comment_author\', \'comment_author_email\', \'comment_author_website\', \'comment_text\'], labels = comment_labels)\n        \n    if comment_form.accepts(request.vars, session):\n        session.flash = "Comment added."\n        redirect(URL(r = request,f = \'index\'))\n        \n    return dict(post = post, comments = comments, comment_form = comment_form, comment_count = comment_count)\n    #except: \n    #    redirect(URL(r = request,f = \'index\'))\n\n# The page page\n# Shows the entire page. Does not show comments or the comment form\ndef page():\n    try: \n        post_id = int(request.args[0])\n        post = db(db.posts.id == post_id).select()[0]\n        return dict(post = post)\n    except: \n        redirect(URL(r = request,f = \'index\'))\n\n# The category page\n# Shows all the posts in the requested category\ndef category():\n    try:\n        cat_name = request.args[0]\n        posts = db(\n                   (db.posts.post_status == \'published\') & \n                   (db.posts.post_type == \'post\') &\n                   (db.posts.id == db.cat_to_post.post_id) &\n                   (db.categories.id == db.cat_to_post.cat_id) &\n                   (db.categories.category_name == cat_name)\n                   ).select(db.posts.ALL, orderby=~db.posts.post_time)\n        response.sidebar_note = "You are currently browsing the archives for the %s category." % cat_name\n        return dict(posts = posts)\n    except:\n        redirect(URL(r = request,f = \'index\'))\n\ndef add():\n    try:\n        area = request.args[0]\n        \n        if area == \'link\':\n            page_form = SQLFORM(db.links, labels = link_labels)\n            page_title = "Add Link"\n            \n            if page_form.accepts(request.vars, session):\n                session.flash = "Link added."\n                redirect(URL(r = request,f = \'index\'))\n            \n        elif area == \'category\':\n            page_form = SQLFORM(db.categories, labels = cat_labels)\n            page_title = "Add Category"\n            \n            if page_form.accepts(request.vars, session):\n                session.flash = "Category added."\n                redirect(URL(r = request,f = \'index\'))\n        \n        elif area == "author":\n            page_form = SQLFORM(db.authors, labels = author_labels)\n            page_title = "Add Author"\n            \n            if page_form.accepts(request.vars, session):\n                session.flash = "Author added."\n                redirect(URL(r = request,f = \'index\'))\n\n        elif area == "post":\n            page_form = SQLFORM(db.posts, labels = post_labels)\n            page_title = "Add Post"\n            \n            if page_form.accepts(request.vars, session):\n                session.flash = "Post added."\n                redirect(URL(r = request,f = \'index\'))\n        \n        elif area == "page":\n            page_form = SQLFORM(db.posts, labels = post_labels)\n            page_title = "Add Page"\n            \n            if page_form.accepts(request.vars, session):\n                session.flash = "Page added."\n                redirect(URL(r = request,f = \'index\'))\n                \n        else:\n            redirect(URL(r = request,f = \'index\'))\n            \n        return dict(page_title = page_title, page_form = page_form)\n    except:\n        redirect(URL(r = request,f = \'index\'))\n\ndef edit():\n    try:\n        area = request.args[0]\n        id = request.args[1]\n        \n        if area == \'link\':\n            this_item = db(db.links.id == id).select()[0]\n            edit_form = SQLFORM(db.links, this_item, labels = link_labels, deletable = True)\n            edit_title = "Edit Link"\n        \n            if edit_form.accepts(request.vars, session):\n                session.flash = "Link updated."\n                redirect(URL(r = request,f = \'index\'))\n\n        elif area == \'post\':\n            this_item = db(db.posts.id == id).select()[0]\n            edit_form = SQLFORM(db.posts, this_item, labels = post_labels, deletable = True)\n            edit_title = "Edit Post"\n        \n            if edit_form.accepts(request.vars, session):\n                session.flash = "Post updated."\n                redirect(URL(r = request,f = \'index\'))\n\n        elif area == \'page\':\n            this_item = db(db.posts.id == id).select()[0]\n            edit_form = SQLFORM(db.posts, this_item, labels = post_labels, deletable = True)\n            edit_title = "Edit Page"\n        \n            if edit_form.accepts(request.vars, session):\n                session.flash = "Page updated."\n                redirect(URL(r = request,f = \'index\'))\n                        \n        else:\n            redirect(URL(r = request,f = \'index\'))\n        \n        return dict(edit_form = edit_form, edit_title = edit_title)\n    except:\n        redirect(URL(r = request,f = \'index\'))\n    \ndef delete():\n    try:\n        area = request.args[0]\n        id = request.args[1]\n        \n        if area == \'link\':\n            db(db.links.id == id).delete()\n            session.flash = "Link deleted."\n        \n        redirect(URL(r = request,f = \'index\'))\n    except:\n        redirect(URL(r = request,f = \'index\'))\n\nresponse._vars=post()'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "C:\\Documents and Settings\\csharp\\Desktop\\web2py\\gluon\\restricted.py", line 60, in restricted\n    exec ccode in environment\n  File "applications/blog/controllers/default.py", line 193, in <module>\n  File "applications/blog/controllers/default.py", line 55, in post\n    if comment_form.accepts(request.vars, session):\n  File "C:\\Documents and Settings\\csharp\\Desktop\\web2py\\gluon\\sqlhtml.py", line 196, in accepts\n    self.vars.id=self.table.insert(**fields)\n  File "C:\\Documents and Settings\\csharp\\Desktop\\web2py\\gluon\\sql.py", line 514, in insert\n    query=self._insert(**fields)\n  File "C:\\Documents and Settings\\csharp\\Desktop\\web2py\\gluon\\sql.py", line 508, in _insert\n    raise SyntaxError, \'SQLTable: no field is required\'\nSyntaxError: SQLTable: no field is required\n'
p8
s.