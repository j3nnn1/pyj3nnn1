(dp1
S'output'
p2
S''
sS'layer'
p3
S'applications/blog/controllers/appadmin.py'
p4
sS'code'
p5
S"###########################################################\n### make sure administrator is on localhost\n############################################################\n\nimport os\nfrom gluon.contenttype import contenttype\nfrom gluon.fileutils import check_credentials\n\nif request.env.remote_addr!=request.env.http_host.split(':')[0]: \n    raise HTTP(400)\nif not check_credentials(request):\n    redirect('/admin')\n\nresponse.view='appadmin.html'\nresponse.menu=[['design',False,'/admin/default/design/%s' % request.application],\n               ['db',False,'/%s/%s/index' % (request.application, request.controller)],\n               ['state',False,'/%s/%s/state' % (request.application, request.controller)]]\n\n\n###########################################################\n### list all tables in database\n############################################################\n\ndef index():\n    import types as _types\n    _dbs={}\n    for _key,_value in globals().items():\n        if isinstance(_value,SQLDB):\n           tables=_dbs[_key]=[]\n           for _tablename in _value.tables:\n               tables.append((_key,_tablename))\n    return dict(dbs=_dbs)\n\n###########################################################\n### insert a new record\n############################################################\n\ndef insert():\n    try:\n        dbname=request.args[0]\n        db=eval(dbname)\n        table=request.args[1]\n        form=SQLFORM(db[table])\n    except: redirect(URL(r=request,f='index'))\n    if form.accepts(request.vars,session): response.flash='new record inserted'\n    return dict(form=form)\n\n###########################################################\n### list all records in table and insert new record\n############################################################\n\ndef download():\n    filename=request.args[0]\n    response.headers['Content-Type']=contenttype(filename)\n    return open(os.path.join(request.folder,'uploads/','%s' % filename),'rb').read()\n\ndef csv():\n    import gluon.contenttype, csv, cStringIO\n    response.headers['Content-Type']=gluon.contenttype.contenttype('.csv')\n    try:\n        dbname=request.vars.dbname\n        db=eval(dbname)\n        records=db(request.vars.query).select()\n    except: redirect(URL(r=request,f='index'))\n    s=cStringIO.StringIO()\n    writer = csv.writer(s)\n    writer.writerow(records.colnames)\n    c=range(len(records.colnames))\n    for i in range(len(records)):\n        writer.writerow([records.response[i][j] for j in c])\n    ### FILL HERE\n    return s.getvalue()\n\ndef import_csv(table,file):\n    import csv\n    reader = csv.reader(file)\n    colnames=None\n    for line in reader:\n        if not colnames: \n            colnames=[x[x.find('.')+1:] for x in line]\n            c=[i for i in range(len(line)) if colnames[i]!='id']            \n        else:\n            items=[(colnames[i],line[i]) for i in c]\n            table.insert(**dict(items))\n\ndef select():\n    try:\n        dbname=request.args[0]\n        db=eval(dbname)\n        if not request.vars.query:\n            table=request.args[1]\n            query='%s.id>0' % table        \n        else: query=request.vars.query\n    except: redirect(URL(r=request,f='index'))\n    if request.vars.csvfile!=None:        \n        try:\n            import_csv(db[table],request.vars.csvfile.file)\n            response.flash='data uploaded'\n        except: response.flash='unable to parse csv file'\n    if request.vars.delete_all and request.vars.delete_all_sure=='yes':\n        try:\n            db(query).delete()\n            response.flash='records deleted'\n        except: response.flash='invalid SQL FILTER'\n    elif request.vars.update_string:\n        try:\n            env=dict(db=db,query=query)\n            exec('db(query).update('+request.vars.update_string+')') in env\n            response.flash='records updated'\n        except: response.flash='invalid SQL FILTER or UPDATE STRING'\n    if request.vars.start: start=int(request.vars.start)\n    else: start=0\n    limitby=(start,start+100)\n    try:\n        records=db(query).select(limitby=limitby)\n    except: \n        response.flash='invalid SQL FILTER'\n        return dict(records='no records',nrecords=0,query=query,start=0)\n    linkto=URL(r=request,f='update/%s'% (dbname))\n    upload=URL(r=request,f='download')\n    return dict(start=start,query=query,\\\n                nrecords=len(records),\\\n                records=SQLTABLE(records,linkto,upload,_class='sortable'))\n\n###########################################################\n### edit delete one record\n############################################################\n\ndef update():\n    try:\n        dbname=request.args[0]\n        db=eval(dbname)\n        table=request.args[1]\n    except: redirect(URL(r=request,f='index'))\n    try:\n        id=int(request.args[2])\n        record=db(db[table].id==id).select()[0]\n    except: redirect(URL(r=request,f='select/%s/%s'%(dbname,table)))\n    form=SQLFORM(db[table],record,deletable=True,\n                 linkto=URL(r=request,f='select/'+dbname),\n                 upload=URL(r=request,f='download/'))\n    if form.accepts(request.vars,session): \n        response.flash='done!'        \n        redirect(URL(r=request,f='select/%s/%s'%(dbname,table)))\n    return dict(form=form)\n\n###########################################################\n### get global variables\n############################################################\n\ndef state():\n    return dict(state=request.env)\n\n\nresponse._vars=select()"
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "C:\\Documents and Settings\\csharp\\Desktop\\web2py\\gluon\\restricted.py", line 60, in restricted\n    exec ccode in environment\n  File "applications/blog/controllers/appadmin.py", line 155, in <module>\n  File "applications/blog/controllers/appadmin.py", line 123, in select\n    records=SQLTABLE(records,linkto,upload,_class=\'sortable\'))\n  File "C:\\Documents and Settings\\csharp\\Desktop\\web2py\\gluon\\sqlhtml.py", line 218, in __init__\n    for record in sqlrows:\n  File "C:\\Documents and Settings\\csharp\\Desktop\\web2py\\gluon\\sql.py", line 862, in __iter__\n    yield self[i]\n  File "C:\\Documents and Settings\\csharp\\Desktop\\web2py\\gluon\\sql.py", line 842, in __getitem__\n    time_items=[int(x) for x in str(value)[11:].strip().split(\':\')[:3]]\nValueError: invalid literal for int() with base 10: \'18.531000\'\n'
p8
s.