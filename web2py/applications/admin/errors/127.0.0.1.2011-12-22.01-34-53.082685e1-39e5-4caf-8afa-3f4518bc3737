(dp1
S'output'
p2
S''
sS'layer'
p3
S'/media/misperoles/git/pyj3nnn1/web2py/applications/admin/controllers/default.py'
p4
sS'code'
p5
S'# coding: utf8\n\nfrom gluon.admin import *\nfrom gluon.fileutils import abspath, read_file, write_file\nfrom glob import glob\nimport shutil\nimport platform\n\nif DEMO_MODE and request.function in [\'change_password\',\'pack\',\'pack_plugin\',\'upgrade_web2py\',\'uninstall\',\'cleanup\',\'compile_app\',\'remove_compiled_app\',\'delete\',\'delete_plugin\',\'create_file\',\'upload_file\',\'update_languages\',\'reload_routes\']:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\nif not is_manager() and request.function in [\'change_password\',\'upgrade_web2py\']:\n    session.flash = T(\'disabled in multi user mode\')\n    redirect(URL(\'site\'))\n\nif FILTER_APPS and request.args(0) and not request.args(0) in FILTER_APPS:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\ndef safe_open(a,b):\n    if DEMO_MODE and \'w\' in b:\n        class tmp:\n            def write(self,data): pass\n        return tmp()\n    return open(a,b)\n\ndef safe_read(a, b=\'r\'):\n    safe_file = safe_open(a, b)\n    try:\n        return safe_file.read()\n    finally:\n        safe_file.close()\n\ndef safe_write(a, value, b=\'w\'):\n    safe_file = safe_open(a, b)\n    try:\n        safe_file.write(value)\n    finally:\n        safe_file.close()\n\ndef get_app(name=None):\n    app = name or request.args(0)\n    if app and (not MULTI_USER_MODE or db(db.app.name==app)(db.app.owner==auth.user.id).count()):\n        return app\n    session.flash = \'App does not exist or your are not authorized\'\n    redirect(URL(\'site\'))\n\ndef index():\n    """ Index handler """\n\n    send = request.vars.send\n    if DEMO_MODE:\n        session.authorized = True\n        session.last_time = t0\n    if not send:\n        send = URL(\'site\')\n    if session.authorized:\n        redirect(send)\n    elif request.vars.password:\n        if verify_password(request.vars.password):\n            session.authorized = True\n            login_record(True)\n\n            if CHECK_VERSION:\n                session.check_version = True\n            else:\n                session.check_version = False\n\n            session.last_time = t0\n            if isinstance(send, list):  # ## why does this happen?\n                send = str(send[0])\n\n            redirect(send)\n        else:\n            times_denied = login_record(False)\n            if times_denied >= allowed_number_of_attempts:\n                response.flash = \\\n                    T(\'admin disabled because too many invalid login attempts\')\n            elif times_denied == allowed_number_of_attempts - 1:\n                response.flash = \\\n                    T(\'You have one more login attempt before you are locked out\')\n            else:\n                response.flash = T(\'invalid password.\')\n    return dict(send=send)\n\n\ndef check_version():\n    """ Checks if web2py is up to date """\n\n    session.forget()\n    session._unlock(response)\n\n    new_version, version_number = check_new_version(request.env.web2py_version,\n                                    WEB2PY_VERSION_URL)\n\n    if new_version == -1:\n        return A(T(\'Unable to check for upgrades\'), _href=WEB2PY_URL)\n    elif new_version != True:\n        return A(T(\'web2py is up to date\'), _href=WEB2PY_URL)\n    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):\n        return SPAN(\'You should upgrade to version %s\' % version_number)\n    else:\n        return sp_button(URL(\'upgrade_web2py\'), T(\'upgrade now\')) \\\n          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)\n\n\ndef logout():\n    """ Logout handler """\n    session.authorized = None\n    if MULTI_USER_MODE:\n        redirect(URL(\'user/logout\'))\n    redirect(URL(\'index\'))\n\n\ndef change_password():\n\n    if session.pam_user:\n        session.flash = T(\'PAM authenticated user, cannot change password here\')\n        redirect(URL(\'site\'))\n    form=SQLFORM.factory(Field(\'current_admin_password\',\'password\'),\n                         Field(\'new_admin_password\',\'password\',requires=IS_STRONG()),\n                         Field(\'new_admin_password_again\',\'password\'))\n    if form.accepts(request.vars):\n        if not verify_password(request.vars.current_admin_password):\n            form.errors.current_admin_password = T(\'invalid password\')\n        elif form.vars.new_admin_password != form.vars.new_admin_password_again:\n            form.errors.new_admin_password_again = T(\'no match\')\n        else:\n            path = abspath(\'parameters_%s.py\' % request.env.server_port)\n            safe_write(path, \'password="%s"\' % CRYPT()(request.vars.new_admin_password)[0])\n            session.flash = T(\'password changed\')\n            redirect(URL(\'site\'))\n    return dict(form=form)\n\ndef site():\n    """ Site handler """\n\n    myversion = request.env.web2py_version\n\n    # Shortcut to make the elif statements more legible\n    file_or_appurl = \'file\' in request.vars or \'appurl\' in request.vars\n\n    if DEMO_MODE:\n        pass\n\n    elif request.vars.filename and not \'file\' in request.vars:\n        # create a new application\n        appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n        if app_create(appname, request):\n            if MULTI_USER_MODE:\n                db.app.insert(name=appname,owner=auth.user.id)\n            session.flash = T(\'new application "%s" created\', appname)\n            redirect(URL(\'design\',args=appname))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s" (it may exist already)\', request.vars.filename)\n        redirect(URL(r=request))\n\n    elif file_or_appurl and not request.vars.filename:\n        # can\'t do anything without an app name\n        msg = \'you must specify a name for the uploaded application\'\n        response.flash = T(msg)\n\n    elif file_or_appurl and request.vars.filename:\n        # fetch an application via URL or file upload\n        f = None\n        if request.vars.appurl is not \'\':\n            try:\n                f = urllib.urlopen(request.vars.appurl)\n            except Exception, e:\n                session.flash = DIV(T(\'Unable to download app because:\'),PRE(str(e)))\n                redirect(URL(r=request))\n            fname = request.vars.appurl\n        elif request.vars.file is not \'\':\n            f = request.vars.file.file\n            fname = request.vars.file.filename\n\n        if f:\n            appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n            installed = app_install(appname, f, request, fname,\n                                    overwrite=request.vars.overwrite_check)\n        if f and installed:\n            msg = \'application %(appname)s installed with md5sum: %(digest)s\'\n            session.flash = T(msg, dict(appname=appname,\n                                        digest=md5_hash(installed)))\n        elif f and request.vars.overwrite_check:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        else:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        redirect(URL(r=request))\n\n    regex = re.compile(\'^\\w+$\')\n\n    if is_manager():\n        apps = [f for f in os.listdir(apath(r=request)) if regex.match(f)]\n    else:\n        apps = [f.name for f in db(db.app.owner==auth.user_id).select()]\n\n    if FILTER_APPS:\n        apps = [f for f in apps if f in FILTER_APPS]\n\n    apps = sorted(apps,lambda a,b:cmp(a.upper(),b.upper()))\n\n    return dict(app=None, apps=apps, myversion=myversion)\n\n\ndef pack():\n    app = get_app()\n\n    if len(request.args) == 1:\n        fname = \'web2py.app.%s.w2p\' % app\n        filename = app_pack(app, request)\n    else:\n        fname = \'web2py.app.%s.compiled.w2p\' % app\n        filename = app_pack_compiled(app, request)\n\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'site\'))\n\ndef pack_plugin():\n    app = get_app()\n    if len(request.args) == 2:\n        fname = \'web2py.plugin.%s.w2p\' % request.args[1]\n        filename = plugin_pack(app, request.args[1], request)\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'plugin\',args=request.args))\n\ndef upgrade_web2py():\n    if \'upgrade\' in request.vars:\n        (success, error) = upgrade(request)\n        if success:\n            session.flash = T(\'web2py upgraded; please restart it\')\n        else:\n            session.flash = T(\'unable to upgrade because "%s"\', error)\n        redirect(URL(\'site\'))\n    elif \'noupgrade\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict()\n\ndef uninstall():\n    app = get_app()\n    if \'delete\' in request.vars:\n        if MULTI_USER_MODE:\n            if is_manager() and db(db.app.name==app).delete():\n                pass\n            elif db(db.app.name==app)(db.app.owner==auth.user.id).delete():\n                pass\n            else:\n                session.flash = T(\'no permission to uninstall "%s"\', app)\n                redirect(URL(\'site\'))\n        if app_uninstall(app, request):            \n            session.flash = T(\'application "%s" uninstalled\', app)\n        else:\n            session.flash = T(\'unable to uninstall "%s"\', app)\n        redirect(URL(\'site\'))\n    elif \'nodelete\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict(app=app)\n\n\ndef cleanup():\n    app = get_app()\n    clean = app_cleanup(app, request)\n    if not clean:\n        session.flash = T("some files could not be removed")\n    else:\n        session.flash = T(\'cache, errors and sessions cleaned\')\n\n    redirect(URL(\'site\'))\n\n\ndef compile_app():\n    app = get_app()\n    c = app_compile(app, request)\n    if not c:\n        session.flash = T(\'application compiled\')\n    else:\n        session.flash = DIV(T(\'Cannot compile: there are errors in your app:\'),\n                              CODE(c))\n    redirect(URL(\'site\'))\n\n\ndef remove_compiled_app():\n    """ Remove the compiled application """\n    app = get_app()\n    remove_compiled_application(apath(app, r=request))\n    session.flash = T(\'compiled application removed\')\n    redirect(URL(\'site\'))\n\ndef delete():\n    """ Object delete handler """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    sender = request.vars.sender\n\n    if isinstance(sender, list):  # ## fix a problem with Vista\n        sender = sender[0]\n\n    if \'nodelete\' in request.vars:\n        redirect(URL(sender))\n    elif \'delete\' in request.vars:\n        try:\n            os.unlink(apath(filename, r=request))\n            session.flash = T(\'file "%(filename)s" deleted\',\n                              dict(filename=filename))\n        except Exception:\n            session.flash = T(\'unable to delete file "%(filename)s"\',\n                              dict(filename=filename))\n        redirect(URL(sender))\n    return dict(filename=filename, sender=sender)\n\ndef peek():\n    """ Visualize object code """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    try:\n        data = safe_read(apath(filename, r=request)).replace(\'\\r\',\'\')\n    except IOError:\n        session.flash = T(\'file does not exist\')\n        redirect(URL(\'site\'))\n\n    extension = filename[filename.rfind(\'.\') + 1:].lower()\n\n    return dict(app=request.args[0],\n                filename=filename,\n                data=data,\n                extension=extension)\n\n\ndef test():\n    """ Execute controller tests """\n    app = get_app()\n    if len(request.args) > 1:\n        file = request.args[1]\n    else:\n        file = \'.*\\.py\'\n\n    controllers = listdir(apath(\'%s/controllers/\' % app, r=request), file + \'$\')\n\n    return dict(app=app, controllers=controllers)\n\ndef keepalive():\n    return \'\'\n\ndef search():\n    keywords=request.vars.keywords or \'\'\n    app = get_app()\n    def match(filename,keywords):\n        filename=os.path.join(apath(app, r=request),filename)\n        if keywords in read_file(filename,\'rb\'):\n            return True\n        return False\n    path = apath(request.args[0], r=request)\n    files1 = glob(os.path.join(path,\'*/*.py\'))\n    files2 = glob(os.path.join(path,\'*/*.html\'))\n    files3 = glob(os.path.join(path,\'*/*/*.html\'))\n    files=[x[len(path)+1:].replace(\'\\\\\',\'/\') for x in files1+files2+files3 if match(x,keywords)]\n    return response.json({\'files\':files})\n\ndef edit():\n    """ File edit handler """\n    # Load json only if it is ajax edited...\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    # Try to discover the file type\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n    elif filename[-5:] == \'.load\':\n        filetype = \'html\'\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'html\'\n\n    # ## check if file is not there\n\n    path = apath(filename, r=request)\n\n    if request.vars.revert and os.path.exists(path + \'.bak\'):\n        try:\n            data = safe_read(path + \'.bak\')\n            data1 = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                 return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        safe_write(path, data)\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n        safe_write(path + \'.bak\', data1)\n        response.flash = T(\'file "%s" of %s restored\', (filename, saved_on))\n    else:\n        try:\n            data = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n\n        if request.vars.file_hash and request.vars.file_hash != file_hash:\n            session.flash = T(\'file changed on disk\')\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path + \'.1\', data)\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'file changed on disk\')),\n                                      \'redirect\': URL(\'resolve\',\n                                                      args=request.args)})\n            else:\n                redirect(URL(\'resolve\', args=request.args))\n        elif request.vars.data:\n            safe_write(path + \'.bak\', data)\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path, data)\n            file_hash = md5_hash(data)\n            saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n            response.flash = T(\'file saved on %s\', saved_on)\n\n    data_or_revert = (request.vars.data or request.vars.revert)\n\n    # Check compile errors\n    highlight = None\n    if filetype == \'python\' and request.vars.data:\n        import _ast\n        try:\n            code = request.vars.data.rstrip().replace(\'\\r\\n\',\'\\n\')+\'\\n\'\n            compile(code, path, "exec", _ast.PyCF_ONLY_AST)\n        except Exception, e:\n            start = sum([len(line)+1 for l, line\n                            in enumerate(request.vars.data.split("\\n"))\n                            if l < e.lineno-1])\n            if e.text and e.offset:\n                offset = e.offset - (len(e.text) - len(e.text.splitlines()[-1]))\n            else:\n                offset = 0\n            highlight = {\'start\': start, \'end\': start + offset + 1}\n            try:\n                ex_name = e.__class__.__name__\n            except:\n                ex_name = \'unknown exception!\'\n            response.flash = DIV(T(\'failed to compile file because:\'), BR(),\n                                 B(ex_name), T(\' at line %s\') % e.lineno,\n                                 offset and T(\' at char %s\') % offset or \'\',\n                                 PRE(str(e)))\n\n    if data_or_revert and request.args[1] == \'modules\':\n        # Lets try to reload the modules\n        try:\n            mopath = \'.\'.join(request.args[2:])[:-3]\n            exec \'import applications.%s.modules.%s\' % (request.args[0], mopath)\n            reload(sys.modules[\'applications.%s.modules.%s\'\n                    % (request.args[0], mopath)])\n        except Exception, e:\n            response.flash = DIV(T(\'failed to reload module because:\'),PRE(str(e)))\n\n    edit_controller = None\n    editviewlinks = None\n    view_link = None\n    if filetype == \'html\' and len(request.args) >= 3:\n        cfilename = os.path.join(request.args[0], \'controllers\',\n                                 request.args[2] + \'.py\')\n        if os.path.exists(apath(cfilename, r=request)):\n            edit_controller = URL(\'edit\', args=[cfilename])\n            view = request.args[3].replace(\'.html\',\'\')\n            view_link = URL(request.args[0],request.args[2],view)\n    elif filetype == \'python\' and request.args[1] == \'controllers\':\n        ## it\'s a controller file.\n        ## Create links to all of the associated view files.\n        app = get_app()\n        viewname = os.path.splitext(request.args[2])[0]\n        viewpath = os.path.join(app,\'views\',viewname)\n        aviewpath = apath(viewpath, r=request)\n        viewlist = []\n        if os.path.exists(aviewpath):\n            if os.path.isdir(aviewpath):\n                viewlist = glob(os.path.join(aviewpath,\'*.html\'))\n        elif os.path.exists(aviewpath+\'.html\'):\n            viewlist.append(aviewpath+\'.html\')\n        if len(viewlist):\n            editviewlinks = []\n            for v in viewlist:\n                vf = os.path.split(v)[-1]\n                vargs = "/".join([viewpath.replace(os.sep,"/"),vf])\n                editviewlinks.append(A(T(vf.split(".")[0]),\\\n                    _href=URL(\'edit\',args=[vargs])))\n\n    if len(request.args) > 2 and request.args[1] == \'controllers\':\n        controller = (request.args[2])[:-3]\n        functions = regex_expose.findall(data)\n    else:\n        (controller, functions) = (None, None)\n\n    if \'from_ajax\' in request.vars:\n        return response.json({\'file_hash\': file_hash, \'saved_on\': saved_on, \'functions\':functions, \'controller\': controller, \'application\': request.args[0], \'highlight\': highlight })\n    else:\n\n        editarea_preferences = {}\n        editarea_preferences[\'FONT_SIZE\'] = \'10\'\n        editarea_preferences[\'FULL_SCREEN\'] = \'false\'\n        editarea_preferences[\'ALLOW_TOGGLE\'] = \'true\'\n        editarea_preferences[\'REPLACE_TAB_BY_SPACES\'] = \'4\'\n        editarea_preferences[\'DISPLAY\'] = \'onload\'\n        for key in editarea_preferences:\n            if globals().has_key(key):\n                editarea_preferences[key]=globals()[key]\n        return dict(app=request.args[0],\n                    filename=filename,\n                    filetype=filetype,\n                    data=data,\n                    edit_controller=edit_controller,\n                    file_hash=file_hash,\n                    saved_on=saved_on,\n                    controller=controller,\n                    functions=functions,\n                    view_link=view_link,\n                    editarea_preferences=editarea_preferences,\n                    editviewlinks=editviewlinks)\n\ndef resolve():\n    """\n    """\n\n    filename = \'/\'.join(request.args)\n    # ## check if file is not there\n    path = apath(filename, r=request)\n    a = safe_read(path).split(\'\\n\')\n    try:\n        b = safe_read(path + \'.1\').split(\'\\n\')\n    except IOError:\n        session.flash = \'Other file, no longer there\'\n        redirect(URL(\'edit\', args=request.args))\n\n    d = difflib.ndiff(a, b)\n\n    def leading(line):\n        """  """\n\n        # TODO: we really need to comment this\n        z = \'\'\n        for (k, c) in enumerate(line):\n            if c == \' \':\n                z += \'&nbsp;\'\n            elif c == \' \\t\':\n                z += \'&nbsp;\'\n            elif k == 0 and c == \'?\':\n                pass\n            else:\n                break\n\n        return XML(z)\n\n    def getclass(item):\n        """ Determine item class """\n\n        if item[0] == \' \':\n            return \'normal\'\n        if item[0] == \'+\':\n            return \'plus\'\n        if item[0] == \'-\':\n            return \'minus\'\n\n    if request.vars:\n        c = \'\\n\'.join([item[2:].rstrip() for (i, item) in enumerate(d) if item[0] \\\n                           == \' \' or \'line%i\' % i in request.vars])\n        safe_write(path, c)\n        session.flash = \'files merged\'\n        redirect(URL(\'edit\', args=request.args))\n    else:\n        # Making the short circuit compatible with <= python2.4\n        gen_data = lambda index,item: not item[:1] in [\'+\',\'-\'] and "" \\\n                   or INPUT(_type=\'checkbox\',\n                            _name=\'line%i\' % index,\n                            value=item[0] == \'+\')\n\n        diff = TABLE(*[TR(TD(gen_data(i,item)),\n                          TD(item[0]),\n                          TD(leading(item[2:]),\n                          TT(item[2:].rstrip())), _class=getclass(item))\n                       for (i, item) in enumerate(d) if item[0] != \'?\'])\n\n    return dict(diff=diff, filename=filename)\n\n\ndef edit_language():\n    """ Edit language file """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    from gluon.languages import read_dict, write_dict\n    strings = read_dict(apath(filename, r=request))\n    keys = sorted(strings.keys(),lambda x,y: cmp(x.lower(), y.lower()))\n    rows = []\n    rows.append(H2(T(\'Original/Translation\')))\n\n    for key in keys:\n        name = md5_hash(key)\n        if key==strings[key]:\n            _class=\'untranslated\'\n        else:\n            _class=\'translated\'\n        if len(key) <= 40:\n            elem = INPUT(_type=\'text\', _name=name,value=strings[key],\n                         _size=70,_class=_class)\n        else:\n            elem = TEXTAREA(_name=name, value=strings[key], _cols=70,\n                            _rows=5, _class=_class)\n\n        # Making the short circuit compatible with <= python2.4\n        k = (strings[key] != key) and key or B(key)\n\n        rows.append(P(k, BR(), elem, TAG.BUTTON(T(\'delete\'),\n                            _onclick=\'return delkey("%s")\' % name), _id=name))\n\n    rows.append(INPUT(_type=\'submit\', _value=T(\'update\')))\n    form = FORM(*rows)\n    if form.accepts(request.vars, keepvalues=True):\n        strs = dict()\n        for key in keys:\n            name = md5_hash(key)\n            if form.vars[name]==chr(127): continue\n            strs[key] = form.vars[name]\n        write_dict(apath(filename, r=request), strs)\n        session.flash = T(\'file saved on %(time)s\', dict(time=time.ctime()))\n        redirect(URL(r=request,args=request.args))\n    return dict(app=request.args[0], filename=filename, form=form)\n\n\ndef about():\n    """ Read about info """\n    app = get_app()\n    # ## check if file is not there\n    about = safe_read(apath(\'%s/ABOUT\' % app, r=request))\n    license = safe_read(apath(\'%s/LICENSE\' % app, r=request))\n    return dict(app=app, about=MARKMIN(about), license=MARKMIN(license))\n\n\ndef design():\n    """ Application design handler """\n    app = get_app()\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    if request.vars.pluginfile!=None and not isinstance(request.vars.pluginfile,str):\n        filename=os.path.basename(request.vars.pluginfile.filename)\n        if plugin_install(app, request.vars.pluginfile.file,\n                          request, filename):\n            session.flash = T(\'new plugin installed\')\n            redirect(URL(\'design\',args=app))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n    elif isinstance(request.vars.pluginfile,str):\n        session.flash = T(\'plugin not specified\')\n        redirect(URL(r=request))\n\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+(\\.\\w+)+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views if not x.endswith(\'.bak\')]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    cronfolder = apath(\'%s/cron\' % app, r=request)\n    if not os.path.exists(cronfolder): os.mkdir(cronfolder)\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    plugins=[]\n    def filter_plugins(items,plugins):\n        plugins+=[item[7:].split(\'/\')[0].split(\'.\')[0] for item in items if item.startswith(\'plugin_\')]\n        plugins[:]=list(set(plugins))\n        plugins.sort()\n        return [item for item in items if not item.startswith(\'plugin_\')]\n\n    return dict(app=app,\n                models=filter_plugins(models,plugins),\n                defines=defines,\n                controllers=filter_plugins(controllers,plugins),\n                functions=functions,\n                views=filter_plugins(views,plugins),\n                modules=filter_plugins(modules,plugins),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics,plugins),\n                languages=languages,\n                crontab=crontab,\n                plugins=plugins)\n\ndef delete_plugin():\n    """ Object delete handler """\n    app=request.args(0)\n    plugin = request.args(1)\n    plugin_name=\'plugin_\'+plugin\n    if \'nodelete\' in request.vars:\n        redirect(URL(\'design\',args=app))\n    elif \'delete\' in request.vars:\n        try:\n            for folder in [\'models\',\'views\',\'controllers\',\'static\',\'modules\']:\n                path=os.path.join(apath(app,r=request),folder)\n                for item in os.listdir(path):\n                    if item.startswith(plugin_name):\n                        filename=os.path.join(path,item)\n                        if os.path.isdir(filename):\n                            shutil.rmtree(filename)\n                        else:\n                            os.unlink(filename)\n            session.flash = T(\'plugin "%(plugin)s" deleted\',\n                              dict(plugin=plugin))\n        except Exception:\n            session.flash = T(\'unable to delete file plugin "%(plugin)s"\',\n                              dict(plugin=plugin))\n        redirect(URL(\'design\',args=request.args(0)))\n    return dict(plugin=plugin)\n\ndef plugin():\n    """ Application design handler """\n    app = get_app()\n    plugin = request.args(1)\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    def filter_plugins(items):\n        regex=re.compile(\'^plugin_\'+plugin+\'(/.*|\\..*)?$\')\n        return [item for item in items if regex.match(item)]\n\n    return dict(app=app,\n                models=filter_plugins(models),\n                defines=defines,\n                controllers=filter_plugins(controllers),\n                functions=functions,\n                views=filter_plugins(views),\n                modules=filter_plugins(modules),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics),\n                languages=languages,\n                crontab=crontab)\n\n\ndef create_file():\n    """ Create files handler """\n    try:\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n        filename = re.sub(\'[^\\w./-]+\', \'_\', request.vars.filename)\n\n        if path[-11:] == \'/languages/\':\n            # Handle language files\n            if len(filename) == 0:\n                raise SyntaxError\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n            app = path.split(\'/\')[-3]\n            path=os.path.join(apath(app, r=request),\'languages\',filename)\n            if not os.path.exists(path):\n                safe_write(path, \'\')\n            findT(apath(app, r=request), filename[:-3])\n            session.flash = T(\'language file "%(filename)s" created/updated\',\n                              dict(filename=filename))\n            redirect(request.vars.sender)\n\n        elif path[-8:] == \'/models/\':\n            # Handle python models\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n\'\n\n        elif path[-13:] == \'/controllers/\':\n            # Handle python controllers\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n# %s\\ndef index(): return dict(message="hello from %s")\'\n            text = text % (T(\'try something like\'), filename)\n\n        elif path[-7:] == \'/views/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle template (html) views\n            if filename.find(\'.\')<0:\n                filename += \'.html\'\n            extension = filename.split(\'.\')[-1].lower()\n\n            if len(filename) == 5:\n                raise SyntaxError\n\n            msg = T(\'This is the %(filename)s template\',\n                    dict(filename=filename))            \n            if extension == \'html\':\n                text = dedent("""\n                   {{extend \'layout.html\'}}\n                   <h1>%s</h1>\n                   {{=BEAUTIFY(response._vars)}}""" % msg)\n            else:\n                generic = os.path.join(path,\'generic.\'+extension)\n                if os.path.exists(generic):\n                    text = read_file(generic)\n                else:\n                    text = \'\'\n                \n        elif path[-9:] == \'/modules/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle python module files\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = dedent("""\n                   #!/usr/bin/env python\n                   # coding: utf8\n                   from gluon import *\\n""")\n\n        elif path[-8:] == \'/static/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            text = \'\'\n        else:\n            redirect(request.vars.sender)\n\n        full_filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(full_filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        if os.path.exists(full_filename):\n            raise SyntaxError\n\n        safe_write(full_filename, text)\n        session.flash = T(\'file "%(filename)s" created\',\n                          dict(filename=full_filename[len(path):]))\n        redirect(URL(\'edit\',\n                 args=[os.path.join(request.vars.location, filename)]))\n    except Exception, e:\n        if not isinstance(e,HTTP):\n            session.flash = T(\'cannot create file\')\n\n    redirect(request.vars.sender)\n\n\ndef upload_file():\n    """ File uploading handler """\n\n    try:\n        filename = None\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n\n        if request.vars.filename:\n            filename = re.sub(\'[^\\w\\./]+\', \'_\', request.vars.filename)\n        else:\n            filename = os.path.split(request.vars.file.filename)[-1]\n\n        if path[-8:] == \'/models/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-9:] == \'/modules/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-13:] == \'/controllers/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-7:] == \'/views/\' and not filename[-5:] == \'.html\':\n            filename += \'.html\'\n\n        if path[-11:] == \'/languages/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        safe_write(filename, request.vars.file.file.read(), \'wb\')\n        session.flash = T(\'file "%(filename)s" uploaded\',\n                          dict(filename=filename[len(path):]))\n    except Exception:\n        if filename:\n            d = dict(filename = filename[len(path):])\n        else:\n            d = dict(filename = \'unkown\')\n        session.flash = T(\'cannot upload file "%(filename)s"\', d)\n\n    redirect(request.vars.sender)\n\n\ndef errors():\n    """ Error handler """\n    import operator\n    import os\n    import pickle\n    import hashlib\n\n    app = get_app()\n\n    method = request.args(1) or \'new\'\n\n\n    if method == \'new\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in listdir(errors_path, \'^\\w.*\'):\n            fullpath = os.path.join(errors_path, fn)\n            if not os.path.isfile(fullpath): continue\n            try:\n                fullpath_file = open(fullpath, \'r\')\n                try:\n                    error = pickle.load(fullpath_file)\n                finally:\n                    fullpath_file.close()\n            except IOError:\n                continue\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                os.unlink(fullpath)\n            else:\n                try:\n                    hash2error[hash][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method)\n    else:\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                os.unlink(apath(\'%s/errors/%s\' % (app, item[7:]), r=request))\n        func = lambda p: os.stat(apath(\'%s/errors/%s\' % \\\n                                           (app, p), r=request)).st_mtime\n        tickets = sorted(listdir(apath(\'%s/errors/\' % app, r=request), \'^\\w.*\'),\n                         key=func,\n                         reverse=True)\n\n        return dict(app=app, tickets=tickets, method=method)\n\n\ndef make_link(path):\n    """ Create a link from a path """\n    tryFile = path.replace(\'\\\\\', \'/\')\n\n    if os.path.isabs(tryFile) and os.path.isfile(tryFile):\n        (folder, filename) = os.path.split(tryFile)\n        (base, ext) = os.path.splitext(filename)\n        app = get_app()\n\n        editable = {\'controllers\': \'.py\', \'models\': \'.py\', \'views\': \'.html\'}\n        for key in editable.keys():\n            check_extension = folder.endswith("%s/%s" % (app,key))\n            if ext.lower() == editable[key] and check_extension:\n                return A(\'"\' + tryFile + \'"\',\n                         _href=URL(r=request,\n                         f=\'edit/%s/%s/%s\' % (app, key, filename))).xml()\n    return \'\'\n\n\ndef make_links(traceback):\n    """ Make links using the given traceback """\n\n    lwords = traceback.split(\'"\')\n\n    # Making the short circuit compatible with <= python2.4\n    result = (len(lwords) != 0) and lwords[0] or \'\'\n\n    i = 1\n\n    while i < len(lwords):\n        link = make_link(lwords[i])\n\n        if link == \'\':\n            result += \'"\' + lwords[i]\n        else:\n            result += link\n\n            if i + 1 < len(lwords):\n                result += lwords[i + 1]\n                i = i + 1\n\n        i = i + 1\n\n    return result\n\n\nclass TRACEBACK(object):\n    """ Generate the traceback """\n\n    def __init__(self, text):\n        """ TRACEBACK constructor """\n\n        self.s = make_links(CODE(text).xml())\n\n    def xml(self):\n        """ Returns the xml """\n\n        return self.s\n\n\ndef ticket():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    e.load(request, app, ticket)\n\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef error():\n    """ Generate a ticket (for testing) """\n    raise RuntimeError(\'admin ticket generator at your service\')\n\ndef update_languages():\n    """ Update available languages """\n\n    app = get_app()\n    update_all_languages(apath(app, r=request))\n    session.flash = T(\'Language files (static strings) updated\')\n    redirect(URL(\'design\',args=app,anchor=\'languages\'))\n\ndef twitter():\n    session.forget()\n    session._unlock(response)\n    import gluon.tools\n    import gluon.contrib.simplejson as sj\n    try:\n        if TWITTER_HASH:\n            page = gluon.tools.fetch(\'http://twitter.com/%s?format=json\'%TWITTER_HASH)\n            return sj.loads(page)[\'#timeline\']\n        else:\n            return \'disabled\'\n    except Exception, e:\n        return DIV(T(\'Unable to download because:\'),BR(),str(e))\n\ndef user():\n    if MULTI_USER_MODE:\n        if not db(db.auth_user).count():\n            auth.settings.registration_requires_approval = False            \n        return dict(form=auth())\n    else:\n        return dict(form=T("Disabled"))\n\ndef reload_routes():\n    """ Reload routes.py """\n    import gluon.rewrite\n    gluon.rewrite.load()\n    redirect(URL(\'site\'))\n\nresponse._vars=response._caller(check_version)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.TypeError object>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.TypeError object>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.TypeError object>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.TypeError object>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.TypeError object>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.TypeError object>'
p22
sS'args'
p23
S"('not all arguments converted during string formatting',)"
p24
sS'__reduce__'
p25
S'<built-in method __reduce__ of exceptions.TypeError object>'
p26
sS'__str__'
p27
S"<method-wrapper '__str__' of exceptions.TypeError object>"
p28
sS'__format__'
p29
S'<built-in method __format__ of exceptions.TypeError object>'
p30
sS'__getattribute__'
p31
S"<method-wrapper '__getattribute__' of exceptions.TypeError object>"
p32
sS'__class__'
p33
S"<type 'exceptions.TypeError'>"
p34
sS'__unicode__'
p35
S'<built-in method __unicode__ of exceptions.TypeError object>'
p36
sS'__delattr__'
p37
S"<method-wrapper '__delattr__' of exceptions.TypeError object>"
p38
sS'__subclasshook__'
p39
S'<built-in method __subclasshook__ of type object>'
p40
sS'__repr__'
p41
S"<method-wrapper '__repr__' of exceptions.TypeError object>"
p42
sS'__dict__'
p43
S'{}'
p44
sS'__sizeof__'
p45
S'<built-in method __sizeof__ of exceptions.TypeError object>'
p46
sS'__doc__'
p47
S"'Inappropriate argument type.'"
p48
sS'__init__'
p49
S"<method-wrapper '__init__' of exceptions.TypeError object>"
p50
sS'__new__'
p51
S'<built-in method __new__ of type object>'
p52
ssS'evalue'
p53
S'not all arguments converted during string formatting'
p54
sS'request'
p55
ccopy_reg
_reconstructor
p56
(cgluon.html
BEAUTIFY
p57
c__builtin__
object
p58
NtRp59
(dp60
S'attributes'
p61
(dp62
sS'components'
p63
(lp64
g56
(cgluon.html
TABLE
p65
g58
NtRp66
(dp67
g61
(dp68
S'level'
p69
I5
ssS'parent'
p70
Nsg63
(lp71
g56
(cgluon.html
TR
p72
g58
NtRp73
(dp74
g61
(dp75
sg70
g66
sg63
(lp76
g56
(cgluon.html
TD
p77
g58
NtRp78
(dp79
g61
(dp80
S'_style'
p81
S'font-weight:bold;'
p82
ssg70
g73
sg63
(lp83
S'ajax'
p84
asbag56
(g77
g58
NtRp85
(dp86
g61
(dp87
S'_valign'
p88
S'top'
p89
ssg70
g73
sg63
(lp90
S':'
asbag56
(g77
g58
NtRp91
(dp92
g61
(dp93
sg70
g73
sg63
(lp94
g56
(g57
g58
NtRp95
(dp96
g61
(dp97
g69
I5
ssg70
g91
sg63
(lp98
S'True'
p99
asbasbasbag56
(g72
g58
NtRp100
(dp101
g61
(dp102
sg70
g66
sg63
(lp103
g56
(g77
g58
NtRp104
(dp105
g61
(dp106
g81
g82
ssg70
g100
sg63
(lp107
S'application'
p108
asbag56
(g77
g58
NtRp109
(dp110
g61
(dp111
g88
g89
ssg70
g100
sg63
(lp112
S':'
asbag56
(g77
g58
NtRp113
(dp114
g61
(dp115
sg70
g100
sg63
(lp116
g56
(g57
g58
NtRp117
(dp118
g61
(dp119
g69
I5
ssg70
g113
sg63
(lp120
S'admin'
p121
asbasbasbag56
(g72
g58
NtRp122
(dp123
g61
(dp124
sg70
g66
sg63
(lp125
g56
(g77
g58
NtRp126
(dp127
g61
(dp128
g81
g82
ssg70
g122
sg63
(lp129
g23
asbag56
(g77
g58
NtRp130
(dp131
g61
(dp132
g88
g89
ssg70
g122
sg63
(lp133
S':'
asbag56
(g77
g58
NtRp134
(dp135
g61
(dp136
sg70
g122
sg63
(lp137
g56
(g57
g58
NtRp138
(dp139
g61
(dp140
g69
I5
ssg70
g134
sg63
(lp141
g56
(g65
g58
NtRp142
(dp143
g61
(dp144
g69
I4
ssg70
Nsg63
(lp145
sbasbasbasbag56
(g72
g58
NtRp146
(dp147
g61
(dp148
sg70
g66
sg63
(lp149
g56
(g77
g58
NtRp150
(dp151
g61
(dp152
g81
g82
ssg70
g146
sg63
(lp153
S'body'
p154
asbag56
(g77
g58
NtRp155
(dp156
g61
(dp157
g88
g89
ssg70
g146
sg63
(lp158
S':'
asbag56
(g77
g58
NtRp159
(dp160
g61
(dp161
sg70
g146
sg63
(lp162
g56
(g57
g58
NtRp163
(dp164
g61
(dp165
g69
I5
ssg70
g159
sg63
(lp166
S"<open file '<fdopen>', mode 'w+b' at 0x2ee56f0>"
p167
asbasbasbag56
(g72
g58
NtRp168
(dp169
g61
(dp170
sg70
g66
sg63
(lp171
g56
(g77
g58
NtRp172
(dp173
g61
(dp174
g81
g82
ssg70
g168
sg63
(lp175
S'client'
p176
asbag56
(g77
g58
NtRp177
(dp178
g61
(dp179
g88
g89
ssg70
g168
sg63
(lp180
S':'
asbag56
(g77
g58
NtRp181
(dp182
g61
(dp183
sg70
g168
sg63
(lp184
g56
(g57
g58
NtRp185
(dp186
g61
(dp187
g69
I5
ssg70
g181
sg63
(lp188
S'127.0.0.1'
p189
asbasbasbag56
(g72
g58
NtRp190
(dp191
g61
(dp192
sg70
g66
sg63
(lp193
g56
(g77
g58
NtRp194
(dp195
g61
(dp196
g81
g82
ssg70
g190
sg63
(lp197
S'controller'
p198
asbag56
(g77
g58
NtRp199
(dp200
g61
(dp201
g88
g89
ssg70
g190
sg63
(lp202
S':'
asbag56
(g77
g58
NtRp203
(dp204
g61
(dp205
sg70
g190
sg63
(lp206
g56
(g57
g58
NtRp207
(dp208
g61
(dp209
g69
I5
ssg70
g203
sg63
(lp210
S'default'
p211
asbasbasbag56
(g72
g58
NtRp212
(dp213
g61
(dp214
sg70
g66
sg63
(lp215
g56
(g77
g58
NtRp216
(dp217
g61
(dp218
g81
g82
ssg70
g212
sg63
(lp219
S'cookies'
p220
asbag56
(g77
g58
NtRp221
(dp222
g61
(dp223
g88
g89
ssg70
g212
sg63
(lp224
S':'
asbag56
(g77
g58
NtRp225
(dp226
g61
(dp227
sg70
g212
sg63
(lp228
g56
(g57
g58
NtRp229
(dp230
g61
(dp231
g69
I5
ssg70
g225
sg63
(lp232
g56
(g65
g58
NtRp233
(dp234
g61
(dp235
g69
I4
ssg70
Nsg63
(lp236
g56
(g72
g58
NtRp237
(dp238
g61
(dp239
sg70
g233
sg63
(lp240
g56
(g77
g58
NtRp241
(dp242
g61
(dp243
g81
g82
ssg70
g237
sg63
(lp244
S'session_id_admin'
p245
asbag56
(g77
g58
NtRp246
(dp247
g61
(dp248
g88
g89
ssg70
g237
sg63
(lp249
S':'
asbag56
(g77
g58
NtRp250
(dp251
g61
(dp252
sg70
g237
sg63
(lp253
g56
(g57
g58
NtRp254
(dp255
g61
(dp256
g69
I4
ssg70
g250
sg63
(lp257
g56
(g65
g58
NtRp258
(dp259
g61
(dp260
g69
I3
ssg70
Nsg63
(lp261
g56
(g72
g58
NtRp262
(dp263
g61
(dp264
sg70
g258
sg63
(lp265
g56
(g77
g58
NtRp266
(dp267
g61
(dp268
g81
g82
ssg70
g262
sg63
(lp269
S'comment'
p270
asbag56
(g77
g58
NtRp271
(dp272
g61
(dp273
g88
g89
ssg70
g262
sg63
(lp274
S':'
asbag56
(g77
g58
NtRp275
(dp276
g61
(dp277
sg70
g262
sg63
(lp278
g56
(g57
g58
NtRp279
(dp280
g61
(dp281
g69
I3
ssg70
g275
sg63
(lp282
S''
asbasbasbag56
(g72
g58
NtRp283
(dp284
g61
(dp285
sg70
g258
sg63
(lp286
g56
(g77
g58
NtRp287
(dp288
g61
(dp289
g81
g82
ssg70
g283
sg63
(lp290
S'domain'
p291
asbag56
(g77
g58
NtRp292
(dp293
g61
(dp294
g88
g89
ssg70
g283
sg63
(lp295
S':'
asbag56
(g77
g58
NtRp296
(dp297
g61
(dp298
sg70
g283
sg63
(lp299
g56
(g57
g58
NtRp300
(dp301
g61
(dp302
g69
I3
ssg70
g296
sg63
(lp303
S''
asbasbasbag56
(g72
g58
NtRp304
(dp305
g61
(dp306
sg70
g258
sg63
(lp307
g56
(g77
g58
NtRp308
(dp309
g61
(dp310
g81
g82
ssg70
g304
sg63
(lp311
S'expires'
p312
asbag56
(g77
g58
NtRp313
(dp314
g61
(dp315
g88
g89
ssg70
g304
sg63
(lp316
S':'
asbag56
(g77
g58
NtRp317
(dp318
g61
(dp319
sg70
g304
sg63
(lp320
g56
(g57
g58
NtRp321
(dp322
g61
(dp323
g69
I3
ssg70
g317
sg63
(lp324
S''
asbasbasbag56
(g72
g58
NtRp325
(dp326
g61
(dp327
sg70
g258
sg63
(lp328
g56
(g77
g58
NtRp329
(dp330
g61
(dp331
g81
g82
ssg70
g325
sg63
(lp332
S'httponly'
p333
asbag56
(g77
g58
NtRp334
(dp335
g61
(dp336
g88
g89
ssg70
g325
sg63
(lp337
S':'
asbag56
(g77
g58
NtRp338
(dp339
g61
(dp340
sg70
g325
sg63
(lp341
g56
(g57
g58
NtRp342
(dp343
g61
(dp344
g69
I3
ssg70
g338
sg63
(lp345
S''
asbasbasbag56
(g72
g58
NtRp346
(dp347
g61
(dp348
sg70
g258
sg63
(lp349
g56
(g77
g58
NtRp350
(dp351
g61
(dp352
g81
g82
ssg70
g346
sg63
(lp353
S'max-age'
p354
asbag56
(g77
g58
NtRp355
(dp356
g61
(dp357
g88
g89
ssg70
g346
sg63
(lp358
S':'
asbag56
(g77
g58
NtRp359
(dp360
g61
(dp361
sg70
g346
sg63
(lp362
g56
(g57
g58
NtRp363
(dp364
g61
(dp365
g69
I3
ssg70
g359
sg63
(lp366
S''
asbasbasbag56
(g72
g58
NtRp367
(dp368
g61
(dp369
sg70
g258
sg63
(lp370
g56
(g77
g58
NtRp371
(dp372
g61
(dp373
g81
g82
ssg70
g367
sg63
(lp374
S'path'
p375
asbag56
(g77
g58
NtRp376
(dp377
g61
(dp378
g88
g89
ssg70
g367
sg63
(lp379
S':'
asbag56
(g77
g58
NtRp380
(dp381
g61
(dp382
sg70
g367
sg63
(lp383
g56
(g57
g58
NtRp384
(dp385
g61
(dp386
g69
I3
ssg70
g380
sg63
(lp387
S''
asbasbasbag56
(g72
g58
NtRp388
(dp389
g61
(dp390
sg70
g258
sg63
(lp391
g56
(g77
g58
NtRp392
(dp393
g61
(dp394
g81
g82
ssg70
g388
sg63
(lp395
S'secure'
p396
asbag56
(g77
g58
NtRp397
(dp398
g61
(dp399
g88
g89
ssg70
g388
sg63
(lp400
S':'
asbag56
(g77
g58
NtRp401
(dp402
g61
(dp403
sg70
g388
sg63
(lp404
g56
(g57
g58
NtRp405
(dp406
g61
(dp407
g69
I3
ssg70
g401
sg63
(lp408
S''
asbasbasbag56
(g72
g58
NtRp409
(dp410
g61
(dp411
sg70
g258
sg63
(lp412
g56
(g77
g58
NtRp413
(dp414
g61
(dp415
g81
g82
ssg70
g409
sg63
(lp416
S'version'
p417
asbag56
(g77
g58
NtRp418
(dp419
g61
(dp420
g88
g89
ssg70
g409
sg63
(lp421
S':'
asbag56
(g77
g58
NtRp422
(dp423
g61
(dp424
sg70
g409
sg63
(lp425
g56
(g57
g58
NtRp426
(dp427
g61
(dp428
g69
I3
ssg70
g422
sg63
(lp429
S''
asbasbasbasbasbasbasbag56
(g72
g58
NtRp430
(dp431
g61
(dp432
sg70
g233
sg63
(lp433
g56
(g77
g58
NtRp434
(dp435
g61
(dp436
g81
g82
ssg70
g430
sg63
(lp437
S'session_id_blog'
p438
asbag56
(g77
g58
NtRp439
(dp440
g61
(dp441
g88
g89
ssg70
g430
sg63
(lp442
S':'
asbag56
(g77
g58
NtRp443
(dp444
g61
(dp445
sg70
g430
sg63
(lp446
g56
(g57
g58
NtRp447
(dp448
g61
(dp449
g69
I4
ssg70
g443
sg63
(lp450
g56
(g65
g58
NtRp451
(dp452
g61
(dp453
g69
I3
ssg70
Nsg63
(lp454
g56
(g72
g58
NtRp455
(dp456
g61
(dp457
sg70
g451
sg63
(lp458
g56
(g77
g58
NtRp459
(dp460
g61
(dp461
g81
g82
ssg70
g455
sg63
(lp462
g270
asbag56
(g77
g58
NtRp463
(dp464
g61
(dp465
g88
g89
ssg70
g455
sg63
(lp466
S':'
asbag56
(g77
g58
NtRp467
(dp468
g61
(dp469
sg70
g455
sg63
(lp470
g56
(g57
g58
NtRp471
(dp472
g61
(dp473
g69
I3
ssg70
g467
sg63
(lp474
S''
asbasbasbag56
(g72
g58
NtRp475
(dp476
g61
(dp477
sg70
g451
sg63
(lp478
g56
(g77
g58
NtRp479
(dp480
g61
(dp481
g81
g82
ssg70
g475
sg63
(lp482
g291
asbag56
(g77
g58
NtRp483
(dp484
g61
(dp485
g88
g89
ssg70
g475
sg63
(lp486
S':'
asbag56
(g77
g58
NtRp487
(dp488
g61
(dp489
sg70
g475
sg63
(lp490
g56
(g57
g58
NtRp491
(dp492
g61
(dp493
g69
I3
ssg70
g487
sg63
(lp494
S''
asbasbasbag56
(g72
g58
NtRp495
(dp496
g61
(dp497
sg70
g451
sg63
(lp498
g56
(g77
g58
NtRp499
(dp500
g61
(dp501
g81
g82
ssg70
g495
sg63
(lp502
g312
asbag56
(g77
g58
NtRp503
(dp504
g61
(dp505
g88
g89
ssg70
g495
sg63
(lp506
S':'
asbag56
(g77
g58
NtRp507
(dp508
g61
(dp509
sg70
g495
sg63
(lp510
g56
(g57
g58
NtRp511
(dp512
g61
(dp513
g69
I3
ssg70
g507
sg63
(lp514
S''
asbasbasbag56
(g72
g58
NtRp515
(dp516
g61
(dp517
sg70
g451
sg63
(lp518
g56
(g77
g58
NtRp519
(dp520
g61
(dp521
g81
g82
ssg70
g515
sg63
(lp522
g333
asbag56
(g77
g58
NtRp523
(dp524
g61
(dp525
g88
g89
ssg70
g515
sg63
(lp526
S':'
asbag56
(g77
g58
NtRp527
(dp528
g61
(dp529
sg70
g515
sg63
(lp530
g56
(g57
g58
NtRp531
(dp532
g61
(dp533
g69
I3
ssg70
g527
sg63
(lp534
S''
asbasbasbag56
(g72
g58
NtRp535
(dp536
g61
(dp537
sg70
g451
sg63
(lp538
g56
(g77
g58
NtRp539
(dp540
g61
(dp541
g81
g82
ssg70
g535
sg63
(lp542
g354
asbag56
(g77
g58
NtRp543
(dp544
g61
(dp545
g88
g89
ssg70
g535
sg63
(lp546
S':'
asbag56
(g77
g58
NtRp547
(dp548
g61
(dp549
sg70
g535
sg63
(lp550
g56
(g57
g58
NtRp551
(dp552
g61
(dp553
g69
I3
ssg70
g547
sg63
(lp554
S''
asbasbasbag56
(g72
g58
NtRp555
(dp556
g61
(dp557
sg70
g451
sg63
(lp558
g56
(g77
g58
NtRp559
(dp560
g61
(dp561
g81
g82
ssg70
g555
sg63
(lp562
g375
asbag56
(g77
g58
NtRp563
(dp564
g61
(dp565
g88
g89
ssg70
g555
sg63
(lp566
S':'
asbag56
(g77
g58
NtRp567
(dp568
g61
(dp569
sg70
g555
sg63
(lp570
g56
(g57
g58
NtRp571
(dp572
g61
(dp573
g69
I3
ssg70
g567
sg63
(lp574
S''
asbasbasbag56
(g72
g58
NtRp575
(dp576
g61
(dp577
sg70
g451
sg63
(lp578
g56
(g77
g58
NtRp579
(dp580
g61
(dp581
g81
g82
ssg70
g575
sg63
(lp582
g396
asbag56
(g77
g58
NtRp583
(dp584
g61
(dp585
g88
g89
ssg70
g575
sg63
(lp586
S':'
asbag56
(g77
g58
NtRp587
(dp588
g61
(dp589
sg70
g575
sg63
(lp590
g56
(g57
g58
NtRp591
(dp592
g61
(dp593
g69
I3
ssg70
g587
sg63
(lp594
S''
asbasbasbag56
(g72
g58
NtRp595
(dp596
g61
(dp597
sg70
g451
sg63
(lp598
g56
(g77
g58
NtRp599
(dp600
g61
(dp601
g81
g82
ssg70
g595
sg63
(lp602
g417
asbag56
(g77
g58
NtRp603
(dp604
g61
(dp605
g88
g89
ssg70
g595
sg63
(lp606
S':'
asbag56
(g77
g58
NtRp607
(dp608
g61
(dp609
sg70
g595
sg63
(lp610
g56
(g57
g58
NtRp611
(dp612
g61
(dp613
g69
I3
ssg70
g607
sg63
(lp614
S''
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp615
(dp616
g61
(dp617
sg70
g66
sg63
(lp618
g56
(g77
g58
NtRp619
(dp620
g61
(dp621
g81
g82
ssg70
g615
sg63
(lp622
S'env'
p623
asbag56
(g77
g58
NtRp624
(dp625
g61
(dp626
g88
g89
ssg70
g615
sg63
(lp627
S':'
asbag56
(g77
g58
NtRp628
(dp629
g61
(dp630
sg70
g615
sg63
(lp631
g56
(g57
g58
NtRp632
(dp633
g61
(dp634
g69
I5
ssg70
g628
sg63
(lp635
g56
(g65
g58
NtRp636
(dp637
g61
(dp638
g69
I4
ssg70
Nsg63
(lp639
g56
(g72
g58
NtRp640
(dp641
g61
(dp642
sg70
g636
sg63
(lp643
g56
(g77
g58
NtRp644
(dp645
g61
(dp646
g81
g82
ssg70
g640
sg63
(lp647
S'app_folders'
p648
asbag56
(g77
g58
NtRp649
(dp650
g61
(dp651
g88
g89
ssg70
g640
sg63
(lp652
S':'
asbag56
(g77
g58
NtRp653
(dp654
g61
(dp655
sg70
g640
sg63
(lp656
g56
(g57
g58
NtRp657
(dp658
g61
(dp659
g69
I4
ssg70
g653
sg63
(lp660
S"set(['/media/misperoles/git/pyj3nnn1/web2py/applications/admin/', '/media/misperoles/git/pyj3nnn1/web2py/applications/blog/'])"
p661
asbasbasbag56
(g72
g58
NtRp662
(dp663
g61
(dp664
sg70
g636
sg63
(lp665
g56
(g77
g58
NtRp666
(dp667
g61
(dp668
g81
g82
ssg70
g662
sg63
(lp669
S'applications_parent'
p670
asbag56
(g77
g58
NtRp671
(dp672
g61
(dp673
g88
g89
ssg70
g662
sg63
(lp674
S':'
asbag56
(g77
g58
NtRp675
(dp676
g61
(dp677
sg70
g662
sg63
(lp678
g56
(g57
g58
NtRp679
(dp680
g61
(dp681
g69
I4
ssg70
g675
sg63
(lp682
S'/media/misperoles/git/pyj3nnn1/web2py'
p683
asbasbasbag56
(g72
g58
NtRp684
(dp685
g61
(dp686
sg70
g636
sg63
(lp687
g56
(g77
g58
NtRp688
(dp689
g61
(dp690
g81
g82
ssg70
g684
sg63
(lp691
S'cmd_args'
p692
asbag56
(g77
g58
NtRp693
(dp694
g61
(dp695
g88
g89
ssg70
g684
sg63
(lp696
S':'
asbag56
(g77
g58
NtRp697
(dp698
g61
(dp699
sg70
g684
sg63
(lp700
g56
(g57
g58
NtRp701
(dp702
g61
(dp703
g69
I4
ssg70
g697
sg63
(lp704
g56
(g65
g58
NtRp705
(dp706
g61
(dp707
g69
I3
ssg70
Nsg63
(lp708
sbasbasbasbag56
(g72
g58
NtRp709
(dp710
g61
(dp711
sg70
g636
sg63
(lp712
g56
(g77
g58
NtRp713
(dp714
g61
(dp715
g81
g82
ssg70
g709
sg63
(lp716
S'cmd_options'
p717
asbag56
(g77
g58
NtRp718
(dp719
g61
(dp720
g88
g89
ssg70
g709
sg63
(lp721
S':'
asbag56
(g77
g58
NtRp722
(dp723
g61
(dp724
sg70
g709
sg63
(lp725
g56
(g57
g58
NtRp726
(dp727
g61
(dp728
g69
I4
ssg70
g722
sg63
(lp729
S"<Values at 0x1add170: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'Diotima', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/media/misperoles/git/pyj3nnn1/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'plain': False, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'numthreads': None, 'nobanner': False}>"
p730
asbasbasbag56
(g72
g58
NtRp731
(dp732
g61
(dp733
sg70
g636
sg63
(lp734
g56
(g77
g58
NtRp735
(dp736
g61
(dp737
g81
g82
ssg70
g731
sg63
(lp738
S'content_length'
p739
asbag56
(g77
g58
NtRp740
(dp741
g61
(dp742
g88
g89
ssg70
g731
sg63
(lp743
S':'
asbag56
(g77
g58
NtRp744
(dp745
g61
(dp746
sg70
g731
sg63
(lp747
g56
(g57
g58
NtRp748
(dp749
g61
(dp750
g69
I4
ssg70
g744
sg63
(lp751
S'0'
asbasbasbag56
(g72
g58
NtRp752
(dp753
g61
(dp754
sg70
g636
sg63
(lp755
g56
(g77
g58
NtRp756
(dp757
g61
(dp758
g81
g82
ssg70
g752
sg63
(lp759
S'db_sessions'
p760
asbag56
(g77
g58
NtRp761
(dp762
g61
(dp763
g88
g89
ssg70
g752
sg63
(lp764
S':'
asbag56
(g77
g58
NtRp765
(dp766
g61
(dp767
sg70
g752
sg63
(lp768
g56
(g57
g58
NtRp769
(dp770
g61
(dp771
g69
I4
ssg70
g765
sg63
(lp772
S'set([])'
p773
asbasbasbag56
(g72
g58
NtRp774
(dp775
g61
(dp776
sg70
g636
sg63
(lp777
g56
(g77
g58
NtRp778
(dp779
g61
(dp780
g81
g82
ssg70
g774
sg63
(lp781
S'debugging'
p782
asbag56
(g77
g58
NtRp783
(dp784
g61
(dp785
g88
g89
ssg70
g774
sg63
(lp786
S':'
asbag56
(g77
g58
NtRp787
(dp788
g61
(dp789
sg70
g774
sg63
(lp790
g56
(g57
g58
NtRp791
(dp792
g61
(dp793
g69
I4
ssg70
g787
sg63
(lp794
S'False'
p795
asbasbasbag56
(g72
g58
NtRp796
(dp797
g61
(dp798
sg70
g636
sg63
(lp799
g56
(g77
g58
NtRp800
(dp801
g61
(dp802
g81
g82
ssg70
g796
sg63
(lp803
S'gluon_parent'
p804
asbag56
(g77
g58
NtRp805
(dp806
g61
(dp807
g88
g89
ssg70
g796
sg63
(lp808
S':'
asbag56
(g77
g58
NtRp809
(dp810
g61
(dp811
sg70
g796
sg63
(lp812
g56
(g57
g58
NtRp813
(dp814
g61
(dp815
g69
I4
ssg70
g809
sg63
(lp816
S'/media/misperoles/git/pyj3nnn1/web2py'
p817
asbasbasbag56
(g72
g58
NtRp818
(dp819
g61
(dp820
sg70
g636
sg63
(lp821
g56
(g77
g58
NtRp822
(dp823
g61
(dp824
g81
g82
ssg70
g818
sg63
(lp825
S'http_accept'
p826
asbag56
(g77
g58
NtRp827
(dp828
g61
(dp829
g88
g89
ssg70
g818
sg63
(lp830
S':'
asbag56
(g77
g58
NtRp831
(dp832
g61
(dp833
sg70
g818
sg63
(lp834
g56
(g57
g58
NtRp835
(dp836
g61
(dp837
g69
I4
ssg70
g831
sg63
(lp838
S'*/*'
p839
asbasbasbag56
(g72
g58
NtRp840
(dp841
g61
(dp842
sg70
g636
sg63
(lp843
g56
(g77
g58
NtRp844
(dp845
g61
(dp846
g81
g82
ssg70
g840
sg63
(lp847
S'http_accept_charset'
p848
asbag56
(g77
g58
NtRp849
(dp850
g61
(dp851
g88
g89
ssg70
g840
sg63
(lp852
S':'
asbag56
(g77
g58
NtRp853
(dp854
g61
(dp855
sg70
g840
sg63
(lp856
g56
(g57
g58
NtRp857
(dp858
g61
(dp859
g69
I4
ssg70
g853
sg63
(lp860
S'ISO-8859-1,utf-8;q=0.7,*;q=0.7'
p861
asbasbasbag56
(g72
g58
NtRp862
(dp863
g61
(dp864
sg70
g636
sg63
(lp865
g56
(g77
g58
NtRp866
(dp867
g61
(dp868
g81
g82
ssg70
g862
sg63
(lp869
S'http_accept_encoding'
p870
asbag56
(g77
g58
NtRp871
(dp872
g61
(dp873
g88
g89
ssg70
g862
sg63
(lp874
S':'
asbag56
(g77
g58
NtRp875
(dp876
g61
(dp877
sg70
g862
sg63
(lp878
g56
(g57
g58
NtRp879
(dp880
g61
(dp881
g69
I4
ssg70
g875
sg63
(lp882
S'gzip, deflate'
p883
asbasbasbag56
(g72
g58
NtRp884
(dp885
g61
(dp886
sg70
g636
sg63
(lp887
g56
(g77
g58
NtRp888
(dp889
g61
(dp890
g81
g82
ssg70
g884
sg63
(lp891
S'http_accept_language'
p892
asbag56
(g77
g58
NtRp893
(dp894
g61
(dp895
g88
g89
ssg70
g884
sg63
(lp896
S':'
asbag56
(g77
g58
NtRp897
(dp898
g61
(dp899
sg70
g884
sg63
(lp900
g56
(g57
g58
NtRp901
(dp902
g61
(dp903
g69
I4
ssg70
g897
sg63
(lp904
S'en-us,en;q=0.5'
p905
asbasbasbag56
(g72
g58
NtRp906
(dp907
g61
(dp908
sg70
g636
sg63
(lp909
g56
(g77
g58
NtRp910
(dp911
g61
(dp912
g81
g82
ssg70
g906
sg63
(lp913
S'http_cache_control'
p914
asbag56
(g77
g58
NtRp915
(dp916
g61
(dp917
g88
g89
ssg70
g906
sg63
(lp918
S':'
asbag56
(g77
g58
NtRp919
(dp920
g61
(dp921
sg70
g906
sg63
(lp922
g56
(g57
g58
NtRp923
(dp924
g61
(dp925
g69
I4
ssg70
g919
sg63
(lp926
S'no-cache'
p927
asbasbasbag56
(g72
g58
NtRp928
(dp929
g61
(dp930
sg70
g636
sg63
(lp931
g56
(g77
g58
NtRp932
(dp933
g61
(dp934
g81
g82
ssg70
g928
sg63
(lp935
S'http_connection'
p936
asbag56
(g77
g58
NtRp937
(dp938
g61
(dp939
g88
g89
ssg70
g928
sg63
(lp940
S':'
asbag56
(g77
g58
NtRp941
(dp942
g61
(dp943
sg70
g928
sg63
(lp944
g56
(g57
g58
NtRp945
(dp946
g61
(dp947
g69
I4
ssg70
g941
sg63
(lp948
S'keep-alive'
p949
asbasbasbag56
(g72
g58
NtRp950
(dp951
g61
(dp952
sg70
g636
sg63
(lp953
g56
(g77
g58
NtRp954
(dp955
g61
(dp956
g81
g82
ssg70
g950
sg63
(lp957
S'http_content_length'
p958
asbag56
(g77
g58
NtRp959
(dp960
g61
(dp961
g88
g89
ssg70
g950
sg63
(lp962
S':'
asbag56
(g77
g58
NtRp963
(dp964
g61
(dp965
sg70
g950
sg63
(lp966
g56
(g57
g58
NtRp967
(dp968
g61
(dp969
g69
I4
ssg70
g963
sg63
(lp970
S'0'
asbasbasbag56
(g72
g58
NtRp971
(dp972
g61
(dp973
sg70
g636
sg63
(lp974
g56
(g77
g58
NtRp975
(dp976
g61
(dp977
g81
g82
ssg70
g971
sg63
(lp978
S'http_cookie'
p979
asbag56
(g77
g58
NtRp980
(dp981
g61
(dp982
g88
g89
ssg70
g971
sg63
(lp983
S':'
asbag56
(g77
g58
NtRp984
(dp985
g61
(dp986
sg70
g971
sg63
(lp987
g56
(g57
g58
NtRp988
(dp989
g61
(dp990
g69
I4
ssg70
g984
sg63
(lp991
S'session_id_blog=127.0.0.1-f5819cdd-56e9-4805-a258-8100a7221758; session_id_admin=127.0.0.1-22596e58-6815-497a-80e5-f728980c8462'
p992
asbasbasbag56
(g72
g58
NtRp993
(dp994
g61
(dp995
sg70
g636
sg63
(lp996
g56
(g77
g58
NtRp997
(dp998
g61
(dp999
g81
g82
ssg70
g993
sg63
(lp1000
S'http_host'
p1001
asbag56
(g77
g58
NtRp1002
(dp1003
g61
(dp1004
g88
g89
ssg70
g993
sg63
(lp1005
S':'
asbag56
(g77
g58
NtRp1006
(dp1007
g61
(dp1008
sg70
g993
sg63
(lp1009
g56
(g57
g58
NtRp1010
(dp1011
g61
(dp1012
g69
I4
ssg70
g1006
sg63
(lp1013
S'127.0.0.1:8000'
p1014
asbasbasbag56
(g72
g58
NtRp1015
(dp1016
g61
(dp1017
sg70
g636
sg63
(lp1018
g56
(g77
g58
NtRp1019
(dp1020
g61
(dp1021
g81
g82
ssg70
g1015
sg63
(lp1022
S'http_pragma'
p1023
asbag56
(g77
g58
NtRp1024
(dp1025
g61
(dp1026
g88
g89
ssg70
g1015
sg63
(lp1027
S':'
asbag56
(g77
g58
NtRp1028
(dp1029
g61
(dp1030
sg70
g1015
sg63
(lp1031
g56
(g57
g58
NtRp1032
(dp1033
g61
(dp1034
g69
I4
ssg70
g1028
sg63
(lp1035
S'no-cache'
p1036
asbasbasbag56
(g72
g58
NtRp1037
(dp1038
g61
(dp1039
sg70
g636
sg63
(lp1040
g56
(g77
g58
NtRp1041
(dp1042
g61
(dp1043
g81
g82
ssg70
g1037
sg63
(lp1044
S'http_referer'
p1045
asbag56
(g77
g58
NtRp1046
(dp1047
g61
(dp1048
g88
g89
ssg70
g1037
sg63
(lp1049
S':'
asbag56
(g77
g58
NtRp1050
(dp1051
g61
(dp1052
sg70
g1037
sg63
(lp1053
g56
(g57
g58
NtRp1054
(dp1055
g61
(dp1056
g69
I4
ssg70
g1050
sg63
(lp1057
S'http://127.0.0.1:8000/admin/default/site'
p1058
asbasbasbag56
(g72
g58
NtRp1059
(dp1060
g61
(dp1061
sg70
g636
sg63
(lp1062
g56
(g77
g58
NtRp1063
(dp1064
g61
(dp1065
g81
g82
ssg70
g1059
sg63
(lp1066
S'http_user_agent'
p1067
asbag56
(g77
g58
NtRp1068
(dp1069
g61
(dp1070
g88
g89
ssg70
g1059
sg63
(lp1071
S':'
asbag56
(g77
g58
NtRp1072
(dp1073
g61
(dp1074
sg70
g1059
sg63
(lp1075
g56
(g57
g58
NtRp1076
(dp1077
g61
(dp1078
g69
I4
ssg70
g1072
sg63
(lp1079
S'Mozilla/5.0 (X11; Linux x86_64; rv:8.0.1) Gecko/20100101 Firefox/8.0.1'
p1080
asbasbasbag56
(g72
g58
NtRp1081
(dp1082
g61
(dp1083
sg70
g636
sg63
(lp1084
g56
(g77
g58
NtRp1085
(dp1086
g61
(dp1087
g81
g82
ssg70
g1081
sg63
(lp1088
S'http_x_requested_with'
p1089
asbag56
(g77
g58
NtRp1090
(dp1091
g61
(dp1092
g88
g89
ssg70
g1081
sg63
(lp1093
S':'
asbag56
(g77
g58
NtRp1094
(dp1095
g61
(dp1096
sg70
g1081
sg63
(lp1097
g56
(g57
g58
NtRp1098
(dp1099
g61
(dp1100
g69
I4
ssg70
g1094
sg63
(lp1101
S'XMLHttpRequest'
p1102
asbasbasbag56
(g72
g58
NtRp1103
(dp1104
g61
(dp1105
sg70
g636
sg63
(lp1106
g56
(g77
g58
NtRp1107
(dp1108
g61
(dp1109
g81
g82
ssg70
g1103
sg63
(lp1110
S'is_jython'
p1111
asbag56
(g77
g58
NtRp1112
(dp1113
g61
(dp1114
g88
g89
ssg70
g1103
sg63
(lp1115
S':'
asbag56
(g77
g58
NtRp1116
(dp1117
g61
(dp1118
sg70
g1103
sg63
(lp1119
g56
(g57
g58
NtRp1120
(dp1121
g61
(dp1122
g69
I4
ssg70
g1116
sg63
(lp1123
g795
asbasbasbag56
(g72
g58
NtRp1124
(dp1125
g61
(dp1126
sg70
g636
sg63
(lp1127
g56
(g77
g58
NtRp1128
(dp1129
g61
(dp1130
g81
g82
ssg70
g1124
sg63
(lp1131
S'path_info'
p1132
asbag56
(g77
g58
NtRp1133
(dp1134
g61
(dp1135
g88
g89
ssg70
g1124
sg63
(lp1136
S':'
asbag56
(g77
g58
NtRp1137
(dp1138
g61
(dp1139
sg70
g1124
sg63
(lp1140
g56
(g57
g58
NtRp1141
(dp1142
g61
(dp1143
g69
I4
ssg70
g1137
sg63
(lp1144
S'/admin/default/check_version'
p1145
asbasbasbag56
(g72
g58
NtRp1146
(dp1147
g61
(dp1148
sg70
g636
sg63
(lp1149
g56
(g77
g58
NtRp1150
(dp1151
g61
(dp1152
g81
g82
ssg70
g1146
sg63
(lp1153
S'query_string'
p1154
asbag56
(g77
g58
NtRp1155
(dp1156
g61
(dp1157
g88
g89
ssg70
g1146
sg63
(lp1158
S':'
asbag56
(g77
g58
NtRp1159
(dp1160
g61
(dp1161
sg70
g1146
sg63
(lp1162
g56
(g57
g58
NtRp1163
(dp1164
g61
(dp1165
g69
I4
ssg70
g1159
sg63
(lp1166
S''
asbasbasbag56
(g72
g58
NtRp1167
(dp1168
g61
(dp1169
sg70
g636
sg63
(lp1170
g56
(g77
g58
NtRp1171
(dp1172
g61
(dp1173
g81
g82
ssg70
g1167
sg63
(lp1174
S'remote_addr'
p1175
asbag56
(g77
g58
NtRp1176
(dp1177
g61
(dp1178
g88
g89
ssg70
g1167
sg63
(lp1179
S':'
asbag56
(g77
g58
NtRp1180
(dp1181
g61
(dp1182
sg70
g1167
sg63
(lp1183
g56
(g57
g58
NtRp1184
(dp1185
g61
(dp1186
g69
I4
ssg70
g1180
sg63
(lp1187
g189
asbasbasbag56
(g72
g58
NtRp1188
(dp1189
g61
(dp1190
sg70
g636
sg63
(lp1191
g56
(g77
g58
NtRp1192
(dp1193
g61
(dp1194
g81
g82
ssg70
g1188
sg63
(lp1195
S'remote_port'
p1196
asbag56
(g77
g58
NtRp1197
(dp1198
g61
(dp1199
g88
g89
ssg70
g1188
sg63
(lp1200
S':'
asbag56
(g77
g58
NtRp1201
(dp1202
g61
(dp1203
sg70
g1188
sg63
(lp1204
g56
(g57
g58
NtRp1205
(dp1206
g61
(dp1207
g69
I4
ssg70
g1201
sg63
(lp1208
S'55102'
p1209
asbasbasbag56
(g72
g58
NtRp1210
(dp1211
g61
(dp1212
sg70
g636
sg63
(lp1213
g56
(g77
g58
NtRp1214
(dp1215
g61
(dp1216
g81
g82
ssg70
g1210
sg63
(lp1217
S'request_method'
p1218
asbag56
(g77
g58
NtRp1219
(dp1220
g61
(dp1221
g88
g89
ssg70
g1210
sg63
(lp1222
S':'
asbag56
(g77
g58
NtRp1223
(dp1224
g61
(dp1225
sg70
g1210
sg63
(lp1226
g56
(g57
g58
NtRp1227
(dp1228
g61
(dp1229
g69
I4
ssg70
g1223
sg63
(lp1230
S'POST'
p1231
asbasbasbag56
(g72
g58
NtRp1232
(dp1233
g61
(dp1234
sg70
g636
sg63
(lp1235
g56
(g77
g58
NtRp1236
(dp1237
g61
(dp1238
g81
g82
ssg70
g1232
sg63
(lp1239
S'request_uri'
p1240
asbag56
(g77
g58
NtRp1241
(dp1242
g61
(dp1243
g88
g89
ssg70
g1232
sg63
(lp1244
S':'
asbag56
(g77
g58
NtRp1245
(dp1246
g61
(dp1247
sg70
g1232
sg63
(lp1248
g56
(g57
g58
NtRp1249
(dp1250
g61
(dp1251
g69
I4
ssg70
g1245
sg63
(lp1252
g1145
asbasbasbag56
(g72
g58
NtRp1253
(dp1254
g61
(dp1255
sg70
g636
sg63
(lp1256
g56
(g77
g58
NtRp1257
(dp1258
g61
(dp1259
g81
g82
ssg70
g1253
sg63
(lp1260
S'script_name'
p1261
asbag56
(g77
g58
NtRp1262
(dp1263
g61
(dp1264
g88
g89
ssg70
g1253
sg63
(lp1265
S':'
asbag56
(g77
g58
NtRp1266
(dp1267
g61
(dp1268
sg70
g1253
sg63
(lp1269
g56
(g57
g58
NtRp1270
(dp1271
g61
(dp1272
g69
I4
ssg70
g1266
sg63
(lp1273
S''
asbasbasbag56
(g72
g58
NtRp1274
(dp1275
g61
(dp1276
sg70
g636
sg63
(lp1277
g56
(g77
g58
NtRp1278
(dp1279
g61
(dp1280
g81
g82
ssg70
g1274
sg63
(lp1281
S'server_name'
p1282
asbag56
(g77
g58
NtRp1283
(dp1284
g61
(dp1285
g88
g89
ssg70
g1274
sg63
(lp1286
S':'
asbag56
(g77
g58
NtRp1287
(dp1288
g61
(dp1289
sg70
g1274
sg63
(lp1290
g56
(g57
g58
NtRp1291
(dp1292
g61
(dp1293
g69
I4
ssg70
g1287
sg63
(lp1294
S'Diotima'
p1295
asbasbasbag56
(g72
g58
NtRp1296
(dp1297
g61
(dp1298
sg70
g636
sg63
(lp1299
g56
(g77
g58
NtRp1300
(dp1301
g61
(dp1302
g81
g82
ssg70
g1296
sg63
(lp1303
S'server_port'
p1304
asbag56
(g77
g58
NtRp1305
(dp1306
g61
(dp1307
g88
g89
ssg70
g1296
sg63
(lp1308
S':'
asbag56
(g77
g58
NtRp1309
(dp1310
g61
(dp1311
sg70
g1296
sg63
(lp1312
g56
(g57
g58
NtRp1313
(dp1314
g61
(dp1315
g69
I4
ssg70
g1309
sg63
(lp1316
S'8000'
p1317
asbasbasbag56
(g72
g58
NtRp1318
(dp1319
g61
(dp1320
sg70
g636
sg63
(lp1321
g56
(g77
g58
NtRp1322
(dp1323
g61
(dp1324
g81
g82
ssg70
g1318
sg63
(lp1325
S'server_protocol'
p1326
asbag56
(g77
g58
NtRp1327
(dp1328
g61
(dp1329
g88
g89
ssg70
g1318
sg63
(lp1330
S':'
asbag56
(g77
g58
NtRp1331
(dp1332
g61
(dp1333
sg70
g1318
sg63
(lp1334
g56
(g57
g58
NtRp1335
(dp1336
g61
(dp1337
g69
I4
ssg70
g1331
sg63
(lp1338
S'HTTP/1.1'
p1339
asbasbasbag56
(g72
g58
NtRp1340
(dp1341
g61
(dp1342
sg70
g636
sg63
(lp1343
g56
(g77
g58
NtRp1344
(dp1345
g61
(dp1346
g81
g82
ssg70
g1340
sg63
(lp1347
S'server_software'
p1348
asbag56
(g77
g58
NtRp1349
(dp1350
g61
(dp1351
g88
g89
ssg70
g1340
sg63
(lp1352
S':'
asbag56
(g77
g58
NtRp1353
(dp1354
g61
(dp1355
sg70
g1340
sg63
(lp1356
g56
(g57
g58
NtRp1357
(dp1358
g61
(dp1359
g69
I4
ssg70
g1353
sg63
(lp1360
S'Rocket 1.2.4'
p1361
asbasbasbag56
(g72
g58
NtRp1362
(dp1363
g61
(dp1364
sg70
g636
sg63
(lp1365
g56
(g77
g58
NtRp1366
(dp1367
g61
(dp1368
g81
g82
ssg70
g1362
sg63
(lp1369
S'web2py_crontype'
p1370
asbag56
(g77
g58
NtRp1371
(dp1372
g61
(dp1373
g88
g89
ssg70
g1362
sg63
(lp1374
S':'
asbag56
(g77
g58
NtRp1375
(dp1376
g61
(dp1377
sg70
g1362
sg63
(lp1378
g56
(g57
g58
NtRp1379
(dp1380
g61
(dp1381
g69
I4
ssg70
g1375
sg63
(lp1382
S'hard'
p1383
asbasbasbag56
(g72
g58
NtRp1384
(dp1385
g61
(dp1386
sg70
g636
sg63
(lp1387
g56
(g77
g58
NtRp1388
(dp1389
g61
(dp1390
g81
g82
ssg70
g1384
sg63
(lp1391
S'web2py_original_uri'
p1392
asbag56
(g77
g58
NtRp1393
(dp1394
g61
(dp1395
g88
g89
ssg70
g1384
sg63
(lp1396
S':'
asbag56
(g77
g58
NtRp1397
(dp1398
g61
(dp1399
sg70
g1384
sg63
(lp1400
g56
(g57
g58
NtRp1401
(dp1402
g61
(dp1403
g69
I4
ssg70
g1397
sg63
(lp1404
g1145
asbasbasbag56
(g72
g58
NtRp1405
(dp1406
g61
(dp1407
sg70
g636
sg63
(lp1408
g56
(g77
g58
NtRp1409
(dp1410
g61
(dp1411
g81
g82
ssg70
g1405
sg63
(lp1412
S'web2py_path'
p1413
asbag56
(g77
g58
NtRp1414
(dp1415
g61
(dp1416
g88
g89
ssg70
g1405
sg63
(lp1417
S':'
asbag56
(g77
g58
NtRp1418
(dp1419
g61
(dp1420
sg70
g1405
sg63
(lp1421
g56
(g57
g58
NtRp1422
(dp1423
g61
(dp1424
g69
I4
ssg70
g1418
sg63
(lp1425
g683
asbasbasbag56
(g72
g58
NtRp1426
(dp1427
g61
(dp1428
sg70
g636
sg63
(lp1429
g56
(g77
g58
NtRp1430
(dp1431
g61
(dp1432
g81
g82
ssg70
g1426
sg63
(lp1433
S'web2py_version'
p1434
asbag56
(g77
g58
NtRp1435
(dp1436
g61
(dp1437
g88
g89
ssg70
g1426
sg63
(lp1438
S':'
asbag56
(g77
g58
NtRp1439
(dp1440
g61
(dp1441
sg70
g1426
sg63
(lp1442
g56
(g57
g58
NtRp1443
(dp1444
g61
(dp1445
g69
I4
ssg70
g1439
sg63
(lp1446
g56
(g65
g58
NtRp1447
(dp1448
g61
(dp1449
g69
I3
ssg70
Nsg63
(lp1450
g56
(g72
g58
NtRp1451
(dp1452
g61
(dp1453
sg70
g1447
sg63
(lp1454
g56
(g77
g58
NtRp1455
(dp1456
g61
(dp1457
sg70
g1451
sg63
(lp1458
g56
(g57
g58
NtRp1459
(dp1460
g61
(dp1461
g69
I3
ssg70
g1455
sg63
(lp1462
S'1'
asbasbasbag56
(g72
g58
NtRp1463
(dp1464
g61
(dp1465
sg70
g1447
sg63
(lp1466
g56
(g77
g58
NtRp1467
(dp1468
g61
(dp1469
sg70
g1463
sg63
(lp1470
g56
(g57
g58
NtRp1471
(dp1472
g61
(dp1473
g69
I3
ssg70
g1467
sg63
(lp1474
S'99'
p1475
asbasbasbag56
(g72
g58
NtRp1476
(dp1477
g61
(dp1478
sg70
g1447
sg63
(lp1479
g56
(g77
g58
NtRp1480
(dp1481
g61
(dp1482
sg70
g1476
sg63
(lp1483
g56
(g57
g58
NtRp1484
(dp1485
g61
(dp1486
g69
I3
ssg70
g1480
sg63
(lp1487
S'2'
asbasbasbag56
(g72
g58
NtRp1488
(dp1489
g61
(dp1490
sg70
g1447
sg63
(lp1491
g56
(g77
g58
NtRp1492
(dp1493
g61
(dp1494
sg70
g1488
sg63
(lp1495
g56
(g57
g58
NtRp1496
(dp1497
g61
(dp1498
g69
I3
ssg70
g1492
sg63
(lp1499
S'datetime.datetime(2011, 9, 26, 6, 55, 33)'
p1500
asbasbasbag56
(g72
g58
NtRp1501
(dp1502
g61
(dp1503
sg70
g1447
sg63
(lp1504
g56
(g77
g58
NtRp1505
(dp1506
g61
(dp1507
sg70
g1501
sg63
(lp1508
g56
(g57
g58
NtRp1509
(dp1510
g61
(dp1511
g69
I3
ssg70
g1505
sg63
(lp1512
S'stable'
p1513
asbasbasbasbasbasbasbag56
(g72
g58
NtRp1514
(dp1515
g61
(dp1516
sg70
g636
sg63
(lp1517
g56
(g77
g58
NtRp1518
(dp1519
g61
(dp1520
g81
g82
ssg70
g1514
sg63
(lp1521
S'wsgi_errors'
p1522
asbag56
(g77
g58
NtRp1523
(dp1524
g61
(dp1525
g88
g89
ssg70
g1514
sg63
(lp1526
S':'
asbag56
(g77
g58
NtRp1527
(dp1528
g61
(dp1529
sg70
g1514
sg63
(lp1530
g56
(g57
g58
NtRp1531
(dp1532
g61
(dp1533
g69
I4
ssg70
g1527
sg63
(lp1534
S"<open file '<stderr>', mode 'w' at 0x7f2526b29270>"
p1535
asbasbasbag56
(g72
g58
NtRp1536
(dp1537
g61
(dp1538
sg70
g636
sg63
(lp1539
g56
(g77
g58
NtRp1540
(dp1541
g61
(dp1542
g81
g82
ssg70
g1536
sg63
(lp1543
S'wsgi_file_wrapper'
p1544
asbag56
(g77
g58
NtRp1545
(dp1546
g61
(dp1547
g88
g89
ssg70
g1536
sg63
(lp1548
S':'
asbag56
(g77
g58
NtRp1549
(dp1550
g61
(dp1551
sg70
g1536
sg63
(lp1552
g56
(g57
g58
NtRp1553
(dp1554
g61
(dp1555
g69
I4
ssg70
g1549
sg63
(lp1556
S'<class wsgiref.util.FileWrapper at 0x1b75d50>'
p1557
asbasbasbag56
(g72
g58
NtRp1558
(dp1559
g61
(dp1560
sg70
g636
sg63
(lp1561
g56
(g77
g58
NtRp1562
(dp1563
g61
(dp1564
g81
g82
ssg70
g1558
sg63
(lp1565
S'wsgi_input'
p1566
asbag56
(g77
g58
NtRp1567
(dp1568
g61
(dp1569
g88
g89
ssg70
g1558
sg63
(lp1570
S':'
asbag56
(g77
g58
NtRp1571
(dp1572
g61
(dp1573
sg70
g1558
sg63
(lp1574
g56
(g57
g58
NtRp1575
(dp1576
g61
(dp1577
g69
I4
ssg70
g1571
sg63
(lp1578
S'<socket._fileobject object at 0x3073bd0>'
p1579
asbasbasbag56
(g72
g58
NtRp1580
(dp1581
g61
(dp1582
sg70
g636
sg63
(lp1583
g56
(g77
g58
NtRp1584
(dp1585
g61
(dp1586
g81
g82
ssg70
g1580
sg63
(lp1587
S'wsgi_multiprocess'
p1588
asbag56
(g77
g58
NtRp1589
(dp1590
g61
(dp1591
g88
g89
ssg70
g1580
sg63
(lp1592
S':'
asbag56
(g77
g58
NtRp1593
(dp1594
g61
(dp1595
sg70
g1580
sg63
(lp1596
g56
(g57
g58
NtRp1597
(dp1598
g61
(dp1599
g69
I4
ssg70
g1593
sg63
(lp1600
g795
asbasbasbag56
(g72
g58
NtRp1601
(dp1602
g61
(dp1603
sg70
g636
sg63
(lp1604
g56
(g77
g58
NtRp1605
(dp1606
g61
(dp1607
g81
g82
ssg70
g1601
sg63
(lp1608
S'wsgi_multithread'
p1609
asbag56
(g77
g58
NtRp1610
(dp1611
g61
(dp1612
g88
g89
ssg70
g1601
sg63
(lp1613
S':'
asbag56
(g77
g58
NtRp1614
(dp1615
g61
(dp1616
sg70
g1601
sg63
(lp1617
g56
(g57
g58
NtRp1618
(dp1619
g61
(dp1620
g69
I4
ssg70
g1614
sg63
(lp1621
g99
asbasbasbag56
(g72
g58
NtRp1622
(dp1623
g61
(dp1624
sg70
g636
sg63
(lp1625
g56
(g77
g58
NtRp1626
(dp1627
g61
(dp1628
g81
g82
ssg70
g1622
sg63
(lp1629
S'wsgi_run_once'
p1630
asbag56
(g77
g58
NtRp1631
(dp1632
g61
(dp1633
g88
g89
ssg70
g1622
sg63
(lp1634
S':'
asbag56
(g77
g58
NtRp1635
(dp1636
g61
(dp1637
sg70
g1622
sg63
(lp1638
g56
(g57
g58
NtRp1639
(dp1640
g61
(dp1641
g69
I4
ssg70
g1635
sg63
(lp1642
g795
asbasbasbag56
(g72
g58
NtRp1643
(dp1644
g61
(dp1645
sg70
g636
sg63
(lp1646
g56
(g77
g58
NtRp1647
(dp1648
g61
(dp1649
g81
g82
ssg70
g1643
sg63
(lp1650
S'wsgi_url_scheme'
p1651
asbag56
(g77
g58
NtRp1652
(dp1653
g61
(dp1654
g88
g89
ssg70
g1643
sg63
(lp1655
S':'
asbag56
(g77
g58
NtRp1656
(dp1657
g61
(dp1658
sg70
g1643
sg63
(lp1659
g56
(g57
g58
NtRp1660
(dp1661
g61
(dp1662
g69
I4
ssg70
g1656
sg63
(lp1663
S'http'
p1664
asbasbasbag56
(g72
g58
NtRp1665
(dp1666
g61
(dp1667
sg70
g636
sg63
(lp1668
g56
(g77
g58
NtRp1669
(dp1670
g61
(dp1671
g81
g82
ssg70
g1665
sg63
(lp1672
S'wsgi_version'
p1673
asbag56
(g77
g58
NtRp1674
(dp1675
g61
(dp1676
g88
g89
ssg70
g1665
sg63
(lp1677
S':'
asbag56
(g77
g58
NtRp1678
(dp1679
g61
(dp1680
sg70
g1665
sg63
(lp1681
g56
(g57
g58
NtRp1682
(dp1683
g61
(dp1684
g69
I4
ssg70
g1678
sg63
(lp1685
g56
(g65
g58
NtRp1686
(dp1687
g61
(dp1688
g69
I3
ssg70
Nsg63
(lp1689
g56
(g72
g58
NtRp1690
(dp1691
g61
(dp1692
sg70
g1686
sg63
(lp1693
g56
(g77
g58
NtRp1694
(dp1695
g61
(dp1696
sg70
g1690
sg63
(lp1697
g56
(g57
g58
NtRp1698
(dp1699
g61
(dp1700
g69
I3
ssg70
g1694
sg63
(lp1701
S'1'
asbasbasbag56
(g72
g58
NtRp1702
(dp1703
g61
(dp1704
sg70
g1686
sg63
(lp1705
g56
(g77
g58
NtRp1706
(dp1707
g61
(dp1708
sg70
g1702
sg63
(lp1709
g56
(g57
g58
NtRp1710
(dp1711
g61
(dp1712
g69
I3
ssg70
g1706
sg63
(lp1713
S'0'
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp1714
(dp1715
g61
(dp1716
sg70
g66
sg63
(lp1717
g56
(g77
g58
NtRp1718
(dp1719
g61
(dp1720
g81
g82
ssg70
g1714
sg63
(lp1721
S'extension'
p1722
asbag56
(g77
g58
NtRp1723
(dp1724
g61
(dp1725
g88
g89
ssg70
g1714
sg63
(lp1726
S':'
asbag56
(g77
g58
NtRp1727
(dp1728
g61
(dp1729
sg70
g1714
sg63
(lp1730
g56
(g57
g58
NtRp1731
(dp1732
g61
(dp1733
g69
I5
ssg70
g1727
sg63
(lp1734
S'html'
p1735
asbasbasbag56
(g72
g58
NtRp1736
(dp1737
g61
(dp1738
sg70
g66
sg63
(lp1739
g56
(g77
g58
NtRp1740
(dp1741
g61
(dp1742
g81
g82
ssg70
g1736
sg63
(lp1743
S'folder'
p1744
asbag56
(g77
g58
NtRp1745
(dp1746
g61
(dp1747
g88
g89
ssg70
g1736
sg63
(lp1748
S':'
asbag56
(g77
g58
NtRp1749
(dp1750
g61
(dp1751
sg70
g1736
sg63
(lp1752
g56
(g57
g58
NtRp1753
(dp1754
g61
(dp1755
g69
I5
ssg70
g1749
sg63
(lp1756
S'/media/misperoles/git/pyj3nnn1/web2py/applications/admin/'
p1757
asbasbasbag56
(g72
g58
NtRp1758
(dp1759
g61
(dp1760
sg70
g66
sg63
(lp1761
g56
(g77
g58
NtRp1762
(dp1763
g61
(dp1764
g81
g82
ssg70
g1758
sg63
(lp1765
S'function'
p1766
asbag56
(g77
g58
NtRp1767
(dp1768
g61
(dp1769
g88
g89
ssg70
g1758
sg63
(lp1770
S':'
asbag56
(g77
g58
NtRp1771
(dp1772
g61
(dp1773
sg70
g1758
sg63
(lp1774
g56
(g57
g58
NtRp1775
(dp1776
g61
(dp1777
g69
I5
ssg70
g1771
sg63
(lp1778
S'check_version'
p1779
asbasbasbag56
(g72
g58
NtRp1780
(dp1781
g61
(dp1782
sg70
g66
sg63
(lp1783
g56
(g77
g58
NtRp1784
(dp1785
g61
(dp1786
g81
g82
ssg70
g1780
sg63
(lp1787
S'get_vars'
p1788
asbag56
(g77
g58
NtRp1789
(dp1790
g61
(dp1791
g88
g89
ssg70
g1780
sg63
(lp1792
S':'
asbag56
(g77
g58
NtRp1793
(dp1794
g61
(dp1795
sg70
g1780
sg63
(lp1796
g56
(g57
g58
NtRp1797
(dp1798
g61
(dp1799
g69
I5
ssg70
g1793
sg63
(lp1800
g56
(g65
g58
NtRp1801
(dp1802
g61
(dp1803
g69
I4
ssg70
Nsg63
(lp1804
sbasbasbasbag56
(g72
g58
NtRp1805
(dp1806
g61
(dp1807
sg70
g66
sg63
(lp1808
g56
(g77
g58
NtRp1809
(dp1810
g61
(dp1811
g81
g82
ssg70
g1805
sg63
(lp1812
S'global_settings'
p1813
asbag56
(g77
g58
NtRp1814
(dp1815
g61
(dp1816
g88
g89
ssg70
g1805
sg63
(lp1817
S':'
asbag56
(g77
g58
NtRp1818
(dp1819
g61
(dp1820
sg70
g1805
sg63
(lp1821
g56
(g57
g58
NtRp1822
(dp1823
g61
(dp1824
g69
I5
ssg70
g1818
sg63
(lp1825
g56
(g65
g58
NtRp1826
(dp1827
g61
(dp1828
g69
I4
ssg70
Nsg63
(lp1829
g56
(g72
g58
NtRp1830
(dp1831
g61
(dp1832
sg70
g1826
sg63
(lp1833
g56
(g77
g58
NtRp1834
(dp1835
g61
(dp1836
g81
g82
ssg70
g1830
sg63
(lp1837
g648
asbag56
(g77
g58
NtRp1838
(dp1839
g61
(dp1840
g88
g89
ssg70
g1830
sg63
(lp1841
S':'
asbag56
(g77
g58
NtRp1842
(dp1843
g61
(dp1844
sg70
g1830
sg63
(lp1845
g56
(g57
g58
NtRp1846
(dp1847
g61
(dp1848
g69
I4
ssg70
g1842
sg63
(lp1849
S"set(['/media/misperoles/git/pyj3nnn1/web2py/applications/admin/', '/media/misperoles/git/pyj3nnn1/web2py/applications/blog/'])"
p1850
asbasbasbag56
(g72
g58
NtRp1851
(dp1852
g61
(dp1853
sg70
g1826
sg63
(lp1854
g56
(g77
g58
NtRp1855
(dp1856
g61
(dp1857
g81
g82
ssg70
g1851
sg63
(lp1858
g670
asbag56
(g77
g58
NtRp1859
(dp1860
g61
(dp1861
g88
g89
ssg70
g1851
sg63
(lp1862
S':'
asbag56
(g77
g58
NtRp1863
(dp1864
g61
(dp1865
sg70
g1851
sg63
(lp1866
g56
(g57
g58
NtRp1867
(dp1868
g61
(dp1869
g69
I4
ssg70
g1863
sg63
(lp1870
g683
asbasbasbag56
(g72
g58
NtRp1871
(dp1872
g61
(dp1873
sg70
g1826
sg63
(lp1874
g56
(g77
g58
NtRp1875
(dp1876
g61
(dp1877
g81
g82
ssg70
g1871
sg63
(lp1878
g692
asbag56
(g77
g58
NtRp1879
(dp1880
g61
(dp1881
g88
g89
ssg70
g1871
sg63
(lp1882
S':'
asbag56
(g77
g58
NtRp1883
(dp1884
g61
(dp1885
sg70
g1871
sg63
(lp1886
g56
(g57
g58
NtRp1887
(dp1888
g61
(dp1889
g69
I4
ssg70
g1883
sg63
(lp1890
g56
(g65
g58
NtRp1891
(dp1892
g61
(dp1893
g69
I3
ssg70
Nsg63
(lp1894
sbasbasbasbag56
(g72
g58
NtRp1895
(dp1896
g61
(dp1897
sg70
g1826
sg63
(lp1898
g56
(g77
g58
NtRp1899
(dp1900
g61
(dp1901
g81
g82
ssg70
g1895
sg63
(lp1902
g717
asbag56
(g77
g58
NtRp1903
(dp1904
g61
(dp1905
g88
g89
ssg70
g1895
sg63
(lp1906
S':'
asbag56
(g77
g58
NtRp1907
(dp1908
g61
(dp1909
sg70
g1895
sg63
(lp1910
g56
(g57
g58
NtRp1911
(dp1912
g61
(dp1913
g69
I4
ssg70
g1907
sg63
(lp1914
S"<Values at 0x1add170: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'Diotima', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/media/misperoles/git/pyj3nnn1/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'plain': False, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'numthreads': None, 'nobanner': False}>"
p1915
asbasbasbag56
(g72
g58
NtRp1916
(dp1917
g61
(dp1918
sg70
g1826
sg63
(lp1919
g56
(g77
g58
NtRp1920
(dp1921
g61
(dp1922
g81
g82
ssg70
g1916
sg63
(lp1923
g760
asbag56
(g77
g58
NtRp1924
(dp1925
g61
(dp1926
g88
g89
ssg70
g1916
sg63
(lp1927
S':'
asbag56
(g77
g58
NtRp1928
(dp1929
g61
(dp1930
sg70
g1916
sg63
(lp1931
g56
(g57
g58
NtRp1932
(dp1933
g61
(dp1934
g69
I4
ssg70
g1928
sg63
(lp1935
S'set([])'
p1936
asbasbasbag56
(g72
g58
NtRp1937
(dp1938
g61
(dp1939
sg70
g1826
sg63
(lp1940
g56
(g77
g58
NtRp1941
(dp1942
g61
(dp1943
g81
g82
ssg70
g1937
sg63
(lp1944
g782
asbag56
(g77
g58
NtRp1945
(dp1946
g61
(dp1947
g88
g89
ssg70
g1937
sg63
(lp1948
S':'
asbag56
(g77
g58
NtRp1949
(dp1950
g61
(dp1951
sg70
g1937
sg63
(lp1952
g56
(g57
g58
NtRp1953
(dp1954
g61
(dp1955
g69
I4
ssg70
g1949
sg63
(lp1956
g795
asbasbasbag56
(g72
g58
NtRp1957
(dp1958
g61
(dp1959
sg70
g1826
sg63
(lp1960
g56
(g77
g58
NtRp1961
(dp1962
g61
(dp1963
g81
g82
ssg70
g1957
sg63
(lp1964
g804
asbag56
(g77
g58
NtRp1965
(dp1966
g61
(dp1967
g88
g89
ssg70
g1957
sg63
(lp1968
S':'
asbag56
(g77
g58
NtRp1969
(dp1970
g61
(dp1971
sg70
g1957
sg63
(lp1972
g56
(g57
g58
NtRp1973
(dp1974
g61
(dp1975
g69
I4
ssg70
g1969
sg63
(lp1976
g817
asbasbasbag56
(g72
g58
NtRp1977
(dp1978
g61
(dp1979
sg70
g1826
sg63
(lp1980
g56
(g77
g58
NtRp1981
(dp1982
g61
(dp1983
g81
g82
ssg70
g1977
sg63
(lp1984
g1111
asbag56
(g77
g58
NtRp1985
(dp1986
g61
(dp1987
g88
g89
ssg70
g1977
sg63
(lp1988
S':'
asbag56
(g77
g58
NtRp1989
(dp1990
g61
(dp1991
sg70
g1977
sg63
(lp1992
g56
(g57
g58
NtRp1993
(dp1994
g61
(dp1995
g69
I4
ssg70
g1989
sg63
(lp1996
g795
asbasbasbag56
(g72
g58
NtRp1997
(dp1998
g61
(dp1999
sg70
g1826
sg63
(lp2000
g56
(g77
g58
NtRp2001
(dp2002
g61
(dp2003
g81
g82
ssg70
g1997
sg63
(lp2004
g1370
asbag56
(g77
g58
NtRp2005
(dp2006
g61
(dp2007
g88
g89
ssg70
g1997
sg63
(lp2008
S':'
asbag56
(g77
g58
NtRp2009
(dp2010
g61
(dp2011
sg70
g1997
sg63
(lp2012
g56
(g57
g58
NtRp2013
(dp2014
g61
(dp2015
g69
I4
ssg70
g2009
sg63
(lp2016
g1383
asbasbasbag56
(g72
g58
NtRp2017
(dp2018
g61
(dp2019
sg70
g1826
sg63
(lp2020
g56
(g77
g58
NtRp2021
(dp2022
g61
(dp2023
g81
g82
ssg70
g2017
sg63
(lp2024
g1434
asbag56
(g77
g58
NtRp2025
(dp2026
g61
(dp2027
g88
g89
ssg70
g2017
sg63
(lp2028
S':'
asbag56
(g77
g58
NtRp2029
(dp2030
g61
(dp2031
sg70
g2017
sg63
(lp2032
g56
(g57
g58
NtRp2033
(dp2034
g61
(dp2035
g69
I4
ssg70
g2029
sg63
(lp2036
g56
(g65
g58
NtRp2037
(dp2038
g61
(dp2039
g69
I3
ssg70
Nsg63
(lp2040
g56
(g72
g58
NtRp2041
(dp2042
g61
(dp2043
sg70
g2037
sg63
(lp2044
g56
(g77
g58
NtRp2045
(dp2046
g61
(dp2047
sg70
g2041
sg63
(lp2048
g56
(g57
g58
NtRp2049
(dp2050
g61
(dp2051
g69
I3
ssg70
g2045
sg63
(lp2052
S'1'
asbasbasbag56
(g72
g58
NtRp2053
(dp2054
g61
(dp2055
sg70
g2037
sg63
(lp2056
g56
(g77
g58
NtRp2057
(dp2058
g61
(dp2059
sg70
g2053
sg63
(lp2060
g56
(g57
g58
NtRp2061
(dp2062
g61
(dp2063
g69
I3
ssg70
g2057
sg63
(lp2064
S'99'
p2065
asbasbasbag56
(g72
g58
NtRp2066
(dp2067
g61
(dp2068
sg70
g2037
sg63
(lp2069
g56
(g77
g58
NtRp2070
(dp2071
g61
(dp2072
sg70
g2066
sg63
(lp2073
g56
(g57
g58
NtRp2074
(dp2075
g61
(dp2076
g69
I3
ssg70
g2070
sg63
(lp2077
S'2'
asbasbasbag56
(g72
g58
NtRp2078
(dp2079
g61
(dp2080
sg70
g2037
sg63
(lp2081
g56
(g77
g58
NtRp2082
(dp2083
g61
(dp2084
sg70
g2078
sg63
(lp2085
g56
(g57
g58
NtRp2086
(dp2087
g61
(dp2088
g69
I3
ssg70
g2082
sg63
(lp2089
S'datetime.datetime(2011, 9, 26, 6, 55, 33)'
p2090
asbasbasbag56
(g72
g58
NtRp2091
(dp2092
g61
(dp2093
sg70
g2037
sg63
(lp2094
g56
(g77
g58
NtRp2095
(dp2096
g61
(dp2097
sg70
g2091
sg63
(lp2098
g56
(g57
g58
NtRp2099
(dp2100
g61
(dp2101
g69
I3
ssg70
g2095
sg63
(lp2102
g1513
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp2103
(dp2104
g61
(dp2105
sg70
g66
sg63
(lp2106
g56
(g77
g58
NtRp2107
(dp2108
g61
(dp2109
g81
g82
ssg70
g2103
sg63
(lp2110
S'is_https'
p2111
asbag56
(g77
g58
NtRp2112
(dp2113
g61
(dp2114
g88
g89
ssg70
g2103
sg63
(lp2115
S':'
asbag56
(g77
g58
NtRp2116
(dp2117
g61
(dp2118
sg70
g2103
sg63
(lp2119
g56
(g57
g58
NtRp2120
(dp2121
g61
(dp2122
g69
I5
ssg70
g2116
sg63
(lp2123
g795
asbasbasbag56
(g72
g58
NtRp2124
(dp2125
g61
(dp2126
sg70
g66
sg63
(lp2127
g56
(g77
g58
NtRp2128
(dp2129
g61
(dp2130
g81
g82
ssg70
g2124
sg63
(lp2131
S'is_local'
p2132
asbag56
(g77
g58
NtRp2133
(dp2134
g61
(dp2135
g88
g89
ssg70
g2124
sg63
(lp2136
S':'
asbag56
(g77
g58
NtRp2137
(dp2138
g61
(dp2139
sg70
g2124
sg63
(lp2140
g56
(g57
g58
NtRp2141
(dp2142
g61
(dp2143
g69
I5
ssg70
g2137
sg63
(lp2144
g99
asbasbasbag56
(g72
g58
NtRp2145
(dp2146
g61
(dp2147
sg70
g66
sg63
(lp2148
g56
(g77
g58
NtRp2149
(dp2150
g61
(dp2151
g81
g82
ssg70
g2145
sg63
(lp2152
S'is_restful'
p2153
asbag56
(g77
g58
NtRp2154
(dp2155
g61
(dp2156
g88
g89
ssg70
g2145
sg63
(lp2157
S':'
asbag56
(g77
g58
NtRp2158
(dp2159
g61
(dp2160
sg70
g2145
sg63
(lp2161
g56
(g57
g58
NtRp2162
(dp2163
g61
(dp2164
g69
I5
ssg70
g2158
sg63
(lp2165
g795
asbasbasbag56
(g72
g58
NtRp2166
(dp2167
g61
(dp2168
sg70
g66
sg63
(lp2169
g56
(g77
g58
NtRp2170
(dp2171
g61
(dp2172
g81
g82
ssg70
g2166
sg63
(lp2173
S'now'
p2174
asbag56
(g77
g58
NtRp2175
(dp2176
g61
(dp2177
g88
g89
ssg70
g2166
sg63
(lp2178
S':'
asbag56
(g77
g58
NtRp2179
(dp2180
g61
(dp2181
sg70
g2166
sg63
(lp2182
g56
(g57
g58
NtRp2183
(dp2184
g61
(dp2185
g69
I5
ssg70
g2179
sg63
(lp2186
S'datetime.datetime(2011, 12, 22, 1, 34, 53, 824874)'
p2187
asbasbasbag56
(g72
g58
NtRp2188
(dp2189
g61
(dp2190
sg70
g66
sg63
(lp2191
g56
(g77
g58
NtRp2192
(dp2193
g61
(dp2194
g81
g82
ssg70
g2188
sg63
(lp2195
S'post_vars'
p2196
asbag56
(g77
g58
NtRp2197
(dp2198
g61
(dp2199
g88
g89
ssg70
g2188
sg63
(lp2200
S':'
asbag56
(g77
g58
NtRp2201
(dp2202
g61
(dp2203
sg70
g2188
sg63
(lp2204
g56
(g57
g58
NtRp2205
(dp2206
g61
(dp2207
g69
I5
ssg70
g2201
sg63
(lp2208
g56
(g65
g58
NtRp2209
(dp2210
g61
(dp2211
g69
I4
ssg70
Nsg63
(lp2212
sbasbasbasbag56
(g72
g58
NtRp2213
(dp2214
g61
(dp2215
sg70
g66
sg63
(lp2216
g56
(g77
g58
NtRp2217
(dp2218
g61
(dp2219
g81
g82
ssg70
g2213
sg63
(lp2220
S'url'
p2221
asbag56
(g77
g58
NtRp2222
(dp2223
g61
(dp2224
g88
g89
ssg70
g2213
sg63
(lp2225
S':'
asbag56
(g77
g58
NtRp2226
(dp2227
g61
(dp2228
sg70
g2213
sg63
(lp2229
g56
(g57
g58
NtRp2230
(dp2231
g61
(dp2232
g69
I5
ssg70
g2226
sg63
(lp2233
S'/admin/default/check_version'
p2234
asbasbasbag56
(g72
g58
NtRp2235
(dp2236
g61
(dp2237
sg70
g66
sg63
(lp2238
g56
(g77
g58
NtRp2239
(dp2240
g61
(dp2241
g81
g82
ssg70
g2235
sg63
(lp2242
S'utcnow'
p2243
asbag56
(g77
g58
NtRp2244
(dp2245
g61
(dp2246
g88
g89
ssg70
g2235
sg63
(lp2247
S':'
asbag56
(g77
g58
NtRp2248
(dp2249
g61
(dp2250
sg70
g2235
sg63
(lp2251
g56
(g57
g58
NtRp2252
(dp2253
g61
(dp2254
g69
I5
ssg70
g2248
sg63
(lp2255
S'datetime.datetime(2011, 12, 22, 6, 4, 53, 824924)'
p2256
asbasbasbag56
(g72
g58
NtRp2257
(dp2258
g61
(dp2259
sg70
g66
sg63
(lp2260
g56
(g77
g58
NtRp2261
(dp2262
g61
(dp2263
g81
g82
ssg70
g2257
sg63
(lp2264
S'uuid'
p2265
asbag56
(g77
g58
NtRp2266
(dp2267
g61
(dp2268
g88
g89
ssg70
g2257
sg63
(lp2269
S':'
asbag56
(g77
g58
NtRp2270
(dp2271
g61
(dp2272
sg70
g2257
sg63
(lp2273
g56
(g57
g58
NtRp2274
(dp2275
g61
(dp2276
g69
I5
ssg70
g2270
sg63
(lp2277
S'admin/127.0.0.1.2011-12-22.01-34-53.082685e1-39e5-4caf-8afa-3f4518bc3737'
p2278
asbasbasbag56
(g72
g58
NtRp2279
(dp2280
g61
(dp2281
sg70
g66
sg63
(lp2282
g56
(g77
g58
NtRp2283
(dp2284
g61
(dp2285
g81
g82
ssg70
g2279
sg63
(lp2286
S'vars'
p2287
asbag56
(g77
g58
NtRp2288
(dp2289
g61
(dp2290
g88
g89
ssg70
g2279
sg63
(lp2291
S':'
asbag56
(g77
g58
NtRp2292
(dp2293
g61
(dp2294
sg70
g2279
sg63
(lp2295
g56
(g57
g58
NtRp2296
(dp2297
g61
(dp2298
g69
I5
ssg70
g2292
sg63
(lp2299
g56
(g65
g58
NtRp2300
(dp2301
g61
(dp2302
g69
I4
ssg70
Nsg63
(lp2303
sbasbasbasbag56
(g72
g58
NtRp2304
(dp2305
g61
(dp2306
sg70
g66
sg63
(lp2307
g56
(g77
g58
NtRp2308
(dp2309
g61
(dp2310
g81
g82
ssg70
g2304
sg63
(lp2311
S'wsgi'
p2312
asbag56
(g77
g58
NtRp2313
(dp2314
g61
(dp2315
g88
g89
ssg70
g2304
sg63
(lp2316
S':'
asbag56
(g77
g58
NtRp2317
(dp2318
g61
(dp2319
sg70
g2304
sg63
(lp2320
g56
(g57
g58
NtRp2321
(dp2322
g61
(dp2323
g69
I5
ssg70
g2317
sg63
(lp2324
g56
(g65
g58
NtRp2325
(dp2326
g61
(dp2327
g69
I4
ssg70
Nsg63
(lp2328
g56
(g72
g58
NtRp2329
(dp2330
g61
(dp2331
sg70
g2325
sg63
(lp2332
g56
(g77
g58
NtRp2333
(dp2334
g61
(dp2335
g81
g82
ssg70
g2329
sg63
(lp2336
S'environ'
p2337
asbag56
(g77
g58
NtRp2338
(dp2339
g61
(dp2340
g88
g89
ssg70
g2329
sg63
(lp2341
S':'
asbag56
(g77
g58
NtRp2342
(dp2343
g61
(dp2344
sg70
g2329
sg63
(lp2345
g56
(g57
g58
NtRp2346
(dp2347
g61
(dp2348
g69
I4
ssg70
g2342
sg63
(lp2349
g56
(g65
g58
NtRp2350
(dp2351
g61
(dp2352
g69
I3
ssg70
Nsg63
(lp2353
g56
(g72
g58
NtRp2354
(dp2355
g61
(dp2356
sg70
g2350
sg63
(lp2357
g56
(g77
g58
NtRp2358
(dp2359
g61
(dp2360
g81
g82
ssg70
g2354
sg63
(lp2361
S'CONTENT_LENGTH'
p2362
asbag56
(g77
g58
NtRp2363
(dp2364
g61
(dp2365
g88
g89
ssg70
g2354
sg63
(lp2366
S':'
asbag56
(g77
g58
NtRp2367
(dp2368
g61
(dp2369
sg70
g2354
sg63
(lp2370
g56
(g57
g58
NtRp2371
(dp2372
g61
(dp2373
g69
I3
ssg70
g2367
sg63
(lp2374
S'0'
asbasbasbag56
(g72
g58
NtRp2375
(dp2376
g61
(dp2377
sg70
g2350
sg63
(lp2378
g56
(g77
g58
NtRp2379
(dp2380
g61
(dp2381
g81
g82
ssg70
g2375
sg63
(lp2382
S'HTTP_ACCEPT'
p2383
asbag56
(g77
g58
NtRp2384
(dp2385
g61
(dp2386
g88
g89
ssg70
g2375
sg63
(lp2387
S':'
asbag56
(g77
g58
NtRp2388
(dp2389
g61
(dp2390
sg70
g2375
sg63
(lp2391
g56
(g57
g58
NtRp2392
(dp2393
g61
(dp2394
g69
I3
ssg70
g2388
sg63
(lp2395
g839
asbasbasbag56
(g72
g58
NtRp2396
(dp2397
g61
(dp2398
sg70
g2350
sg63
(lp2399
g56
(g77
g58
NtRp2400
(dp2401
g61
(dp2402
g81
g82
ssg70
g2396
sg63
(lp2403
S'HTTP_ACCEPT_CHARSET'
p2404
asbag56
(g77
g58
NtRp2405
(dp2406
g61
(dp2407
g88
g89
ssg70
g2396
sg63
(lp2408
S':'
asbag56
(g77
g58
NtRp2409
(dp2410
g61
(dp2411
sg70
g2396
sg63
(lp2412
g56
(g57
g58
NtRp2413
(dp2414
g61
(dp2415
g69
I3
ssg70
g2409
sg63
(lp2416
g861
asbasbasbag56
(g72
g58
NtRp2417
(dp2418
g61
(dp2419
sg70
g2350
sg63
(lp2420
g56
(g77
g58
NtRp2421
(dp2422
g61
(dp2423
g81
g82
ssg70
g2417
sg63
(lp2424
S'HTTP_ACCEPT_ENCODING'
p2425
asbag56
(g77
g58
NtRp2426
(dp2427
g61
(dp2428
g88
g89
ssg70
g2417
sg63
(lp2429
S':'
asbag56
(g77
g58
NtRp2430
(dp2431
g61
(dp2432
sg70
g2417
sg63
(lp2433
g56
(g57
g58
NtRp2434
(dp2435
g61
(dp2436
g69
I3
ssg70
g2430
sg63
(lp2437
g883
asbasbasbag56
(g72
g58
NtRp2438
(dp2439
g61
(dp2440
sg70
g2350
sg63
(lp2441
g56
(g77
g58
NtRp2442
(dp2443
g61
(dp2444
g81
g82
ssg70
g2438
sg63
(lp2445
S'HTTP_ACCEPT_LANGUAGE'
p2446
asbag56
(g77
g58
NtRp2447
(dp2448
g61
(dp2449
g88
g89
ssg70
g2438
sg63
(lp2450
S':'
asbag56
(g77
g58
NtRp2451
(dp2452
g61
(dp2453
sg70
g2438
sg63
(lp2454
g56
(g57
g58
NtRp2455
(dp2456
g61
(dp2457
g69
I3
ssg70
g2451
sg63
(lp2458
g905
asbasbasbag56
(g72
g58
NtRp2459
(dp2460
g61
(dp2461
sg70
g2350
sg63
(lp2462
g56
(g77
g58
NtRp2463
(dp2464
g61
(dp2465
g81
g82
ssg70
g2459
sg63
(lp2466
S'HTTP_CACHE_CONTROL'
p2467
asbag56
(g77
g58
NtRp2468
(dp2469
g61
(dp2470
g88
g89
ssg70
g2459
sg63
(lp2471
S':'
asbag56
(g77
g58
NtRp2472
(dp2473
g61
(dp2474
sg70
g2459
sg63
(lp2475
g56
(g57
g58
NtRp2476
(dp2477
g61
(dp2478
g69
I3
ssg70
g2472
sg63
(lp2479
g927
asbasbasbag56
(g72
g58
NtRp2480
(dp2481
g61
(dp2482
sg70
g2350
sg63
(lp2483
g56
(g77
g58
NtRp2484
(dp2485
g61
(dp2486
g81
g82
ssg70
g2480
sg63
(lp2487
S'HTTP_CONNECTION'
p2488
asbag56
(g77
g58
NtRp2489
(dp2490
g61
(dp2491
g88
g89
ssg70
g2480
sg63
(lp2492
S':'
asbag56
(g77
g58
NtRp2493
(dp2494
g61
(dp2495
sg70
g2480
sg63
(lp2496
g56
(g57
g58
NtRp2497
(dp2498
g61
(dp2499
g69
I3
ssg70
g2493
sg63
(lp2500
g949
asbasbasbag56
(g72
g58
NtRp2501
(dp2502
g61
(dp2503
sg70
g2350
sg63
(lp2504
g56
(g77
g58
NtRp2505
(dp2506
g61
(dp2507
g81
g82
ssg70
g2501
sg63
(lp2508
S'HTTP_CONTENT_LENGTH'
p2509
asbag56
(g77
g58
NtRp2510
(dp2511
g61
(dp2512
g88
g89
ssg70
g2501
sg63
(lp2513
S':'
asbag56
(g77
g58
NtRp2514
(dp2515
g61
(dp2516
sg70
g2501
sg63
(lp2517
g56
(g57
g58
NtRp2518
(dp2519
g61
(dp2520
g69
I3
ssg70
g2514
sg63
(lp2521
S'0'
asbasbasbag56
(g72
g58
NtRp2522
(dp2523
g61
(dp2524
sg70
g2350
sg63
(lp2525
g56
(g77
g58
NtRp2526
(dp2527
g61
(dp2528
g81
g82
ssg70
g2522
sg63
(lp2529
S'HTTP_COOKIE'
p2530
asbag56
(g77
g58
NtRp2531
(dp2532
g61
(dp2533
g88
g89
ssg70
g2522
sg63
(lp2534
S':'
asbag56
(g77
g58
NtRp2535
(dp2536
g61
(dp2537
sg70
g2522
sg63
(lp2538
g56
(g57
g58
NtRp2539
(dp2540
g61
(dp2541
g69
I3
ssg70
g2535
sg63
(lp2542
g992
asbasbasbag56
(g72
g58
NtRp2543
(dp2544
g61
(dp2545
sg70
g2350
sg63
(lp2546
g56
(g77
g58
NtRp2547
(dp2548
g61
(dp2549
g81
g82
ssg70
g2543
sg63
(lp2550
S'HTTP_HOST'
p2551
asbag56
(g77
g58
NtRp2552
(dp2553
g61
(dp2554
g88
g89
ssg70
g2543
sg63
(lp2555
S':'
asbag56
(g77
g58
NtRp2556
(dp2557
g61
(dp2558
sg70
g2543
sg63
(lp2559
g56
(g57
g58
NtRp2560
(dp2561
g61
(dp2562
g69
I3
ssg70
g2556
sg63
(lp2563
g1014
asbasbasbag56
(g72
g58
NtRp2564
(dp2565
g61
(dp2566
sg70
g2350
sg63
(lp2567
g56
(g77
g58
NtRp2568
(dp2569
g61
(dp2570
g81
g82
ssg70
g2564
sg63
(lp2571
S'HTTP_PRAGMA'
p2572
asbag56
(g77
g58
NtRp2573
(dp2574
g61
(dp2575
g88
g89
ssg70
g2564
sg63
(lp2576
S':'
asbag56
(g77
g58
NtRp2577
(dp2578
g61
(dp2579
sg70
g2564
sg63
(lp2580
g56
(g57
g58
NtRp2581
(dp2582
g61
(dp2583
g69
I3
ssg70
g2577
sg63
(lp2584
g1036
asbasbasbag56
(g72
g58
NtRp2585
(dp2586
g61
(dp2587
sg70
g2350
sg63
(lp2588
g56
(g77
g58
NtRp2589
(dp2590
g61
(dp2591
g81
g82
ssg70
g2585
sg63
(lp2592
S'HTTP_REFERER'
p2593
asbag56
(g77
g58
NtRp2594
(dp2595
g61
(dp2596
g88
g89
ssg70
g2585
sg63
(lp2597
S':'
asbag56
(g77
g58
NtRp2598
(dp2599
g61
(dp2600
sg70
g2585
sg63
(lp2601
g56
(g57
g58
NtRp2602
(dp2603
g61
(dp2604
g69
I3
ssg70
g2598
sg63
(lp2605
g1058
asbasbasbag56
(g72
g58
NtRp2606
(dp2607
g61
(dp2608
sg70
g2350
sg63
(lp2609
g56
(g77
g58
NtRp2610
(dp2611
g61
(dp2612
g81
g82
ssg70
g2606
sg63
(lp2613
S'HTTP_USER_AGENT'
p2614
asbag56
(g77
g58
NtRp2615
(dp2616
g61
(dp2617
g88
g89
ssg70
g2606
sg63
(lp2618
S':'
asbag56
(g77
g58
NtRp2619
(dp2620
g61
(dp2621
sg70
g2606
sg63
(lp2622
g56
(g57
g58
NtRp2623
(dp2624
g61
(dp2625
g69
I3
ssg70
g2619
sg63
(lp2626
g1080
asbasbasbag56
(g72
g58
NtRp2627
(dp2628
g61
(dp2629
sg70
g2350
sg63
(lp2630
g56
(g77
g58
NtRp2631
(dp2632
g61
(dp2633
g81
g82
ssg70
g2627
sg63
(lp2634
S'HTTP_X_REQUESTED_WITH'
p2635
asbag56
(g77
g58
NtRp2636
(dp2637
g61
(dp2638
g88
g89
ssg70
g2627
sg63
(lp2639
S':'
asbag56
(g77
g58
NtRp2640
(dp2641
g61
(dp2642
sg70
g2627
sg63
(lp2643
g56
(g57
g58
NtRp2644
(dp2645
g61
(dp2646
g69
I3
ssg70
g2640
sg63
(lp2647
g1102
asbasbasbag56
(g72
g58
NtRp2648
(dp2649
g61
(dp2650
sg70
g2350
sg63
(lp2651
g56
(g77
g58
NtRp2652
(dp2653
g61
(dp2654
g81
g82
ssg70
g2648
sg63
(lp2655
S'PATH_INFO'
p2656
asbag56
(g77
g58
NtRp2657
(dp2658
g61
(dp2659
g88
g89
ssg70
g2648
sg63
(lp2660
S':'
asbag56
(g77
g58
NtRp2661
(dp2662
g61
(dp2663
sg70
g2648
sg63
(lp2664
g56
(g57
g58
NtRp2665
(dp2666
g61
(dp2667
g69
I3
ssg70
g2661
sg63
(lp2668
g1145
asbasbasbag56
(g72
g58
NtRp2669
(dp2670
g61
(dp2671
sg70
g2350
sg63
(lp2672
g56
(g77
g58
NtRp2673
(dp2674
g61
(dp2675
g81
g82
ssg70
g2669
sg63
(lp2676
S'QUERY_STRING'
p2677
asbag56
(g77
g58
NtRp2678
(dp2679
g61
(dp2680
g88
g89
ssg70
g2669
sg63
(lp2681
S':'
asbag56
(g77
g58
NtRp2682
(dp2683
g61
(dp2684
sg70
g2669
sg63
(lp2685
g56
(g57
g58
NtRp2686
(dp2687
g61
(dp2688
g69
I3
ssg70
g2682
sg63
(lp2689
S''
asbasbasbag56
(g72
g58
NtRp2690
(dp2691
g61
(dp2692
sg70
g2350
sg63
(lp2693
g56
(g77
g58
NtRp2694
(dp2695
g61
(dp2696
g81
g82
ssg70
g2690
sg63
(lp2697
S'REMOTE_ADDR'
p2698
asbag56
(g77
g58
NtRp2699
(dp2700
g61
(dp2701
g88
g89
ssg70
g2690
sg63
(lp2702
S':'
asbag56
(g77
g58
NtRp2703
(dp2704
g61
(dp2705
sg70
g2690
sg63
(lp2706
g56
(g57
g58
NtRp2707
(dp2708
g61
(dp2709
g69
I3
ssg70
g2703
sg63
(lp2710
g189
asbasbasbag56
(g72
g58
NtRp2711
(dp2712
g61
(dp2713
sg70
g2350
sg63
(lp2714
g56
(g77
g58
NtRp2715
(dp2716
g61
(dp2717
g81
g82
ssg70
g2711
sg63
(lp2718
S'REMOTE_PORT'
p2719
asbag56
(g77
g58
NtRp2720
(dp2721
g61
(dp2722
g88
g89
ssg70
g2711
sg63
(lp2723
S':'
asbag56
(g77
g58
NtRp2724
(dp2725
g61
(dp2726
sg70
g2711
sg63
(lp2727
g56
(g57
g58
NtRp2728
(dp2729
g61
(dp2730
g69
I3
ssg70
g2724
sg63
(lp2731
g1209
asbasbasbag56
(g72
g58
NtRp2732
(dp2733
g61
(dp2734
sg70
g2350
sg63
(lp2735
g56
(g77
g58
NtRp2736
(dp2737
g61
(dp2738
g81
g82
ssg70
g2732
sg63
(lp2739
S'REQUEST_METHOD'
p2740
asbag56
(g77
g58
NtRp2741
(dp2742
g61
(dp2743
g88
g89
ssg70
g2732
sg63
(lp2744
S':'
asbag56
(g77
g58
NtRp2745
(dp2746
g61
(dp2747
sg70
g2732
sg63
(lp2748
g56
(g57
g58
NtRp2749
(dp2750
g61
(dp2751
g69
I3
ssg70
g2745
sg63
(lp2752
g1231
asbasbasbag56
(g72
g58
NtRp2753
(dp2754
g61
(dp2755
sg70
g2350
sg63
(lp2756
g56
(g77
g58
NtRp2757
(dp2758
g61
(dp2759
g81
g82
ssg70
g2753
sg63
(lp2760
S'REQUEST_URI'
p2761
asbag56
(g77
g58
NtRp2762
(dp2763
g61
(dp2764
g88
g89
ssg70
g2753
sg63
(lp2765
S':'
asbag56
(g77
g58
NtRp2766
(dp2767
g61
(dp2768
sg70
g2753
sg63
(lp2769
g56
(g57
g58
NtRp2770
(dp2771
g61
(dp2772
g69
I3
ssg70
g2766
sg63
(lp2773
g1145
asbasbasbag56
(g72
g58
NtRp2774
(dp2775
g61
(dp2776
sg70
g2350
sg63
(lp2777
g56
(g77
g58
NtRp2778
(dp2779
g61
(dp2780
g81
g82
ssg70
g2774
sg63
(lp2781
S'SCRIPT_NAME'
p2782
asbag56
(g77
g58
NtRp2783
(dp2784
g61
(dp2785
g88
g89
ssg70
g2774
sg63
(lp2786
S':'
asbag56
(g77
g58
NtRp2787
(dp2788
g61
(dp2789
sg70
g2774
sg63
(lp2790
g56
(g57
g58
NtRp2791
(dp2792
g61
(dp2793
g69
I3
ssg70
g2787
sg63
(lp2794
S''
asbasbasbag56
(g72
g58
NtRp2795
(dp2796
g61
(dp2797
sg70
g2350
sg63
(lp2798
g56
(g77
g58
NtRp2799
(dp2800
g61
(dp2801
g81
g82
ssg70
g2795
sg63
(lp2802
S'SERVER_NAME'
p2803
asbag56
(g77
g58
NtRp2804
(dp2805
g61
(dp2806
g88
g89
ssg70
g2795
sg63
(lp2807
S':'
asbag56
(g77
g58
NtRp2808
(dp2809
g61
(dp2810
sg70
g2795
sg63
(lp2811
g56
(g57
g58
NtRp2812
(dp2813
g61
(dp2814
g69
I3
ssg70
g2808
sg63
(lp2815
g1295
asbasbasbag56
(g72
g58
NtRp2816
(dp2817
g61
(dp2818
sg70
g2350
sg63
(lp2819
g56
(g77
g58
NtRp2820
(dp2821
g61
(dp2822
g81
g82
ssg70
g2816
sg63
(lp2823
S'SERVER_PORT'
p2824
asbag56
(g77
g58
NtRp2825
(dp2826
g61
(dp2827
g88
g89
ssg70
g2816
sg63
(lp2828
S':'
asbag56
(g77
g58
NtRp2829
(dp2830
g61
(dp2831
sg70
g2816
sg63
(lp2832
g56
(g57
g58
NtRp2833
(dp2834
g61
(dp2835
g69
I3
ssg70
g2829
sg63
(lp2836
g1317
asbasbasbag56
(g72
g58
NtRp2837
(dp2838
g61
(dp2839
sg70
g2350
sg63
(lp2840
g56
(g77
g58
NtRp2841
(dp2842
g61
(dp2843
g81
g82
ssg70
g2837
sg63
(lp2844
S'SERVER_PROTOCOL'
p2845
asbag56
(g77
g58
NtRp2846
(dp2847
g61
(dp2848
g88
g89
ssg70
g2837
sg63
(lp2849
S':'
asbag56
(g77
g58
NtRp2850
(dp2851
g61
(dp2852
sg70
g2837
sg63
(lp2853
g56
(g57
g58
NtRp2854
(dp2855
g61
(dp2856
g69
I3
ssg70
g2850
sg63
(lp2857
g1339
asbasbasbag56
(g72
g58
NtRp2858
(dp2859
g61
(dp2860
sg70
g2350
sg63
(lp2861
g56
(g77
g58
NtRp2862
(dp2863
g61
(dp2864
g81
g82
ssg70
g2858
sg63
(lp2865
S'SERVER_SOFTWARE'
p2866
asbag56
(g77
g58
NtRp2867
(dp2868
g61
(dp2869
g88
g89
ssg70
g2858
sg63
(lp2870
S':'
asbag56
(g77
g58
NtRp2871
(dp2872
g61
(dp2873
sg70
g2858
sg63
(lp2874
g56
(g57
g58
NtRp2875
(dp2876
g61
(dp2877
g69
I3
ssg70
g2871
sg63
(lp2878
g1361
asbasbasbag56
(g72
g58
NtRp2879
(dp2880
g61
(dp2881
sg70
g2350
sg63
(lp2882
g56
(g77
g58
NtRp2883
(dp2884
g61
(dp2885
g81
g82
ssg70
g2879
sg63
(lp2886
S'WEB2PY_ORIGINAL_URI'
p2887
asbag56
(g77
g58
NtRp2888
(dp2889
g61
(dp2890
g88
g89
ssg70
g2879
sg63
(lp2891
S':'
asbag56
(g77
g58
NtRp2892
(dp2893
g61
(dp2894
sg70
g2879
sg63
(lp2895
g56
(g57
g58
NtRp2896
(dp2897
g61
(dp2898
g69
I3
ssg70
g2892
sg63
(lp2899
g1145
asbasbasbag56
(g72
g58
NtRp2900
(dp2901
g61
(dp2902
sg70
g2350
sg63
(lp2903
g56
(g77
g58
NtRp2904
(dp2905
g61
(dp2906
g81
g82
ssg70
g2900
sg63
(lp2907
S'wsgi.errors'
p2908
asbag56
(g77
g58
NtRp2909
(dp2910
g61
(dp2911
g88
g89
ssg70
g2900
sg63
(lp2912
S':'
asbag56
(g77
g58
NtRp2913
(dp2914
g61
(dp2915
sg70
g2900
sg63
(lp2916
g56
(g57
g58
NtRp2917
(dp2918
g61
(dp2919
g69
I3
ssg70
g2913
sg63
(lp2920
S"<open file '<stderr>', mode 'w' at 0x7f2526b29270>"
p2921
asbasbasbag56
(g72
g58
NtRp2922
(dp2923
g61
(dp2924
sg70
g2350
sg63
(lp2925
g56
(g77
g58
NtRp2926
(dp2927
g61
(dp2928
g81
g82
ssg70
g2922
sg63
(lp2929
S'wsgi.file_wrapper'
p2930
asbag56
(g77
g58
NtRp2931
(dp2932
g61
(dp2933
g88
g89
ssg70
g2922
sg63
(lp2934
S':'
asbag56
(g77
g58
NtRp2935
(dp2936
g61
(dp2937
sg70
g2922
sg63
(lp2938
g56
(g57
g58
NtRp2939
(dp2940
g61
(dp2941
g69
I3
ssg70
g2935
sg63
(lp2942
S'<class wsgiref.util.FileWrapper at 0x1b75d50>'
p2943
asbasbasbag56
(g72
g58
NtRp2944
(dp2945
g61
(dp2946
sg70
g2350
sg63
(lp2947
g56
(g77
g58
NtRp2948
(dp2949
g61
(dp2950
g81
g82
ssg70
g2944
sg63
(lp2951
S'wsgi.input'
p2952
asbag56
(g77
g58
NtRp2953
(dp2954
g61
(dp2955
g88
g89
ssg70
g2944
sg63
(lp2956
S':'
asbag56
(g77
g58
NtRp2957
(dp2958
g61
(dp2959
sg70
g2944
sg63
(lp2960
g56
(g57
g58
NtRp2961
(dp2962
g61
(dp2963
g69
I3
ssg70
g2957
sg63
(lp2964
S"<open file '<fdopen>', mode 'w+b' at 0x2ee56f0>"
p2965
asbasbasbag56
(g72
g58
NtRp2966
(dp2967
g61
(dp2968
sg70
g2350
sg63
(lp2969
g56
(g77
g58
NtRp2970
(dp2971
g61
(dp2972
g81
g82
ssg70
g2966
sg63
(lp2973
S'wsgi.multiprocess'
p2974
asbag56
(g77
g58
NtRp2975
(dp2976
g61
(dp2977
g88
g89
ssg70
g2966
sg63
(lp2978
S':'
asbag56
(g77
g58
NtRp2979
(dp2980
g61
(dp2981
sg70
g2966
sg63
(lp2982
g56
(g57
g58
NtRp2983
(dp2984
g61
(dp2985
g69
I3
ssg70
g2979
sg63
(lp2986
g795
asbasbasbag56
(g72
g58
NtRp2987
(dp2988
g61
(dp2989
sg70
g2350
sg63
(lp2990
g56
(g77
g58
NtRp2991
(dp2992
g61
(dp2993
g81
g82
ssg70
g2987
sg63
(lp2994
S'wsgi.multithread'
p2995
asbag56
(g77
g58
NtRp2996
(dp2997
g61
(dp2998
g88
g89
ssg70
g2987
sg63
(lp2999
S':'
asbag56
(g77
g58
NtRp3000
(dp3001
g61
(dp3002
sg70
g2987
sg63
(lp3003
g56
(g57
g58
NtRp3004
(dp3005
g61
(dp3006
g69
I3
ssg70
g3000
sg63
(lp3007
g99
asbasbasbag56
(g72
g58
NtRp3008
(dp3009
g61
(dp3010
sg70
g2350
sg63
(lp3011
g56
(g77
g58
NtRp3012
(dp3013
g61
(dp3014
g81
g82
ssg70
g3008
sg63
(lp3015
S'wsgi.run_once'
p3016
asbag56
(g77
g58
NtRp3017
(dp3018
g61
(dp3019
g88
g89
ssg70
g3008
sg63
(lp3020
S':'
asbag56
(g77
g58
NtRp3021
(dp3022
g61
(dp3023
sg70
g3008
sg63
(lp3024
g56
(g57
g58
NtRp3025
(dp3026
g61
(dp3027
g69
I3
ssg70
g3021
sg63
(lp3028
g795
asbasbasbag56
(g72
g58
NtRp3029
(dp3030
g61
(dp3031
sg70
g2350
sg63
(lp3032
g56
(g77
g58
NtRp3033
(dp3034
g61
(dp3035
g81
g82
ssg70
g3029
sg63
(lp3036
S'wsgi.url_scheme'
p3037
asbag56
(g77
g58
NtRp3038
(dp3039
g61
(dp3040
g88
g89
ssg70
g3029
sg63
(lp3041
S':'
asbag56
(g77
g58
NtRp3042
(dp3043
g61
(dp3044
sg70
g3029
sg63
(lp3045
g56
(g57
g58
NtRp3046
(dp3047
g61
(dp3048
g69
I3
ssg70
g3042
sg63
(lp3049
g1664
asbasbasbag56
(g72
g58
NtRp3050
(dp3051
g61
(dp3052
sg70
g2350
sg63
(lp3053
g56
(g77
g58
NtRp3054
(dp3055
g61
(dp3056
g81
g82
ssg70
g3050
sg63
(lp3057
S'wsgi.version'
p3058
asbag56
(g77
g58
NtRp3059
(dp3060
g61
(dp3061
g88
g89
ssg70
g3050
sg63
(lp3062
S':'
asbag56
(g77
g58
NtRp3063
(dp3064
g61
(dp3065
sg70
g3050
sg63
(lp3066
g56
(g57
g58
NtRp3067
(dp3068
g61
(dp3069
g69
I3
ssg70
g3063
sg63
(lp3070
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p3071
(lp3072
(dp3073
S'file'
p3074
S'/media/misperoles/git/pyj3nnn1/web2py/gluon/restricted.py'
p3075
sS'dump'
p3076
(dp3077
S'environment'
p3078
S"{'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CHECK_VERSION': True, ...}"
p3079
sS'ccode'
p3080
S'<code object <module> at 0x3080db0, file "/media...plications/admin/controllers/default.py", line 3>'
p3081
ssS'lnum'
p3082
I194
sS'lines'
p3083
(dp3084
I192
S'        else:'
p3085
sI193
S'            ccode = compile2(code,layer)'
p3086
sI194
S'        exec ccode in environment'
p3087
sI195
S'    except HTTP:'
p3088
sI196
S'        raise'
p3089
sI197
S'    except Exception, error:'
p3090
sI198
S'        # XXX Show exception in Wing IDE if running in debugger'
p3091
sI189
S'    try:'
p3092
sI190
S'        if type(code) == types.CodeType:'
p3093
sI191
S'            ccode = code'
p3094
ssS'call'
p3095
S"(code='# coding: utf8\\n\\nfrom gluon.admin import *\\nfrom g...\\n\\nresponse._vars=response._caller(check_version)\\n', environment={'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CHECK_VERSION': True, ...}, layer='/media/misperoles/git/pyj3nnn1/web2py/applications/admin/controllers/default.py')"
p3096
sS'func'
p3097
S'restricted'
p3098
sa(dp3099
g3074
S'/media/misperoles/git/pyj3nnn1/web2py/applications/admin/controllers/default.py'
p3100
sg3076
(dp3101
sg3082
I1225
sg3083
(dp3102
I1216
S'    else:'
p3103
sI1217
S'        return dict(form=T("Disabled"))'
p3104
sI1218
S''
sI1219
S'def reload_routes():'
p3105
sI1220
S'    """ Reload routes.py """'
p3106
sI1221
S'    import gluon.rewrite'
p3107
sI1222
S'    gluon.rewrite.load()'
p3108
sI1223
S"    redirect(URL('site'))"
p3109
sI1214
S'            auth.settings.registration_requires_approval = False'
p3110
sI1215
S'        return dict(form=auth())'
p3111
ssg3095
S'()'
p3112
sg3097
S'<module>'
p3113
sa(dp3114
g3074
S'/media/misperoles/git/pyj3nnn1/web2py/gluon/globals.py'
p3115
sg3076
(dp3116
S'self'
p3117
S'undefined'
p3118
sS'f'
S'<function check_version>'
p3119
ssg3082
I149
sg3083
(dp3120
I144
S'        self.meta = Storage()      # used by web2py_ajax.html'
p3121
sI145
S'        self.menu = []             # used by the default view layout'
p3122
sI146
S'        self.files = []            # used by web2py_ajax.html'
p3123
sI147
S'        self.generic_patterns = [] # patterns to allow generic views'
p3124
sI148
S'        self._vars = None'
p3125
sI149
S'        self._caller = lambda f: f()'
p3126
sI150
S'        self._view_environment = None'
p3127
sI151
S'        self._custom_commit = None'
p3128
sI152
S'        self._custom_rollback = None'
p3129
sI153
S''
ssg3095
S'(f=<function check_version>)'
p3130
sg3097
S'<lambda>'
p3131
sa(dp3132
g3074
S'/media/misperoles/git/pyj3nnn1/web2py/applications/admin/controllers/default.py'
p3133
sg3076
(dp3134
S'global XML'
p3135
S"<class 'gluon.html.XML'>"
p3136
sS'version_number'
p3137
S"(1, 99, 4, datetime.datetime(2011, 12, 14, 14, 46, 14), 'stable')"
p3138
ssg3082
I105
sg3083
(dp3139
I100
S"        return A(T('web2py is up to date'), _href=WEB2PY_URL)"
p3140
sI101
S'    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):'
p3141
sI102
S"        return SPAN('You should upgrade to version %s' % version_number)"
p3142
sI103
S'    else:'
p3143
sI104
S"        return sp_button(URL('upgrade_web2py'), T('upgrade now')) \\"
p3144
sI105
S'          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)'
p3145
sI106
S''
sI107
S''
sI108
S'def logout():'
p3146
sI109
S'    """ Logout handler """'
p3147
ssg3095
S'()'
p3148
sg3097
S'check_version'
p3149
sasS'pyver'
p3150
S'Python 2.7.2: /usr/bin/python2'
p3151
sS'session'
p3152
g56
(g57
g58
NtRp3153
(dp3154
g61
(dp3155
sg63
(lp3156
g56
(g65
g58
NtRp3157
(dp3158
g61
(dp3159
g69
I5
ssg70
Nsg63
(lp3160
g56
(g72
g58
NtRp3161
(dp3162
g61
(dp3163
sg70
g3157
sg63
(lp3164
g56
(g77
g58
NtRp3165
(dp3166
g61
(dp3167
g81
g82
ssg70
g3161
sg63
(lp3168
S'authorized'
p3169
asbag56
(g77
g58
NtRp3170
(dp3171
g61
(dp3172
g88
g89
ssg70
g3161
sg63
(lp3173
S':'
asbag56
(g77
g58
NtRp3174
(dp3175
g61
(dp3176
sg70
g3161
sg63
(lp3177
g56
(g57
g58
NtRp3178
(dp3179
g61
(dp3180
g69
I5
ssg70
g3174
sg63
(lp3181
g99
asbasbasbag56
(g72
g58
NtRp3182
(dp3183
g61
(dp3184
sg70
g3157
sg63
(lp3185
g56
(g77
g58
NtRp3186
(dp3187
g61
(dp3188
g81
g82
ssg70
g3182
sg63
(lp3189
S'check_version'
p3190
asbag56
(g77
g58
NtRp3191
(dp3192
g61
(dp3193
g88
g89
ssg70
g3182
sg63
(lp3194
S':'
asbag56
(g77
g58
NtRp3195
(dp3196
g61
(dp3197
sg70
g3182
sg63
(lp3198
g56
(g57
g58
NtRp3199
(dp3200
g61
(dp3201
g69
I5
ssg70
g3195
sg63
(lp3202
g795
asbasbasbag56
(g72
g58
NtRp3203
(dp3204
g61
(dp3205
sg70
g3157
sg63
(lp3206
g56
(g77
g58
NtRp3207
(dp3208
g61
(dp3209
g81
g82
ssg70
g3203
sg63
(lp3210
S'last_time'
p3211
asbag56
(g77
g58
NtRp3212
(dp3213
g61
(dp3214
g88
g89
ssg70
g3203
sg63
(lp3215
S':'
asbag56
(g77
g58
NtRp3216
(dp3217
g61
(dp3218
sg70
g3203
sg63
(lp3219
g56
(g57
g58
NtRp3220
(dp3221
g61
(dp3222
g69
I5
ssg70
g3216
sg63
(lp3223
S'1324533893.834226'
p3224
asbasbasbasbasbsS'etype'
p3225
S"<type 'exceptions.TypeError'>"
p3226
sS'date'
p3227
S'Thu Dec 22 01:34:54 2011'
p3228
sS'response'
p3229
g56
(g57
g58
NtRp3230
(dp3231
g61
(dp3232
sg63
(lp3233
g56
(g65
g58
NtRp3234
(dp3235
g61
(dp3236
g69
I5
ssg70
Nsg63
(lp3237
g56
(g72
g58
NtRp3238
(dp3239
g61
(dp3240
sg70
g3234
sg63
(lp3241
g56
(g77
g58
NtRp3242
(dp3243
g61
(dp3244
g81
g82
ssg70
g3238
sg63
(lp3245
g154
asbag56
(g77
g58
NtRp3246
(dp3247
g61
(dp3248
g88
g89
ssg70
g3238
sg63
(lp3249
S':'
asbag56
(g77
g58
NtRp3250
(dp3251
g61
(dp3252
sg70
g3238
sg63
(lp3253
g56
(g57
g58
NtRp3254
(dp3255
g61
(dp3256
g69
I5
ssg70
g3250
sg63
(lp3257
S'<cStringIO.StringO object at 0x2ef5b58>'
p3258
asbasbasbag56
(g72
g58
NtRp3259
(dp3260
g61
(dp3261
sg70
g3234
sg63
(lp3262
g56
(g77
g58
NtRp3263
(dp3264
g61
(dp3265
g81
g82
ssg70
g3259
sg63
(lp3266
g220
asbag56
(g77
g58
NtRp3267
(dp3268
g61
(dp3269
g88
g89
ssg70
g3259
sg63
(lp3270
S':'
asbag56
(g77
g58
NtRp3271
(dp3272
g61
(dp3273
sg70
g3259
sg63
(lp3274
g56
(g57
g58
NtRp3275
(dp3276
g61
(dp3277
g69
I5
ssg70
g3271
sg63
(lp3278
g56
(g65
g58
NtRp3279
(dp3280
g61
(dp3281
g69
I4
ssg70
Nsg63
(lp3282
g56
(g72
g58
NtRp3283
(dp3284
g61
(dp3285
sg70
g3279
sg63
(lp3286
g56
(g77
g58
NtRp3287
(dp3288
g61
(dp3289
g81
g82
ssg70
g3283
sg63
(lp3290
S'session_id_admin'
p3291
asbag56
(g77
g58
NtRp3292
(dp3293
g61
(dp3294
g88
g89
ssg70
g3283
sg63
(lp3295
S':'
asbag56
(g77
g58
NtRp3296
(dp3297
g61
(dp3298
sg70
g3283
sg63
(lp3299
g56
(g57
g58
NtRp3300
(dp3301
g61
(dp3302
g69
I4
ssg70
g3296
sg63
(lp3303
g56
(g65
g58
NtRp3304
(dp3305
g61
(dp3306
g69
I3
ssg70
Nsg63
(lp3307
g56
(g72
g58
NtRp3308
(dp3309
g61
(dp3310
sg70
g3304
sg63
(lp3311
g56
(g77
g58
NtRp3312
(dp3313
g61
(dp3314
g81
g82
ssg70
g3308
sg63
(lp3315
g270
asbag56
(g77
g58
NtRp3316
(dp3317
g61
(dp3318
g88
g89
ssg70
g3308
sg63
(lp3319
S':'
asbag56
(g77
g58
NtRp3320
(dp3321
g61
(dp3322
sg70
g3308
sg63
(lp3323
g56
(g57
g58
NtRp3324
(dp3325
g61
(dp3326
g69
I3
ssg70
g3320
sg63
(lp3327
S''
asbasbasbag56
(g72
g58
NtRp3328
(dp3329
g61
(dp3330
sg70
g3304
sg63
(lp3331
g56
(g77
g58
NtRp3332
(dp3333
g61
(dp3334
g81
g82
ssg70
g3328
sg63
(lp3335
g291
asbag56
(g77
g58
NtRp3336
(dp3337
g61
(dp3338
g88
g89
ssg70
g3328
sg63
(lp3339
S':'
asbag56
(g77
g58
NtRp3340
(dp3341
g61
(dp3342
sg70
g3328
sg63
(lp3343
g56
(g57
g58
NtRp3344
(dp3345
g61
(dp3346
g69
I3
ssg70
g3340
sg63
(lp3347
S''
asbasbasbag56
(g72
g58
NtRp3348
(dp3349
g61
(dp3350
sg70
g3304
sg63
(lp3351
g56
(g77
g58
NtRp3352
(dp3353
g61
(dp3354
g81
g82
ssg70
g3348
sg63
(lp3355
g312
asbag56
(g77
g58
NtRp3356
(dp3357
g61
(dp3358
g88
g89
ssg70
g3348
sg63
(lp3359
S':'
asbag56
(g77
g58
NtRp3360
(dp3361
g61
(dp3362
sg70
g3348
sg63
(lp3363
g56
(g57
g58
NtRp3364
(dp3365
g61
(dp3366
g69
I3
ssg70
g3360
sg63
(lp3367
S''
asbasbasbag56
(g72
g58
NtRp3368
(dp3369
g61
(dp3370
sg70
g3304
sg63
(lp3371
g56
(g77
g58
NtRp3372
(dp3373
g61
(dp3374
g81
g82
ssg70
g3368
sg63
(lp3375
g333
asbag56
(g77
g58
NtRp3376
(dp3377
g61
(dp3378
g88
g89
ssg70
g3368
sg63
(lp3379
S':'
asbag56
(g77
g58
NtRp3380
(dp3381
g61
(dp3382
sg70
g3368
sg63
(lp3383
g56
(g57
g58
NtRp3384
(dp3385
g61
(dp3386
g69
I3
ssg70
g3380
sg63
(lp3387
S''
asbasbasbag56
(g72
g58
NtRp3388
(dp3389
g61
(dp3390
sg70
g3304
sg63
(lp3391
g56
(g77
g58
NtRp3392
(dp3393
g61
(dp3394
g81
g82
ssg70
g3388
sg63
(lp3395
g354
asbag56
(g77
g58
NtRp3396
(dp3397
g61
(dp3398
g88
g89
ssg70
g3388
sg63
(lp3399
S':'
asbag56
(g77
g58
NtRp3400
(dp3401
g61
(dp3402
sg70
g3388
sg63
(lp3403
g56
(g57
g58
NtRp3404
(dp3405
g61
(dp3406
g69
I3
ssg70
g3400
sg63
(lp3407
S''
asbasbasbag56
(g72
g58
NtRp3408
(dp3409
g61
(dp3410
sg70
g3304
sg63
(lp3411
g56
(g77
g58
NtRp3412
(dp3413
g61
(dp3414
g81
g82
ssg70
g3408
sg63
(lp3415
g375
asbag56
(g77
g58
NtRp3416
(dp3417
g61
(dp3418
g88
g89
ssg70
g3408
sg63
(lp3419
S':'
asbag56
(g77
g58
NtRp3420
(dp3421
g61
(dp3422
sg70
g3408
sg63
(lp3423
g56
(g57
g58
NtRp3424
(dp3425
g61
(dp3426
g69
I3
ssg70
g3420
sg63
(lp3427
S'/'
asbasbasbag56
(g72
g58
NtRp3428
(dp3429
g61
(dp3430
sg70
g3304
sg63
(lp3431
g56
(g77
g58
NtRp3432
(dp3433
g61
(dp3434
g81
g82
ssg70
g3428
sg63
(lp3435
g396
asbag56
(g77
g58
NtRp3436
(dp3437
g61
(dp3438
g88
g89
ssg70
g3428
sg63
(lp3439
S':'
asbag56
(g77
g58
NtRp3440
(dp3441
g61
(dp3442
sg70
g3428
sg63
(lp3443
g56
(g57
g58
NtRp3444
(dp3445
g61
(dp3446
g69
I3
ssg70
g3440
sg63
(lp3447
S''
asbasbasbag56
(g72
g58
NtRp3448
(dp3449
g61
(dp3450
sg70
g3304
sg63
(lp3451
g56
(g77
g58
NtRp3452
(dp3453
g61
(dp3454
g81
g82
ssg70
g3448
sg63
(lp3455
g417
asbag56
(g77
g58
NtRp3456
(dp3457
g61
(dp3458
g88
g89
ssg70
g3448
sg63
(lp3459
S':'
asbag56
(g77
g58
NtRp3460
(dp3461
g61
(dp3462
sg70
g3448
sg63
(lp3463
g56
(g57
g58
NtRp3464
(dp3465
g61
(dp3466
g69
I3
ssg70
g3460
sg63
(lp3467
S''
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp3468
(dp3469
g61
(dp3470
sg70
g3234
sg63
(lp3471
g56
(g77
g58
NtRp3472
(dp3473
g61
(dp3474
g81
g82
ssg70
g3468
sg63
(lp3475
S'files'
p3476
asbag56
(g77
g58
NtRp3477
(dp3478
g61
(dp3479
g88
g89
ssg70
g3468
sg63
(lp3480
S':'
asbag56
(g77
g58
NtRp3481
(dp3482
g61
(dp3483
sg70
g3468
sg63
(lp3484
g56
(g57
g58
NtRp3485
(dp3486
g61
(dp3487
g69
I5
ssg70
g3481
sg63
(lp3488
g56
(g65
g58
NtRp3489
(dp3490
g61
(dp3491
g69
I4
ssg70
Nsg63
(lp3492
g56
(g72
g58
NtRp3493
(dp3494
g61
(dp3495
sg70
g3489
sg63
(lp3496
g56
(g77
g58
NtRp3497
(dp3498
g61
(dp3499
sg70
g3493
sg63
(lp3500
g56
(g57
g58
NtRp3501
(dp3502
g61
(dp3503
g69
I4
ssg70
g3497
sg63
(lp3504
S'/admin/static/plugin_multiselect/jquery.dimensions.js'
p3505
asbasbasbag56
(g72
g58
NtRp3506
(dp3507
g61
(dp3508
sg70
g3489
sg63
(lp3509
g56
(g77
g58
NtRp3510
(dp3511
g61
(dp3512
sg70
g3506
sg63
(lp3513
g56
(g57
g58
NtRp3514
(dp3515
g61
(dp3516
g69
I4
ssg70
g3510
sg63
(lp3517
S'/admin/static/plugin_multiselect/jquery.multiselect.js'
p3518
asbasbasbag56
(g72
g58
NtRp3519
(dp3520
g61
(dp3521
sg70
g3489
sg63
(lp3522
g56
(g77
g58
NtRp3523
(dp3524
g61
(dp3525
sg70
g3519
sg63
(lp3526
g56
(g57
g58
NtRp3527
(dp3528
g61
(dp3529
g69
I4
ssg70
g3523
sg63
(lp3530
S'/admin/static/plugin_multiselect/jquery.multiselect.css'
p3531
asbasbasbag56
(g72
g58
NtRp3532
(dp3533
g61
(dp3534
sg70
g3489
sg63
(lp3535
g56
(g77
g58
NtRp3536
(dp3537
g61
(dp3538
sg70
g3532
sg63
(lp3539
g56
(g57
g58
NtRp3540
(dp3541
g61
(dp3542
g69
I4
ssg70
g3536
sg63
(lp3543
S'/admin/static/plugin_multiselect/start.js'
p3544
asbasbasbasbasbasbasbag56
(g72
g58
NtRp3545
(dp3546
g61
(dp3547
sg70
g3234
sg63
(lp3548
g56
(g77
g58
NtRp3549
(dp3550
g61
(dp3551
g81
g82
ssg70
g3545
sg63
(lp3552
S'flash'
p3553
asbag56
(g77
g58
NtRp3554
(dp3555
g61
(dp3556
g88
g89
ssg70
g3545
sg63
(lp3557
S':'
asbag56
(g77
g58
NtRp3558
(dp3559
g61
(dp3560
sg70
g3545
sg63
(lp3561
g56
(g57
g58
NtRp3562
(dp3563
g61
(dp3564
g69
I5
ssg70
g3558
sg63
(lp3565
S''
asbasbasbag56
(g72
g58
NtRp3566
(dp3567
g61
(dp3568
sg70
g3234
sg63
(lp3569
g56
(g77
g58
NtRp3570
(dp3571
g61
(dp3572
g81
g82
ssg70
g3566
sg63
(lp3573
S'generic_patterns'
p3574
asbag56
(g77
g58
NtRp3575
(dp3576
g61
(dp3577
g88
g89
ssg70
g3566
sg63
(lp3578
S':'
asbag56
(g77
g58
NtRp3579
(dp3580
g61
(dp3581
sg70
g3566
sg63
(lp3582
g56
(g57
g58
NtRp3583
(dp3584
g61
(dp3585
g69
I5
ssg70
g3579
sg63
(lp3586
g56
(g65
g58
NtRp3587
(dp3588
g61
(dp3589
g69
I4
ssg70
Nsg63
(lp3590
sbasbasbasbag56
(g72
g58
NtRp3591
(dp3592
g61
(dp3593
sg70
g3234
sg63
(lp3594
g56
(g77
g58
NtRp3595
(dp3596
g61
(dp3597
g81
g82
ssg70
g3591
sg63
(lp3598
S'headers'
p3599
asbag56
(g77
g58
NtRp3600
(dp3601
g61
(dp3602
g88
g89
ssg70
g3591
sg63
(lp3603
S':'
asbag56
(g77
g58
NtRp3604
(dp3605
g61
(dp3606
sg70
g3591
sg63
(lp3607
g56
(g57
g58
NtRp3608
(dp3609
g61
(dp3610
g69
I5
ssg70
g3604
sg63
(lp3611
g56
(g65
g58
NtRp3612
(dp3613
g61
(dp3614
g69
I4
ssg70
Nsg63
(lp3615
g56
(g72
g58
NtRp3616
(dp3617
g61
(dp3618
sg70
g3612
sg63
(lp3619
g56
(g77
g58
NtRp3620
(dp3621
g61
(dp3622
g81
g82
ssg70
g3616
sg63
(lp3623
S'Cache-Control'
p3624
asbag56
(g77
g58
NtRp3625
(dp3626
g61
(dp3627
g88
g89
ssg70
g3616
sg63
(lp3628
S':'
asbag56
(g77
g58
NtRp3629
(dp3630
g61
(dp3631
sg70
g3616
sg63
(lp3632
g56
(g57
g58
NtRp3633
(dp3634
g61
(dp3635
g69
I4
ssg70
g3629
sg63
(lp3636
S'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
p3637
asbasbasbag56
(g72
g58
NtRp3638
(dp3639
g61
(dp3640
sg70
g3612
sg63
(lp3641
g56
(g77
g58
NtRp3642
(dp3643
g61
(dp3644
g81
g82
ssg70
g3638
sg63
(lp3645
S'Content-Type'
p3646
asbag56
(g77
g58
NtRp3647
(dp3648
g61
(dp3649
g88
g89
ssg70
g3638
sg63
(lp3650
S':'
asbag56
(g77
g58
NtRp3651
(dp3652
g61
(dp3653
sg70
g3638
sg63
(lp3654
g56
(g57
g58
NtRp3655
(dp3656
g61
(dp3657
g69
I4
ssg70
g3651
sg63
(lp3658
S'text/html; charset=utf-8'
p3659
asbasbasbag56
(g72
g58
NtRp3660
(dp3661
g61
(dp3662
sg70
g3612
sg63
(lp3663
g56
(g77
g58
NtRp3664
(dp3665
g61
(dp3666
g81
g82
ssg70
g3660
sg63
(lp3667
S'Expires'
p3668
asbag56
(g77
g58
NtRp3669
(dp3670
g61
(dp3671
g88
g89
ssg70
g3660
sg63
(lp3672
S':'
asbag56
(g77
g58
NtRp3673
(dp3674
g61
(dp3675
sg70
g3660
sg63
(lp3676
g56
(g57
g58
NtRp3677
(dp3678
g61
(dp3679
g69
I4
ssg70
g3673
sg63
(lp3680
S'Thu, 22 Dec 2011 06:04:53 GMT'
p3681
asbasbasbag56
(g72
g58
NtRp3682
(dp3683
g61
(dp3684
sg70
g3612
sg63
(lp3685
g56
(g77
g58
NtRp3686
(dp3687
g61
(dp3688
g81
g82
ssg70
g3682
sg63
(lp3689
S'Pragma'
p3690
asbag56
(g77
g58
NtRp3691
(dp3692
g61
(dp3693
g88
g89
ssg70
g3682
sg63
(lp3694
S':'
asbag56
(g77
g58
NtRp3695
(dp3696
g61
(dp3697
sg70
g3682
sg63
(lp3698
g56
(g57
g58
NtRp3699
(dp3700
g61
(dp3701
g69
I4
ssg70
g3695
sg63
(lp3702
S'no-cache'
p3703
asbasbasbag56
(g72
g58
NtRp3704
(dp3705
g61
(dp3706
sg70
g3612
sg63
(lp3707
g56
(g77
g58
NtRp3708
(dp3709
g61
(dp3710
g81
g82
ssg70
g3704
sg63
(lp3711
S'X-Powered-By'
p3712
asbag56
(g77
g58
NtRp3713
(dp3714
g61
(dp3715
g88
g89
ssg70
g3704
sg63
(lp3716
S':'
asbag56
(g77
g58
NtRp3717
(dp3718
g61
(dp3719
sg70
g3704
sg63
(lp3720
g56
(g57
g58
NtRp3721
(dp3722
g61
(dp3723
g69
I4
ssg70
g3717
sg63
(lp3724
S'web2py'
p3725
asbasbasbasbasbasbasbag56
(g72
g58
NtRp3726
(dp3727
g61
(dp3728
sg70
g3234
sg63
(lp3729
g56
(g77
g58
NtRp3730
(dp3731
g61
(dp3732
g81
g82
ssg70
g3726
sg63
(lp3733
S'menu'
p3734
asbag56
(g77
g58
NtRp3735
(dp3736
g61
(dp3737
g88
g89
ssg70
g3726
sg63
(lp3738
S':'
asbag56
(g77
g58
NtRp3739
(dp3740
g61
(dp3741
sg70
g3726
sg63
(lp3742
g56
(g57
g58
NtRp3743
(dp3744
g61
(dp3745
g69
I5
ssg70
g3739
sg63
(lp3746
g56
(g65
g58
NtRp3747
(dp3748
g61
(dp3749
g69
I4
ssg70
Nsg63
(lp3750
g56
(g72
g58
NtRp3751
(dp3752
g61
(dp3753
sg70
g3747
sg63
(lp3754
g56
(g77
g58
NtRp3755
(dp3756
g61
(dp3757
sg70
g3751
sg63
(lp3758
g56
(g57
g58
NtRp3759
(dp3760
g61
(dp3761
g69
I4
ssg70
g3755
sg63
(lp3762
g56
(g65
g58
NtRp3763
(dp3764
g61
(dp3765
g69
I3
ssg70
Nsg63
(lp3766
g56
(g72
g58
NtRp3767
(dp3768
g61
(dp3769
sg70
g3763
sg63
(lp3770
g56
(g77
g58
NtRp3771
(dp3772
g61
(dp3773
sg70
g3767
sg63
(lp3774
g56
(g57
g58
NtRp3775
(dp3776
g61
(dp3777
g69
I3
ssg70
g3771
sg63
(lp3778
cgluon.languages
lazyT_unpickle
p3779
(S't\x04\x00\x00\x00Site'
tRp3780
asbasbasbag56
(g72
g58
NtRp3781
(dp3782
g61
(dp3783
sg70
g3763
sg63
(lp3784
g56
(g77
g58
NtRp3785
(dp3786
g61
(dp3787
sg70
g3781
sg63
(lp3788
g56
(g57
g58
NtRp3789
(dp3790
g61
(dp3791
g69
I3
ssg70
g3785
sg63
(lp3792
g795
asbasbasbag56
(g72
g58
NtRp3793
(dp3794
g61
(dp3795
sg70
g3763
sg63
(lp3796
g56
(g77
g58
NtRp3797
(dp3798
g61
(dp3799
sg70
g3793
sg63
(lp3800
g56
(g57
g58
NtRp3801
(dp3802
g61
(dp3803
g69
I3
ssg70
g3797
sg63
(lp3804
S'/admin/default/site'
p3805
asbasbasbasbasbasbasbag56
(g72
g58
NtRp3806
(dp3807
g61
(dp3808
sg70
g3747
sg63
(lp3809
g56
(g77
g58
NtRp3810
(dp3811
g61
(dp3812
sg70
g3806
sg63
(lp3813
g56
(g57
g58
NtRp3814
(dp3815
g61
(dp3816
g69
I4
ssg70
g3810
sg63
(lp3817
g56
(g65
g58
NtRp3818
(dp3819
g61
(dp3820
g69
I3
ssg70
Nsg63
(lp3821
g56
(g72
g58
NtRp3822
(dp3823
g61
(dp3824
sg70
g3818
sg63
(lp3825
g56
(g77
g58
NtRp3826
(dp3827
g61
(dp3828
sg70
g3822
sg63
(lp3829
g56
(g57
g58
NtRp3830
(dp3831
g61
(dp3832
g69
I3
ssg70
g3826
sg63
(lp3833
g3779
(S't\x06\x00\x00\x00Logout'
tRp3834
asbasbasbag56
(g72
g58
NtRp3835
(dp3836
g61
(dp3837
sg70
g3818
sg63
(lp3838
g56
(g77
g58
NtRp3839
(dp3840
g61
(dp3841
sg70
g3835
sg63
(lp3842
g56
(g57
g58
NtRp3843
(dp3844
g61
(dp3845
g69
I3
ssg70
g3839
sg63
(lp3846
g795
asbasbasbag56
(g72
g58
NtRp3847
(dp3848
g61
(dp3849
sg70
g3818
sg63
(lp3850
g56
(g77
g58
NtRp3851
(dp3852
g61
(dp3853
sg70
g3847
sg63
(lp3854
g56
(g57
g58
NtRp3855
(dp3856
g61
(dp3857
g69
I3
ssg70
g3851
sg63
(lp3858
S'/admin/default/logout'
p3859
asbasbasbasbasbasbasbag56
(g72
g58
NtRp3860
(dp3861
g61
(dp3862
sg70
g3747
sg63
(lp3863
g56
(g77
g58
NtRp3864
(dp3865
g61
(dp3866
sg70
g3860
sg63
(lp3867
g56
(g57
g58
NtRp3868
(dp3869
g61
(dp3870
g69
I4
ssg70
g3864
sg63
(lp3871
g56
(g65
g58
NtRp3872
(dp3873
g61
(dp3874
g69
I3
ssg70
Nsg63
(lp3875
g56
(g72
g58
NtRp3876
(dp3877
g61
(dp3878
sg70
g3872
sg63
(lp3879
g56
(g77
g58
NtRp3880
(dp3881
g61
(dp3882
sg70
g3876
sg63
(lp3883
g56
(g57
g58
NtRp3884
(dp3885
g61
(dp3886
g69
I3
ssg70
g3880
sg63
(lp3887
g3779
(S't\x04\x00\x00\x00Help'
tRp3888
asbasbasbag56
(g72
g58
NtRp3889
(dp3890
g61
(dp3891
sg70
g3872
sg63
(lp3892
g56
(g77
g58
NtRp3893
(dp3894
g61
(dp3895
sg70
g3889
sg63
(lp3896
g56
(g57
g58
NtRp3897
(dp3898
g61
(dp3899
g69
I3
ssg70
g3893
sg63
(lp3900
g795
asbasbasbag56
(g72
g58
NtRp3901
(dp3902
g61
(dp3903
sg70
g3872
sg63
(lp3904
g56
(g77
g58
NtRp3905
(dp3906
g61
(dp3907
sg70
g3901
sg63
(lp3908
g56
(g57
g58
NtRp3909
(dp3910
g61
(dp3911
g69
I3
ssg70
g3905
sg63
(lp3912
S'/examples/default/index'
p3913
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp3914
(dp3915
g61
(dp3916
sg70
g3234
sg63
(lp3917
g56
(g77
g58
NtRp3918
(dp3919
g61
(dp3920
g81
g82
ssg70
g3914
sg63
(lp3921
S'meta'
p3922
asbag56
(g77
g58
NtRp3923
(dp3924
g61
(dp3925
g88
g89
ssg70
g3914
sg63
(lp3926
S':'
asbag56
(g77
g58
NtRp3927
(dp3928
g61
(dp3929
sg70
g3914
sg63
(lp3930
g56
(g57
g58
NtRp3931
(dp3932
g61
(dp3933
g69
I5
ssg70
g3927
sg63
(lp3934
g56
(g65
g58
NtRp3935
(dp3936
g61
(dp3937
g69
I4
ssg70
Nsg63
(lp3938
sbasbasbasbag56
(g72
g58
NtRp3939
(dp3940
g61
(dp3941
sg70
g3234
sg63
(lp3942
g56
(g77
g58
NtRp3943
(dp3944
g61
(dp3945
g81
g82
ssg70
g3939
sg63
(lp3946
S'postprocessing'
p3947
asbag56
(g77
g58
NtRp3948
(dp3949
g61
(dp3950
g88
g89
ssg70
g3939
sg63
(lp3951
S':'
asbag56
(g77
g58
NtRp3952
(dp3953
g61
(dp3954
sg70
g3939
sg63
(lp3955
g56
(g57
g58
NtRp3956
(dp3957
g61
(dp3958
g69
I5
ssg70
g3952
sg63
(lp3959
g56
(g65
g58
NtRp3960
(dp3961
g61
(dp3962
g69
I4
ssg70
Nsg63
(lp3963
sbasbasbasbag56
(g72
g58
NtRp3964
(dp3965
g61
(dp3966
sg70
g3234
sg63
(lp3967
g56
(g77
g58
NtRp3968
(dp3969
g61
(dp3970
g81
g82
ssg70
g3964
sg63
(lp3971
S'session_file'
p3972
asbag56
(g77
g58
NtRp3973
(dp3974
g61
(dp3975
g88
g89
ssg70
g3964
sg63
(lp3976
S':'
asbag56
(g77
g58
NtRp3977
(dp3978
g61
(dp3979
sg70
g3964
sg63
(lp3980
g56
(g57
g58
NtRp3981
(dp3982
g61
(dp3983
g69
I5
ssg70
g3977
sg63
(lp3984
S"<open file '/media/misperoles/git/pyj3nnn1/web2py/applications/admin/sessions/127.0.0.1-22596e58-6815-497a-80e5-f728980c8462', mode 'rb+' at 0x2ee58a0>"
p3985
asbasbasbag56
(g72
g58
NtRp3986
(dp3987
g61
(dp3988
sg70
g3234
sg63
(lp3989
g56
(g77
g58
NtRp3990
(dp3991
g61
(dp3992
g81
g82
ssg70
g3986
sg63
(lp3993
S'session_filename'
p3994
asbag56
(g77
g58
NtRp3995
(dp3996
g61
(dp3997
g88
g89
ssg70
g3986
sg63
(lp3998
S':'
asbag56
(g77
g58
NtRp3999
(dp4000
g61
(dp4001
sg70
g3986
sg63
(lp4002
g56
(g57
g58
NtRp4003
(dp4004
g61
(dp4005
g69
I5
ssg70
g3999
sg63
(lp4006
S'/media/misperoles/git/pyj3nnn1/web2py/applications/admin/sessions/127.0.0.1-22596e58-6815-497a-80e5-f728980c8462'
p4007
asbasbasbag56
(g72
g58
NtRp4008
(dp4009
g61
(dp4010
sg70
g3234
sg63
(lp4011
g56
(g77
g58
NtRp4012
(dp4013
g61
(dp4014
g81
g82
ssg70
g4008
sg63
(lp4015
S'session_id'
p4016
asbag56
(g77
g58
NtRp4017
(dp4018
g61
(dp4019
g88
g89
ssg70
g4008
sg63
(lp4020
S':'
asbag56
(g77
g58
NtRp4021
(dp4022
g61
(dp4023
sg70
g4008
sg63
(lp4024
g56
(g57
g58
NtRp4025
(dp4026
g61
(dp4027
g69
I5
ssg70
g4021
sg63
(lp4028
S'127.0.0.1-22596e58-6815-497a-80e5-f728980c8462'
p4029
asbasbasbag56
(g72
g58
NtRp4030
(dp4031
g61
(dp4032
sg70
g3234
sg63
(lp4033
g56
(g77
g58
NtRp4034
(dp4035
g61
(dp4036
g81
g82
ssg70
g4030
sg63
(lp4037
S'session_id_name'
p4038
asbag56
(g77
g58
NtRp4039
(dp4040
g61
(dp4041
g88
g89
ssg70
g4030
sg63
(lp4042
S':'
asbag56
(g77
g58
NtRp4043
(dp4044
g61
(dp4045
sg70
g4030
sg63
(lp4046
g56
(g57
g58
NtRp4047
(dp4048
g61
(dp4049
g69
I5
ssg70
g4043
sg63
(lp4050
g3291
asbasbasbag56
(g72
g58
NtRp4051
(dp4052
g61
(dp4053
sg70
g3234
sg63
(lp4054
g56
(g77
g58
NtRp4055
(dp4056
g61
(dp4057
g81
g82
ssg70
g4051
sg63
(lp4058
S'session_locked'
p4059
asbag56
(g77
g58
NtRp4060
(dp4061
g61
(dp4062
g88
g89
ssg70
g4051
sg63
(lp4063
S':'
asbag56
(g77
g58
NtRp4064
(dp4065
g61
(dp4066
sg70
g4051
sg63
(lp4067
g56
(g57
g58
NtRp4068
(dp4069
g61
(dp4070
g69
I5
ssg70
g4064
sg63
(lp4071
g795
asbasbasbag56
(g72
g58
NtRp4072
(dp4073
g61
(dp4074
sg70
g3234
sg63
(lp4075
g56
(g77
g58
NtRp4076
(dp4077
g61
(dp4078
g81
g82
ssg70
g4072
sg63
(lp4079
S'session_new'
p4080
asbag56
(g77
g58
NtRp4081
(dp4082
g61
(dp4083
g88
g89
ssg70
g4072
sg63
(lp4084
S':'
asbag56
(g77
g58
NtRp4085
(dp4086
g61
(dp4087
sg70
g4072
sg63
(lp4088
g56
(g57
g58
NtRp4089
(dp4090
g61
(dp4091
g69
I5
ssg70
g4085
sg63
(lp4092
g795
asbasbasbag56
(g72
g58
NtRp4093
(dp4094
g61
(dp4095
sg70
g3234
sg63
(lp4096
g56
(g77
g58
NtRp4097
(dp4098
g61
(dp4099
g81
g82
ssg70
g4093
sg63
(lp4100
S'status'
p4101
asbag56
(g77
g58
NtRp4102
(dp4103
g61
(dp4104
g88
g89
ssg70
g4093
sg63
(lp4105
S':'
asbag56
(g77
g58
NtRp4106
(dp4107
g61
(dp4108
sg70
g4093
sg63
(lp4109
g56
(g57
g58
NtRp4110
(dp4111
g61
(dp4112
g69
I5
ssg70
g4106
sg63
(lp4113
S'200'
p4114
asbasbasbag56
(g72
g58
NtRp4115
(dp4116
g61
(dp4117
sg70
g3234
sg63
(lp4118
g56
(g77
g58
NtRp4119
(dp4120
g61
(dp4121
g81
g82
ssg70
g4115
sg63
(lp4122
S'subtitle'
p4123
asbag56
(g77
g58
NtRp4124
(dp4125
g61
(dp4126
g88
g89
ssg70
g4115
sg63
(lp4127
S':'
asbag56
(g77
g58
NtRp4128
(dp4129
g61
(dp4130
sg70
g4115
sg63
(lp4131
g56
(g57
g58
NtRp4132
(dp4133
g61
(dp4134
g69
I5
ssg70
g4128
sg63
(lp4135
S'admin'
p4136
asbasbasbag56
(g72
g58
NtRp4137
(dp4138
g61
(dp4139
sg70
g3234
sg63
(lp4140
g56
(g77
g58
NtRp4141
(dp4142
g61
(dp4143
g81
g82
ssg70
g4137
sg63
(lp4144
S'title'
p4145
asbag56
(g77
g58
NtRp4146
(dp4147
g61
(dp4148
g88
g89
ssg70
g4137
sg63
(lp4149
S':'
asbag56
(g77
g58
NtRp4150
(dp4151
g61
(dp4152
sg70
g4137
sg63
(lp4153
g56
(g57
g58
NtRp4154
(dp4155
g61
(dp4156
g69
I5
ssg70
g4150
sg63
(lp4157
S'check_version '
p4158
asbasbasbag56
(g72
g58
NtRp4159
(dp4160
g61
(dp4161
sg70
g3234
sg63
(lp4162
g56
(g77
g58
NtRp4163
(dp4164
g61
(dp4165
g81
g82
ssg70
g4159
sg63
(lp4166
g2265
asbag56
(g77
g58
NtRp4167
(dp4168
g61
(dp4169
g88
g89
ssg70
g4159
sg63
(lp4170
S':'
asbag56
(g77
g58
NtRp4171
(dp4172
g61
(dp4173
sg70
g4159
sg63
(lp4174
g56
(g57
g58
NtRp4175
(dp4176
g61
(dp4177
g69
I5
ssg70
g4171
sg63
(lp4178
g2278
asbasbasbag56
(g72
g58
NtRp4179
(dp4180
g61
(dp4181
sg70
g3234
sg63
(lp4182
g56
(g77
g58
NtRp4183
(dp4184
g61
(dp4185
g81
g82
ssg70
g4179
sg63
(lp4186
S'view'
p4187
asbag56
(g77
g58
NtRp4188
(dp4189
g61
(dp4190
g88
g89
ssg70
g4179
sg63
(lp4191
S':'
asbag56
(g77
g58
NtRp4192
(dp4193
g61
(dp4194
sg70
g4179
sg63
(lp4195
g56
(g57
g58
NtRp4196
(dp4197
g61
(dp4198
g69
I5
ssg70
g4192
sg63
(lp4199
S'default/check_version.html'
p4200
asbasbasbasbasbsS'locals'
p4201
(dp4202
S'version_number'
p4203
S"(1, 99, 4, datetime.datetime(2011, 12, 14, 14, 46, 14), 'stable')"
p4204
sS'new_version'
p4205
g99
sssS'traceback'
p4206
S'Traceback (most recent call last):\n  File "/media/misperoles/git/pyj3nnn1/web2py/gluon/restricted.py", line 194, in restricted\n    exec ccode in environment\n  File "/media/misperoles/git/pyj3nnn1/web2py/applications/admin/controllers/default.py", line 1225, in <module>\n  File "/media/misperoles/git/pyj3nnn1/web2py/gluon/globals.py", line 149, in <lambda>\n    self._caller = lambda f: f()\n  File "/media/misperoles/git/pyj3nnn1/web2py/applications/admin/controllers/default.py", line 105, in check_version\n    + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)\nTypeError: not all arguments converted during string formatting\n'
p4207
s.