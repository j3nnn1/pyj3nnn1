(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/j3nnn1/git/pyj3nnn1/web2py/applications/admin/controllers/default.py'
p4
sS'code'
p5
S'# coding: utf8 \n\nfrom gluon.admin import *\nfrom glob import glob\nimport shutil\n\ndef index():\n    """ Index handler """\n\n    send = request.vars.send\n    if not send:\n        send = URL(\'site\')\n\n    if session.authorized:\n        redirect(send)\n    elif request.vars.password:\n        if verify_password(request.vars.password):\n            session.authorized = True\n\n            if CHECK_VERSION:\n                session.check_version = True\n            else:\n                session.check_version = False\n\n            session.last_time = t0\n            if isinstance(send, list):  # ## why does this happen?\n                send = str(send[0])\n\n            redirect(send)\n        else:\n            response.flash = T(\'invalid password\')\n\n    # f == file\n    apps = [f for f in os.listdir(apath(r=request)) if f.find(\'.\') < 0]\n\n    return dict(apps=apps, send=send)\n\n\ndef check_version():\n    """ Checks if web2py is up to date """\n\n    session.forget()\n    session._unlock(response)\n\n    new_version, version_number = check_new_version(request.env.web2py_version,\n                                    WEB2PY_VERSION_URL)\n    \n    if new_version == -1:\n        return A(T(\'Unable to check for upgrades\'), _href=WEB2PY_URL)\n    elif new_version == True:\n        return A(T(\'A new version of web2py is available: %s\'\n                                            % version_number), _href=WEB2PY_URL)\n    else:\n        return A(T(\'web2py is up to date\'), _href=WEB2PY_URL)\n\n\ndef logout():\n    """ Logout handler """\n\n    session.authorized = None\n    redirect(URL(\'index\'))\n\n\ndef change_password():\n    if session.pam_user:\n        session.flash = T(\'PAM authenticated user, cannot change password here\')\n        redirect(URL(\'site\'))\n    form=SQLFORM.factory(Field(\'current_admin_password\',\'password\'),\n                         Field(\'new_admin_password\',\'password\',requires=IS_STRONG()),\n                         Field(\'new_admin_password_again\',\'password\'))\n    if form.accepts(request.vars):\n        if not verify_password(request.vars.current_admin_password):\n            form.errors.current_admin_password = T(\'invalid password\')\n        elif form.vars.new_admin_password != form.vars.new_admin_password_again:\n            form.errors.new_admin_password_again = T(\'no match\')\n        else:\n            path = os.path.join(request.env.web2py_path,\'parameters_%s.py\' % request.env.server_port)\n            open(path,\'w\').write(\'password="%s"\' % CRYPT()(request.vars.new_admin_password)[0])\n            session.flash = T(\'password changed\')\n            redirect(URL(\'site\'))\n    return dict(form=form)\n\ndef site():\n    """ Site handler """\n\n    myversion = request.env.web2py_version\n\n    # Shortcut to make the elif statements more legible\n    file_or_appurl = \'file\' in request.vars or \'appurl\' in request.vars\n\n    if request.vars.filename and not \'file\' in request.vars:\n        # create a new application        \n        appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n        if app_create(appname, request):            \n            session.flash = T(\'new application "%s" created\', appname)\n            redirect(URL(\'design\',args=appname))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n        \n    elif file_or_appurl and not request.vars.filename:\n        # can\'t do anything without an app name\n        msg = \'you must specify a name for the uploaded application\'\n        response.flash = T(msg)\n\n    elif file_or_appurl and request.vars.filename:\n        # fetch an application via URL or file upload\n        if request.vars.appurl is not \'\':\n            try:\n                f = urllib.urlopen(request.vars.appurl)\n            except Exception, e:\n                session.flash = DIV(T(\'Unable to download app because:\'),PRE(str(e)))\n                redirect(URL(r=request))\n            fname = request.vars.appurl\n        elif request.vars.file is not \'\':\n            f = request.vars.file.file\n            fname = request.vars.file.filename\n\n        appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n        installed = app_install(appname, f, request, fname,\n                                overwrite=request.vars.overwrite_check)\n        if installed:\n            msg = \'application %(appname)s installed with md5sum: %(digest)s\'\n            session.flash = T(msg, dict(appname=appname,\n                                        digest=md5_hash(installed)))\n        elif request.vars.overwrite_check:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        else:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        redirect(URL(r=request))\n\n    regex = re.compile(\'^\\w+$\')\n    apps = sorted([(f.upper(), f) for f in os.listdir(apath(r=request)) \\\n                       if regex.match(f)])\n    apps = [item[1] for item in apps]\n\n    return dict(app=None, apps=apps, myversion=myversion)\n\n\ndef pack():\n    if len(request.args) == 1:\n        fname = \'web2py.app.%s.w2p\' % request.args[0]\n        filename = app_pack(request.args[0], request)\n    else:\n        fname = \'web2py.app.%s.compiled.w2p\' % request.args[0]\n        filename = app_pack_compiled(request.args[0], request)\n\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return open(filename, \'rb\').read()\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'site\'))\n\ndef pack_plugin():\n    if len(request.args) == 2:\n        fname = \'web2py.plugin.%s.w2p\' % request.args[1]\n        filename = plugin_pack(request.args[0], request.args[1], request)\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return open(filename, \'rb\').read()\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'plugin\',args=request.args))\n\ndef upgrade_web2py():\n    if \'upgrade\' in request.vars:\n        (success, error) = upgrade(request)\n        if success:\n            session.flash = T(\'web2py upgraded; please restart it\')\n        else:\n            session.flash = T(\'unable to upgrade because "%s"\', error)\n        redirect(URL(\'site\'))\n    elif \'noupgrade\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict()\n\ndef uninstall():\n    app = request.args[0]\n\n    if \'delete\' in request.vars:\n        deleted = app_uninstall(app, request)\n        if deleted:\n            session.flash = T(\'application "%s" uninstalled\', app)\n        else:\n            session.flash = T(\'unable to uninstall "%s"\', app)\n        redirect(URL(\'site\'))\n    elif \'nodelete\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict(app=app)\n\n\ndef cleanup():\n    clean = app_cleanup(request.args[0], request)\n    if not clean:\n        session.flash = T("some files could not be removed")\n    else:\n        session.flash = T(\'cache, errors and sessions cleaned\')\n\n    redirect(URL(\'site\'))\n\n\ndef compile_app():\n    c = app_compile(request.args[0], request)\n    if not c:\n        session.flash = T(\'application compiled\')\n    else:\n        session.flash = DIV(T(\'Cannot compile: there are errors in your app:\',\n                              CODE(c)))    \n    redirect(URL(\'site\'))\n\n\ndef remove_compiled_app():\n    """ Remove the compiled application """\n    remove_compiled_application(apath(request.args[0], r=request))\n    session.flash = T(\'compiled application removed\')\n    redirect(URL(\'site\'))\n\n    \ndef delete():\n    """ Object delete handler """\n\n    filename = \'/\'.join(request.args)\n    sender = request.vars.sender\n\n    if isinstance(sender, list):  # ## fix a problem with Vista\n        sender = sender[0]\n\n    if \'nodelete\' in request.vars:\n        redirect(URL(sender))\n    elif \'delete\' in request.vars:\n        try:\n            os.unlink(apath(filename, r=request))\n            session.flash = T(\'file "%(filename)s" deleted\',\n                              dict(filename=filename))\n        except Exception:\n            session.flash = T(\'unable to delete file "%(filename)s"\',\n                              dict(filename=filename))\n        redirect(URL(sender))\n    return dict(filename=filename, sender=sender)\n        \ndef peek():\n    """ Visualize object code """\n\n    filename = \'/\'.join(request.args)\n\n    try:\n        data = open(apath(filename, r=request), \'r\').read().replace(\'\\r\',\'\')\n    except IOError:\n        session.flash = T(\'file does not exist\')\n        redirect(URL(\'site\'))\n\n    extension = filename[filename.rfind(\'.\') + 1:].lower()\n\n    return dict(app=request.args[0],\n                filename=filename,\n                data=data,\n                extension=extension)\n\n\ndef test():\n    """ Execute controller tests """\n\n    app = request.args[0]\n\n    if len(request.args) > 1:\n        file = request.args[1]\n    else:\n        file = \'.*\\.py\'\n\n    controllers = listdir(apath(\'%s/controllers/\' % app, r=request), file + \'$\')\n\n    return dict(app=app, controllers=controllers)\n\ndef keepalive():\n    return \'\'\n\ndef edit():\n    """ File edit handler """\n    # Load json only if it is ajax edited...\n\n    filename = \'/\'.join(request.args)\n\n    # Try to discover the file type\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'text\'\n\n    # ## check if file is not there\n\n    path = apath(filename, r=request)\n\n    if request.vars.revert and os.path.exists(path + \'.bak\'):\n        try:\n            data = open(path + \'.bak\', \'r\').read()\n            data1 = open(path, \'r\').read()\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                 return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        open(path, \'w\').write(data)\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n        open(path + \'.bak\', \'w\').write(data1)\n        response.flash = T(\'file "%s" of %s restored\', (filename, saved_on))\n    else:\n        try:\n            data = open(path, \'r\').read()\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n\n        if request.vars.file_hash and request.vars.file_hash != file_hash:\n            session.flash = T(\'file changed on disk\')\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            open(path + \'.1\', \'w\').write(data)\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'file changed on disk\')), \n                                      \'redirect\': URL(\'resolve\',\n                                                      args=request.args)})\n            else:\n                redirect(URL(\'resolve\', args=request.args))\n        elif request.vars.data:\n            open(path + \'.bak\', \'w\').write(data)\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            open(path, \'w\').write(data)\n            file_hash = md5_hash(data)\n            saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n            response.flash = T(\'file saved on %s\', saved_on)\n\n    data_or_revert = (request.vars.data or request.vars.revert)\n\n    if data_or_revert and request.args[1] == \'modules\':\n        # Lets try to reload the modules\n        try:\n            mopath = \'.\'.join(request.args[2:])[:-3]\n            exec \'import applications.%s.modules.%s\' % (request.args[0], mopath)\n            reload(sys.modules[\'applications.%s.modules.%s\'\n                    % (request.args[0], mopath)])\n        except Exception, e:\n            response.flash = DIV(T(\'failed to reload module because:\'),PRE(str(e)))\n\n    edit_controller = None\n    editviewlinks = None\n    view_link = None\n    if filetype == \'html\' and request.args >= 3:\n        cfilename = os.path.join(request.args[0], \'controllers\',\n                                 request.args[2] + \'.py\')\n        if os.path.exists(apath(cfilename, r=request)):\n            edit_controller = URL(\'edit\', args=[cfilename])\n            view = request.args[3].replace(\'.html\',\'\')\n            view_link = A(T(\'view\'),_href=URL(request.args[0],request.args[2],view))\n    elif filetype == \'python\' and request.args[1] == \'controllers\':\n        ## it\'s a controller file.\n        ## Create links to all of the associated view files.\n        app = request.args[0]\n        viewname = os.path.splitext(request.args[2])[0]\n        viewpath = os.path.join(app,\'views\',viewname)\n        aviewpath = apath(viewpath, r=request)\n        viewlist = []\n        if os.path.exists(aviewpath):\n            if os.path.isdir(aviewpath):\n                viewlist = glob(os.path.join(aviewpath,\'*.html\'))\n        elif os.path.exists(aviewpath+\'.html\'):\n            viewlist.append(aviewpath+\'.html\')\n        if len(viewlist):\n            editviewlinks = []\n            for v in viewlist:\n                vf = os.path.split(v)[-1]\n                vargs = "/".join([viewpath.replace(os.sep,"/"),vf])\n                editviewlinks.append(A(T(vf.split(".")[0]),\\\n                    _href=URL(\'edit\',args=[vargs])))\n\n    if len(request.args) > 2 and request.args[1] == \'controllers\':\n        controller = (request.args[2])[:-3]\n        functions = regex_expose.findall(data)\n    else:\n        (controller, functions) = (None, None)\n\n    if \'from_ajax\' in request.vars:\n        return response.json({\'file_hash\': file_hash, \'saved_on\': saved_on, \'functions\':functions, \'controller\': controller, \'application\': request.args[0] })\n    else:\n\n        editarea_preferences = {}\n        editarea_preferences[\'FONT_SIZE\'] = \'10\'\n        editarea_preferences[\'FULL_SCREEN\'] = \'false\'\n        editarea_preferences[\'ALLOW_TOGGLE\'] = \'true\'\n        editarea_preferences[\'REPLACE_TAB_BY_SPACES\'] = \'4\'\n        editarea_preferences[\'DISPLAY\'] = \'onload\'\n        for key in editarea_preferences:\n            if globals().has_key(key):\n                editarea_preferences[key]=globals()[key]\n        return dict(app=request.args[0],\n                    filename=filename,\n                    filetype=filetype,\n                    data=data,\n                    edit_controller=edit_controller,\n                    file_hash=file_hash,\n                    saved_on=saved_on,\n                    controller=controller,\n                    functions=functions,\n                    view_link=view_link,\n                    editarea_preferences=editarea_preferences,\n                    editviewlinks=editviewlinks)\n\ndef resolve():\n    """  """\n\n    filename = \'/\'.join(request.args)\n\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'text\'\n\n    # ## check if file is not there\n\n    path = apath(filename, r=request)\n    a = open(path, \'r\').readlines()\n\n    try:\n        b = open(path + \'.1\', \'r\').readlines()\n    except IOError:\n        session.flash = \'Other file, no longer there\'\n        redirect(URL(\'edit\', args=request.args))\n\n    d = difflib.ndiff(a, b)\n\n    def leading(line):\n        """  """\n\n        # TODO: we really need to comment this\n        z = \'\'\n        for (k, c) in enumerate(line):\n            if c == \' \':\n                z += \'&nbsp;\'\n            elif c == \' \\t\':\n                z += \'&nbsp;\'\n            elif k == 0 and c == \'?\':\n                pass\n            else:\n                break\n\n        return XML(z)\n\n    def getclass(item):\n        """ Determine item class """\n\n        if item[0] == \' \':\n            return \'normal\'\n        if item[0] == \'+\':\n            return \'plus\'\n        if item[0] == \'-\':\n            return \'minus\'\n\n    if request.vars:\n        c = \'\'.join([item[2:] for (i, item) in enumerate(d) if item[0] \\\n                     == \' \' or \'line%i\' % i in request.vars])\n        open(path, \'w\').write(c)\n        session.flash = \'files merged\'\n        redirect(URL(\'edit\', args=request.args))\n    else:\n        # Making the short circuit compatible with <= python2.4\n        gen_data = lambda index,item: not item[:1] in [\'+\',\'-\'] and "" \\\n                   or INPUT(_type=\'checkbox\',\n                            _name=\'line%i\' % index,\n                            value=item[0] == \'+\')\n\n        diff = TABLE(*[TR(TD(gen_data(i,item)),\n                          TD(item[0]),\n                          TD(leading(item[2:]),\n                          TT(item[2:].rstrip())), _class=getclass(item))\n                       for (i, item) in enumerate(d) if item[0] != \'?\'])\n\n    return dict(diff=diff, filename=filename)\n\n\ndef edit_language():\n    """ Edit language file """\n\n    filename = \'/\'.join(request.args)\n\n    from gluon.languages import read_dict, write_dict\n    strings = read_dict(apath(filename, r=request))\n    keys = sorted(strings.keys(),lambda x,y: cmp(x.lower(), y.lower()))\n    rows = []\n    rows.append(H2(T(\'Original/Translation\')))\n\n    for key in keys:\n        name = md5_hash(key)\n        if key==strings[key]:\n            _class=\'untranslated\'\n        else:\n            _class=\'translated\'\n        if len(key) <= 40:\n            elem = INPUT(_type=\'text\', _name=name,value=strings[key],\n                         _size=70,_class=_class)\n        else:\n            elem = TEXTAREA(_name=name, value=strings[key], _cols=70, \n                            _rows=5, _class=_class)\n\n        # Making the short circuit compatible with <= python2.4\n        k = (strings[key] != key) and key or B(key)\n\n        rows.append(P(k, BR(), elem, TAG.BUTTON(T(\'delete\'),\n                            _onclick=\'return delkey("%s")\' % name), _id=name))\n\n    rows.append(INPUT(_type=\'submit\', _value=T(\'update\')))\n    form = FORM(*rows)\n    if form.accepts(request.vars, keepvalues=True):\n        strs = dict()\n        for key in keys:\n            name = md5_hash(key)\n            if form.vars[name]==chr(127): continue\n            strs[key] = form.vars[name]\n        write_dict(apath(filename, r=request), strs)\n        session.flash = T(\'file saved on %(time)s\', dict(time=time.ctime()))\n        redirect(URL(r=request,args=request.args))\n    return dict(app=request.args[0], filename=filename, form=form)\n\n\ndef about():\n    """ Read about info """\n\n    app = request.args[0]\n\n    # ## check if file is not there\n    about = open(apath(\'%s/ABOUT\' % app, r=request), \'r\').read()\n    license = open(apath(\'%s/LICENSE\' % app, r=request), \'r\').read()\n\n    return dict(app=app, about=WIKI(about), license=WIKI(license))\n\n\ndef design():\n    """ Application design handler """\n\n    app = request.args[0]\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    if request.vars.pluginfile!=None:\n        filename=os.path.basename(request.vars.pluginfile.filename)\n        if plugin_install(app, request.vars.pluginfile.file,\n                          request, filename):\n            session.flash = T(\'new plugin installed\')\n            redirect(URL(\'design\',args=app))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n\n\n    # If we have only pyc files it means that \n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = open(apath(\'%s/models/%s\' % (app, m), r=request), \'r\').read()\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = open(apath(\'%s/controllers/%s\' % (app, c), r=request), \'r\').read()\n        items = regex_expose.findall(data)\n        functions[c] = items\n    \n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = open(apath(\'%s/views/%s\' % (app, c), r=request), \'r\').read()\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n    \n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n    \n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n    \n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    cronfolder = apath(\'%s/cron\' % app, r=request)\n    if not os.path.exists(cronfolder): os.mkdir(cronfolder)\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab): open(crontab,\'w\').write(\'#crontab\')\n\n    plugins=[]\n    def filter_plugins(items,plugins):\n        plugins+=[item[7:].split(\'/\')[0].split(\'.\')[0] for item in items if item.startswith(\'plugin_\')]\n        plugins[:]=list(set(plugins))\n        plugins.sort()\n        return [item for item in items if not item.startswith(\'plugin_\')]\n    \n    return dict(app=app,\n                models=filter_plugins(models,plugins),\n                defines=defines,\n                controllers=filter_plugins(controllers,plugins),\n                functions=functions,\n                views=filter_plugins(views,plugins),\n                modules=filter_plugins(modules,plugins),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics,plugins),\n                languages=languages,\n                crontab=crontab,\n                plugins=plugins)\n\ndef delete_plugin():\n    """ Object delete handler """\n\n    app=request.args(0)\n    plugin = request.args(1)\n    plugin_name=\'plugin_\'+plugin\n    if \'nodelete\' in request.vars:\n        redirect(URL(\'design\',args=app))\n    elif \'delete\' in request.vars:\n        try:\n            for folder in [\'models\',\'views\',\'controllers\',\'static\',\'modules\']:\n                path=os.path.join(apath(app,r=request),folder)\n                for item in os.listdir(path):\n                    if item.startswith(plugin_name): \n                        filename=os.path.join(path,item)\n                        if os.path.isdir(filename):\n                            shutil.rmtree(filename)\n                        else:                            \n                            os.unlink(filename)\n            session.flash = T(\'plugin "%(plugin)s" deleted\',\n                              dict(plugin=plugin))\n        except Exception:\n            session.flash = T(\'unable to delete file plugin "%(plugin)s"\',\n                              dict(plugin=plugin))\n        redirect(URL(\'design\',args=request.args(0)))\n    return dict(plugin=plugin)\n\ndef plugin():\n    """ Application design handler """\n\n    app = request.args(0)\n    plugin = request.args(1)\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    # If we have only pyc files it means that \n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = open(apath(\'%s/models/%s\' % (app, m), r=request), \'r\').read()\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = open(apath(\'%s/controllers/%s\' % (app, c), r=request), \'r\').read()\n        items = regex_expose.findall(data)\n        functions[c] = items\n    \n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = open(apath(\'%s/views/%s\' % (app, c), r=request), \'r\').read()\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n    \n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n    \n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n    \n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab): open(crontab,\'w\').write(\'#crontab\')\n    \n\n    def filter_plugins(items):\n        regex=re.compile(\'^plugin_\'+plugin+\'(/.*|\\..*)?$\')\n        return [item for item in items if regex.match(item)]\n    \n    return dict(app=app,\n                models=filter_plugins(models),\n                defines=defines,\n                controllers=filter_plugins(controllers),\n                functions=functions,\n                views=filter_plugins(views),\n                modules=filter_plugins(modules),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics),\n                languages=languages,\n                crontab=crontab)\n\n\ndef create_file():\n    """ Create files handler """\n\n    try:\n        path = apath(request.vars.location, r=request)\n        filename = re.sub(\'[^\\w./-]+\', \'_\', request.vars.filename)\n\n        if path[-11:] == \'/languages/\':\n            # Handle language files\n            if len(filename) == 0:\n                raise SyntaxError\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n            app = path.split(\'/\')[-3]\n            path=os.path.join(apath(app, r=request),\'languages\',filename)\n            if not os.path.exists(path):\n                open(path,\'w\').write(\'\')\n            findT(apath(app, r=request), filename[:-3])\n            session.flash = T(\'language file "%(filename)s" created/updated\',\n                              dict(filename=filename))\n            redirect(request.vars.sender)\n\n        elif path[-8:] == \'/models/\':\n            # Handle python models\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            fn = re.sub(\'\\W\', \'\', filename[:-3].lower())\n            text = \'# coding: utf8\\n\'\n\n        elif path[-13:] == \'/controllers/\':\n            # Handle python controllers\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n# %s\\ndef index(): return dict(message="hello from %s")\'\n            text = text % (T(\'try something like\'), filename)\n\n        elif path[-7:] == \'/views/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle template (html) views\n            if filename.find(\'.\')<0:\n                filename += \'.html\'\n            \n            if len(filename) == 5:\n                raise SyntaxError\n\n            msg = T(\'This is the %(filename)s template\',\n                    dict(filename=filename))\n            text = dedent("""\n                   {{extend \'layout.html\'}}\n                   <h1>%s</h1>\n                   {{=BEAUTIFY(response._vars)}}""" % msg)\n\n        elif path[-9:] == \'/modules/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle python module files\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = dedent("""\n                   #!/usr/bin/env python \n                   # coding: utf8 \n                   from gluon.html import *\n                   from gluon.http import *\n                   from gluon.validators import *\n                   from gluon.sqlhtml import *\n                   # request, response, session, cache, T, db(s) \n                   # must be passed and cannot be imported!""")\n\n        elif path[-8:] == \'/static/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            text = \'\'\n        else:\n            redirect(request.vars.sender)\n\n        full_filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(full_filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        if os.path.exists(full_filename):\n            raise SyntaxError\n\n        open(full_filename, \'w\').write(text)\n        session.flash = T(\'file "%(filename)s" created\',\n                          dict(filename=full_filename[len(path):]))\n        redirect(URL(\'edit\',\n                 args=[os.path.join(request.vars.location, filename)]))\n    except Exception, e:\n        if not isinstance(e,HTTP):\n            session.flash = T(\'cannot create file\')\n\n    redirect(request.vars.sender)\n\n\ndef upload_file():\n    """ File uploading handler """\n\n    try:\n        path = apath(request.vars.location, r=request)\n\n        if request.vars.filename:\n            filename = re.sub(\'[^\\w\\./]+\', \'_\', request.vars.filename)\n        else:\n            filename = os.path.split(request.vars.file.filename)[-1]\n\n        if path[-8:] == \'/models/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-9:] == \'/modules/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-13:] == \'/controllers/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-7:] == \'/views/\' and not filename[-5:] == \'.html\':\n            filename += \'.html\'\n\n        if path[-11:] == \'/languages/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        open(filename, \'wb\').write(request.vars.file.file.read())\n        session.flash = T(\'file "%(filename)s" uploaded\',\n                          dict(filename=filename[len(path):]))\n    except Exception:\n        session.flash = T(\'cannot upload file "%(filename)s"\',\n                          dict(filename[len(path):]))\n\n    redirect(request.vars.sender)\n\n\ndef errors():\n    """ Error handler """\n\n    app = request.args[0]\n\n    for item in request.vars:\n        if item[:7] == \'delete_\':\n            os.unlink(apath(\'%s/errors/%s\' % (app, item[7:]), r=request))\n\n    func = lambda p: os.stat(apath(\'%s/errors/%s\' % (app, p), r=request)).st_mtime\n    tickets = sorted(listdir(apath(\'%s/errors/\' % app, r=request), \'^\\w.*\'),\n                     key=func,\n                     reverse=True)\n\n    return dict(app=app, tickets=tickets)\n\n\ndef make_link(path):\n    """ Create a link from a path """\n    tryFile = path.replace(\'\\\\\', \'/\')\n\n    if os.path.isabs(tryFile) and os.path.isfile(tryFile):\n        (folder, filename) = os.path.split(tryFile)\n        (base, ext) = os.path.splitext(filename)\n        app = request.args[0]\n        \n        editable = {\'controllers\': \'.py\', \'models\': \'.py\', \'views\': \'.html\'}\n        for key in editable.keys():\n            check_extension = folder.endswith("%s/%s" % (app,key))\n            if ext.lower() == editable[key] and check_extension:\n                return A(\'"\' + tryFile + \'"\',\n                         _href=URL(r=request,\n                         f=\'edit/%s/%s/%s\' % (app, key, filename))).xml()\n    return \'\'\n\n\ndef make_links(traceback):\n    """ Make links using the given traceback """\n\n    lwords = traceback.split(\'"\')\n\n    # Making the short circuit compatible with <= python2.4\n    result = (len(lwords) != 0) and lwords[0] or \'\'\n\n    i = 1\n\n    while i < len(lwords):\n        link = make_link(lwords[i])\n\n        if link == \'\':\n            result += \'"\' + lwords[i]\n        else:\n            result += link\n\n            if i + 1 < len(lwords):\n                result += lwords[i + 1]\n                i = i + 1\n\n        i = i + 1\n\n    return result\n\n\nclass TRACEBACK(object):\n    """ Generate the traceback """\n\n    def __init__(self, text):\n        """ TRACEBACK constructor """\n\n        self.s = make_links(CODE(text).xml())\n\n    def xml(self):\n        """ Returns the xml """\n\n        return self.s\n\n\ndef ticket():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = request.args[0]\n    ticket = request.args[1]\n    e = RestrictedError()\n    e.load(request, app, ticket)\n\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer)\n\n\ndef update_languages():\n    """ Update available languages """\n\n    app = request.args[0]\n    update_all_languages(apath(app, r=request))\n    session.flash = T(\'Language files (static strings) updated\')\n    redirect(URL(\'design\',args=app))\n\ndef twitter():\n    session.forget()\n    session._unlock(response)\n    import gluon.tools\n    import gluon.contrib.simplejson as sj\n    try:\n        page = gluon.tools.fetch(\'http://twitter.com/web2py?format=json\')\n        return sj.loads(page)[\'#timeline\']\n    except Exception, e:\n        return DIV(T(\'Unable to download because\'),PRE(str(e)))\n\n\nresponse._vars=response._caller(ticket)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__getslice__'
p11
S"<method-wrapper '__getslice__' of exceptions.IOError object>"
p12
sS'__str__'
p13
S"<method-wrapper '__str__' of exceptions.IOError object>"
p14
sS'__reduce__'
p15
S'<built-in method __reduce__ of exceptions.IOError object>'
p16
sS'__dict__'
p17
S'{}'
p18
sS'__sizeof__'
p19
S'<built-in method __sizeof__ of exceptions.IOError object>'
p20
sS'__init__'
p21
S"<method-wrapper '__init__' of exceptions.IOError object>"
p22
sS'__setattr__'
p23
S"<method-wrapper '__setattr__' of exceptions.IOError object>"
p24
sS'__reduce_ex__'
p25
S'<built-in method __reduce_ex__ of exceptions.IOError object>'
p26
sS'__new__'
p27
S'<built-in method __new__ of type object>'
p28
sS'errno'
p29
S'2'
sS'__format__'
p30
S'<built-in method __format__ of exceptions.IOError object>'
p31
sS'__class__'
p32
S"<type 'exceptions.IOError'>"
p33
sS'filename'
p34
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/ad...-26.00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4'"
p35
sS'__doc__'
p36
S"'I/O operation failed.'"
p37
sS'__getitem__'
p38
S"<method-wrapper '__getitem__' of exceptions.IOError object>"
p39
sS'__setstate__'
p40
S'<built-in method __setstate__ of exceptions.IOError object>'
p41
sS'__getattribute__'
p42
S"<method-wrapper '__getattribute__' of exceptions.IOError object>"
p43
sS'args'
p44
S"(2, 'No such file or directory')"
p45
sS'__subclasshook__'
p46
S'<built-in method __subclasshook__ of type object>'
p47
sS'__unicode__'
p48
S'<built-in method __unicode__ of exceptions.IOError object>'
p49
sS'strerror'
p50
S"'No such file or directory'"
p51
sS'__delattr__'
p52
S"<method-wrapper '__delattr__' of exceptions.IOError object>"
p53
sS'__repr__'
p54
S"<method-wrapper '__repr__' of exceptions.IOError object>"
p55
sS'__hash__'
p56
S"<method-wrapper '__hash__' of exceptions.IOError object>"
p57
ssS'evalue'
p58
S"[Errno 2] No such file or directory: '/home/j3nnn1/git/pyj3nnn1/web2py/applications/admin/../blog/errors/127.0.0.1.2010-10-26.00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4'"
p59
sS'request'
p60
(dp61
S'function'
p62
S"'ticket'"
p63
sS'body'
p64
S'<cStringIO.StringO object>'
p65
sS'wsgi'
p66
S"<Storage {'start_response': <function <lambda> a...>, 'HTTP_ACCEPT_ENCODING': 'gzip,deflate,sdch'}}>"
p67
sS'extension'
p68
S"'html'"
p69
sS'vars'
p70
S'<Storage {}>'
p71
sS'cid'
p72
S'None'
p73
sS'url'
p74
S'<gluon.html.XML object>'
p75
sg44
S"['blog', '127.0.0.1.2010-10-26.00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4']"
p76
sS'controller'
p77
S"'default'"
p78
sS'cookies'
p79
S"<SimpleCookie: session_id_admin='127-0-0-1-b25c1...'127-0-0-1-ea4432c3-9b76-46ec-bae7-e8d54ff22acf'>"
p80
sS'application'
p81
S"'admin'"
p82
sS'ajax'
p83
S'False'
p84
sS'client'
p85
S"'127.0.0.1'"
p86
sS'env'
p87
S"<Storage {'http_user_agent': 'Mozilla/5.0 (X11; ....00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4'}>"
p88
sS'raw_args'
p89
S"'blog/127.0.0.1.2010-10-26.00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4'"
p90
sS'get_vars'
p91
S'<Storage {}>'
p92
sS'folder'
p93
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/admin/'"
p94
sS'now'
p95
S'datetime.datetime(2010, 10, 26, 0, 51, 10, 499403)'
p96
sS'post_vars'
p97
S'<Storage {}>'
p98
ssS'frames'
p99
(lp100
(dp101
S'file'
p102
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py'
p103
sS'dump'
p104
(dp105
S'environment'
p106
S"{'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CHECK_VERSION': True, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}"
p107
sS'ccode'
p108
S'<code object <module> at 0x9b25ad0, file "/home/...plications/admin/controllers/default.py", line 3>'
p109
ssS'lnum'
p110
I188
sS'lines'
p111
(dp112
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p113
sI183
S'        if type(code) == types.CodeType:'
p114
sI184
S'            ccode = code'
p115
sI185
S'        else:'
p116
sI186
S'            ccode = compile2(code,layer)'
p117
sI187
S''
sI188
S'        exec ccode in environment'
p118
sI189
S'    except HTTP:'
p119
sI190
S'        raise'
p120
sI191
S'    except Exception:'
p121
ssS'call'
p122
S"(code='# coding: utf8 \\n\\nfrom gluon.admin import *\\nfrom ...r(e)))\\n\\n\\nresponse._vars=response._caller(ticket)\\n', environment={'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CHECK_VERSION': True, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}, layer='/home/j3nnn1/git/pyj3nnn1/web2py/applications/admin/controllers/default.py')"
p123
sS'func'
p124
S'restricted'
p125
sa(dp126
g102
S'/home/j3nnn1/git/pyj3nnn1/web2py/applications/admin/controllers/default.py'
p127
sg104
(dp128
sg110
I1051
sg111
(dp129
I1040
S'    session.forget()'
p130
sI1041
S'    session._unlock(response)'
p131
sI1042
S'    import gluon.tools'
p132
sI1043
S'    import gluon.contrib.simplejson as sj'
p133
sI1044
S'    try:'
p134
sI1045
S"        page = gluon.tools.fetch('http://twitter.com/web2py?format=json')"
p135
sI1046
S"        return sj.loads(page)['#timeline']"
p136
sI1047
S'    except Exception, e:'
p137
sI1048
S"        return DIV(T('Unable to download because'),PRE(str(e)))"
p138
sI1049
S''
ssg122
S'()'
p139
sg124
S'<module>'
p140
sa(dp141
g102
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/globals.py'
p142
sg104
(dp143
S'self'
p144
S'undefined'
p145
sS'f'
S'<function ticket>'
p146
ssg110
I96
sg111
(dp147
I96
S'        self._caller = lambda f: f()'
p148
sI97
S'        self._view_environment = None'
p149
sI98
S'        self._custom_commit = None'
p150
sI99
S'        self._custom_rollback = None'
p151
sI100
S''
sI91
S"        self.flash = ''           # used by the default view layout"
p152
sI92
S'        self.meta = Storage()     # used by web2py_ajax.html'
p153
sI93
S'        self.menu = []            # used by the default view layout'
p154
sI94
S'        self.files = []           # used by web2py_ajax.html'
p155
sI95
S'        self._vars = None'
p156
ssg122
S'(f=<function ticket>)'
p157
sg124
S'<lambda>'
p158
sa(dp159
g102
S'/home/j3nnn1/git/pyj3nnn1/web2py/applications/admin/controllers/default.py'
p160
sg104
(dp161
S'global request'
p162
S"<Storage {'function': 'ticket', 'body': <cString..., 0, 51, 10, 499403), 'post_vars': <Storage {}>}>"
p163
sS'app'
p164
S"'blog'"
p165
sS'e'
S'<gluon.restricted.RestrictedError instance>'
p166
sS'ticket'
p167
S"'127.0.0.1.2010-10-26.00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4'"
p168
sS'e.load'
p169
S'<bound method RestrictedError.load of <gluon.restricted.RestrictedError instance>>'
p170
ssg110
I1020
sg111
(dp171
I1024
S'                output=e.output,'
p172
sI1015
S"        redirect(URL('site'))"
p173
sI1016
S''
sI1017
S'    app = request.args[0]'
p174
sI1018
S'    ticket = request.args[1]'
p175
sI1019
S'    e = RestrictedError()'
p176
sI1020
S'    e.load(request, app, ticket)'
p177
sI1021
S''
sI1022
S'    return dict(app=app,'
p178
sI1023
S'                ticket=ticket,'
p179
ssg122
S'()'
p180
sg124
S'ticket'
p181
sa(dp182
g102
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py'
p183
sg104
(dp184
S'ticket_storage.load'
p185
S"<bound method TicketStorage.load of <Storage {'tablename': 'web2py_ticket', 'db': None}>>"
p186
sS'd'
g145
sS'app'
p187
S"'blog'"
p188
sS'request'
p189
S"<Storage {'function': 'ticket', 'body': <cString..., 0, 51, 10, 499403), 'post_vars': <Storage {}>}>"
p190
sS'ticket_storage'
p191
S"<Storage {'tablename': 'web2py_ticket', 'db': None}>"
p192
sS'ticket_id'
p193
S"'127.0.0.1.2010-10-26.00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4'"
p194
ssg110
I160
sg111
(dp195
I160
S'        d = ticket_storage.load(request, app, ticket_id)'
p196
sI161
S''
sI162
S"        self.layer = d['layer']"
p197
sI163
S"        self.code = d['code']"
p198
sI164
S"        self.output = d['output']"
p199
sI155
S'    def load(self, request, app, ticket_id):'
p200
sI156
S'        """'
p201
sI157
S'        loads a logged exception.'
p202
sI158
S'        """'
p203
sI159
S'        ticket_storage = TicketStorage(db=request.tickets_db)'
p204
ssg122
S"(self=<gluon.restricted.RestrictedError instance>, request=<Storage {'function': 'ticket', 'body': <cString..., 0, 51, 10, 499403), 'post_vars': <Storage {}>}>, app='blog', ticket_id='127.0.0.1.2010-10-26.00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4')"
p205
sg124
S'load'
p206
sa(dp207
g102
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py'
p208
sg104
(dp209
S'self'
p210
S"<Storage {'tablename': 'web2py_ticket', 'db': None}>"
p211
sS'request'
p212
S"<Storage {'function': 'ticket', 'body': <cString..., 0, 51, 10, 499403), 'post_vars': <Storage {}>}>"
p213
sS'self._error_file'
p214
S"<bound method TicketStorage._error_file of <Storage {'tablename': 'web2py_ticket', 'db': None}>>"
p215
sS'ticket_id'
p216
S"'127.0.0.1.2010-10-26.00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4'"
p217
sS'global cPickle'
p218
S"<module 'cPickle' (built-in)>"
p219
sS'app'
p220
S"'blog'"
p221
sS'cPickle.load'
p222
S'<built-in function load>'
p223
ssg110
I88
sg111
(dp224
I83
S'        request,'
p225
sI84
S'        app,'
p226
sI85
S'        ticket_id,'
p227
sI86
S'        ):'
p228
sI87
S'        if not self.db:'
p229
sI88
S"            return cPickle.load(self._error_file(request, ticket_id, 'rb', app))"
p230
sI89
S'        table=self._get_table(self.db, self.tablename, app)'
p231
sI90
S'        rows = self.db(table.ticket_id == ticket_id).select()'
p232
sI91
S'        if rows:'
p233
sI92
S'            return cPickle.loads(rows[0].ticket_data)'
p234
ssg122
S"(self=<Storage {'tablename': 'web2py_ticket', 'db': None}>, request=<Storage {'function': 'ticket', 'body': <cString..., 0, 51, 10, 499403), 'post_vars': <Storage {}>}>, app='blog', ticket_id='127.0.0.1.2010-10-26.00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4')"
p235
sg124
g206
sa(dp236
g102
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py'
p237
sg104
(dp238
S'errors_folder'
p239
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/admin/../blog/errors'"
p240
sS'builtinopen'
p241
S'<built-in function open>'
p242
sS'global os'
p243
S"<module 'os' from '/usr/lib/python2.6/os.pyc'>"
p244
sS'ticket_id'
p245
S"'127.0.0.1.2010-10-26.00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4'"
p246
sS'os.path.join'
p247
S'<function join>'
p248
sS'os.path'
p249
S"<module 'posixpath' from '/usr/lib/python2.6/posixpath.pyc'>"
p250
sS'mode'
p251
S"'rb'"
p252
ssg110
I65
sg111
(dp253
I64
S"        errors_folder = os.path.join(root, 'errors') #.replace('\\\\', '/')"
p254
sI65
S'        return open(os.path.join(errors_folder, ticket_id), mode)'
p255
sI66
S''
sI67
S'    def _get_table(self, db, tablename, app):'
p256
sI68
S"        tablename = tablename + '_' + app"
p257
sI69
S'        table = db.get(tablename, None)'
p258
sI60
S'    def _error_file(self, request, ticket_id, mode, app=None):'
p259
sI61
S'        root = request.folder'
p260
sI62
S'        if app:'
p261
sI63
S"            root = os.path.join(os.path.join(root, '..'), app)"
p262
ssg122
S"(self=<Storage {'tablename': 'web2py_ticket', 'db': None}>, request=<Storage {'function': 'ticket', 'body': <cString..., 0, 51, 10, 499403), 'post_vars': <Storage {}>}>, ticket_id='127.0.0.1.2010-10-26.00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4', mode='rb', app='blog')"
p263
sg124
S'_error_file'
p264
sasS'pyver'
p265
S'Python 2.6.6: /usr/bin/python'
p266
sS'session'
p267
(dp268
S'check_version'
p269
g84
sS'flash'
p270
S'None'
p271
sS'pam_user'
p272
S'None'
p273
sS'authorized'
p274
S'True'
p275
sS'last_time'
p276
S'1288070470.5099461'
p277
ssS'etype'
p278
S"<type 'exceptions.IOError'>"
p279
sS'date'
p280
S'Tue Oct 26 00:51:10 2010'
p281
sS'response'
p282
(dp283
S'status'
p284
S'200'
p285
sg64
S'<cStringIO.StringO object>'
p286
sg79
S"<SimpleCookie: session_id_admin='127-0-0-1-b25c1605-749c-49a2-a28f-b6d13bb4689c'>"
p287
sS'_vars'
p288
S'None'
p289
sS'title'
p290
S"'ticket blog/127.0.0.1.2010-10-26.00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4'"
p291
sS'session_file'
p292
S"<open file '/home/j3nnn1/git/pyj3nnn1/web2py/app...25c1605-749c-49a2-a28f-b6d13bb4689c', mode 'rb+'>"
p293
sS'flash'
p294
S"''"
p295
sS'_custom_rollback'
p296
S'None'
p297
sS'session_id'
p298
S"'127-0-0-1-b25c1605-749c-49a2-a28f-b6d13bb4689c'"
p299
sS'headers'
p300
S"<Storage {'Expires': 'mar, 26 oct 2010 05:21:10 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p301
sS'meta'
p302
S'<Storage {}>'
p303
sS'session_filename'
p304
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/ad...ns/127-0-0-1-b25c1605-749c-49a2-a28f-b6d13bb4689c'"
p305
sS'postprocessing'
p306
S'[]'
p307
sS'menu'
p308
S"[(<lazyT 'site'>, False, <gluon.html.XML object>), (<lazyT 'edit'>, False, <gluon.html.XML object>), (<lazyT 'about'>, False, <gluon.html.XML object>), (<lazyT 'errors'>, False, <gluon.html.XML object>), (<lazyT 'logout'>, False, <gluon.html.XML object>), (<lazyT 'help'>, False, <gluon.html.XML object>)]"
p309
sS'_view_environment'
p310
S"{'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CHECK_VERSION': True, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, ...}"
p311
sS'subtitle'
p312
S"'admin'"
p313
sS'session_id_name'
p314
S"'session_id_admin'"
p315
sS'_custom_commit'
p316
S'None'
p317
sS'_caller'
p318
S'<function <lambda>>'
p319
sS'files'
p320
S'[]'
p321
sS'view'
p322
S"'default/ticket.html'"
p323
ssS'locals'
p324
(dp325
S'errors_folder'
p326
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/admin/../blog/errors'"
p327
sS'app'
p328
S"'blog'"
p329
sg60
S"<Storage {'function': 'ticket', 'body': <cString..., 0, 51, 10, 499403), 'post_vars': <Storage {}>}>"
p330
sS'mode'
p331
S"'rb'"
p332
sS'root'
p333
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/admin/../blog'"
p334
sS'self'
p335
S"<Storage {'tablename': 'web2py_ticket', 'db': None}>"
p336
sS'ticket_id'
p337
S"'127.0.0.1.2010-10-26.00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4'"
p338
sssS'traceback'
p339
S'Traceback (most recent call last):\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/applications/admin/controllers/default.py", line 1051, in <module>\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/applications/admin/controllers/default.py", line 1020, in ticket\n    e.load(request, app, ticket)\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py", line 160, in load\n    d = ticket_storage.load(request, app, ticket_id)\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py", line 88, in load\n    return cPickle.load(self._error_file(request, ticket_id, \'rb\', app))\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py", line 65, in _error_file\n    return open(os.path.join(errors_folder, ticket_id), mode)\nIOError: [Errno 2] No such file or directory: \'/home/j3nnn1/git/pyj3nnn1/web2py/applications/admin/../blog/errors/127.0.0.1.2010-10-26.00-47-59.61b0a176-f8fb-471b-8d3e-70c6f1bacfa4\'\n'
p340
s.