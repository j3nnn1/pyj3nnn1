(dp1
S'output'
p2
S''
sS'layer'
p3
S'/media/misperoles/git/pyj3nnn1/web2py/applications/admin/controllers/default.py'
p4
sS'code'
p5
S'# coding: utf8\n\nfrom gluon.admin import *\nfrom gluon.fileutils import abspath, read_file, write_file\nfrom glob import glob\nimport shutil\nimport platform\n\nif DEMO_MODE and request.function in [\'change_password\',\'pack\',\'pack_plugin\',\'upgrade_web2py\',\'uninstall\',\'cleanup\',\'compile_app\',\'remove_compiled_app\',\'delete\',\'delete_plugin\',\'create_file\',\'upload_file\',\'update_languages\',\'reload_routes\']:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\nif not is_manager() and request.function in [\'change_password\',\'upgrade_web2py\']:\n    session.flash = T(\'disabled in multi user mode\')\n    redirect(URL(\'site\'))\n\nif FILTER_APPS and request.args(0) and not request.args(0) in FILTER_APPS:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\ndef safe_open(a,b):\n    if DEMO_MODE and \'w\' in b:\n        class tmp:\n            def write(self,data): pass\n        return tmp()\n    return open(a,b)\n\ndef safe_read(a, b=\'r\'):\n    safe_file = safe_open(a, b)\n    try:\n        return safe_file.read()\n    finally:\n        safe_file.close()\n\ndef safe_write(a, value, b=\'w\'):\n    safe_file = safe_open(a, b)\n    try:\n        safe_file.write(value)\n    finally:\n        safe_file.close()\n\ndef get_app(name=None):\n    app = name or request.args(0)\n    if app and (not MULTI_USER_MODE or db(db.app.name==app)(db.app.owner==auth.user.id).count()):\n        return app\n    session.flash = \'App does not exist or your are not authorized\'\n    redirect(URL(\'site\'))\n\ndef index():\n    """ Index handler """\n\n    send = request.vars.send\n    if DEMO_MODE:\n        session.authorized = True\n        session.last_time = t0\n    if not send:\n        send = URL(\'site\')\n    if session.authorized:\n        redirect(send)\n    elif request.vars.password:\n        if verify_password(request.vars.password):\n            session.authorized = True\n            login_record(True)\n\n            if CHECK_VERSION:\n                session.check_version = True\n            else:\n                session.check_version = False\n\n            session.last_time = t0\n            if isinstance(send, list):  # ## why does this happen?\n                send = str(send[0])\n\n            redirect(send)\n        else:\n            times_denied = login_record(False)\n            if times_denied >= allowed_number_of_attempts:\n                response.flash = \\\n                    T(\'admin disabled because too many invalid login attempts\')\n            elif times_denied == allowed_number_of_attempts - 1:\n                response.flash = \\\n                    T(\'You have one more login attempt before you are locked out\')\n            else:\n                response.flash = T(\'invalid password.\')\n    return dict(send=send)\n\n\ndef check_version():\n    """ Checks if web2py is up to date """\n\n    session.forget()\n    session._unlock(response)\n\n    new_version, version_number = check_new_version(request.env.web2py_version,\n                                    WEB2PY_VERSION_URL)\n\n    if new_version == -1:\n        return A(T(\'Unable to check for upgrades\'), _href=WEB2PY_URL)\n    elif new_version != True:\n        return A(T(\'web2py is up to date\'), _href=WEB2PY_URL)\n    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):\n        return SPAN(\'You should upgrade to version %s\' % version_number)\n    else:\n        return sp_button(URL(\'upgrade_web2py\'), T(\'upgrade now\')) \\\n          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)\n\n\ndef logout():\n    """ Logout handler """\n    session.authorized = None\n    if MULTI_USER_MODE:\n        redirect(URL(\'user/logout\'))\n    redirect(URL(\'index\'))\n\n\ndef change_password():\n\n    if session.pam_user:\n        session.flash = T(\'PAM authenticated user, cannot change password here\')\n        redirect(URL(\'site\'))\n    form=SQLFORM.factory(Field(\'current_admin_password\',\'password\'),\n                         Field(\'new_admin_password\',\'password\',requires=IS_STRONG()),\n                         Field(\'new_admin_password_again\',\'password\'))\n    if form.accepts(request.vars):\n        if not verify_password(request.vars.current_admin_password):\n            form.errors.current_admin_password = T(\'invalid password\')\n        elif form.vars.new_admin_password != form.vars.new_admin_password_again:\n            form.errors.new_admin_password_again = T(\'no match\')\n        else:\n            path = abspath(\'parameters_%s.py\' % request.env.server_port)\n            safe_write(path, \'password="%s"\' % CRYPT()(request.vars.new_admin_password)[0])\n            session.flash = T(\'password changed\')\n            redirect(URL(\'site\'))\n    return dict(form=form)\n\ndef site():\n    """ Site handler """\n\n    myversion = request.env.web2py_version\n\n    # Shortcut to make the elif statements more legible\n    file_or_appurl = \'file\' in request.vars or \'appurl\' in request.vars\n\n    if DEMO_MODE:\n        pass\n\n    elif request.vars.filename and not \'file\' in request.vars:\n        # create a new application\n        appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n        if app_create(appname, request):\n            if MULTI_USER_MODE:\n                db.app.insert(name=appname,owner=auth.user.id)\n            session.flash = T(\'new application "%s" created\', appname)\n            redirect(URL(\'design\',args=appname))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s" (it may exist already)\', request.vars.filename)\n        redirect(URL(r=request))\n\n    elif file_or_appurl and not request.vars.filename:\n        # can\'t do anything without an app name\n        msg = \'you must specify a name for the uploaded application\'\n        response.flash = T(msg)\n\n    elif file_or_appurl and request.vars.filename:\n        # fetch an application via URL or file upload\n        f = None\n        if request.vars.appurl is not \'\':\n            try:\n                f = urllib.urlopen(request.vars.appurl)\n            except Exception, e:\n                session.flash = DIV(T(\'Unable to download app because:\'),PRE(str(e)))\n                redirect(URL(r=request))\n            fname = request.vars.appurl\n        elif request.vars.file is not \'\':\n            f = request.vars.file.file\n            fname = request.vars.file.filename\n\n        if f:\n            appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n            installed = app_install(appname, f, request, fname,\n                                    overwrite=request.vars.overwrite_check)\n        if f and installed:\n            msg = \'application %(appname)s installed with md5sum: %(digest)s\'\n            session.flash = T(msg, dict(appname=appname,\n                                        digest=md5_hash(installed)))\n        elif f and request.vars.overwrite_check:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        else:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        redirect(URL(r=request))\n\n    regex = re.compile(\'^\\w+$\')\n\n    if is_manager():\n        apps = [f for f in os.listdir(apath(r=request)) if regex.match(f)]\n    else:\n        apps = [f.name for f in db(db.app.owner==auth.user_id).select()]\n\n    if FILTER_APPS:\n        apps = [f for f in apps if f in FILTER_APPS]\n\n    apps = sorted(apps,lambda a,b:cmp(a.upper(),b.upper()))\n\n    return dict(app=None, apps=apps, myversion=myversion)\n\n\ndef pack():\n    app = get_app()\n\n    if len(request.args) == 1:\n        fname = \'web2py.app.%s.w2p\' % app\n        filename = app_pack(app, request)\n    else:\n        fname = \'web2py.app.%s.compiled.w2p\' % app\n        filename = app_pack_compiled(app, request)\n\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'site\'))\n\ndef pack_plugin():\n    app = get_app()\n    if len(request.args) == 2:\n        fname = \'web2py.plugin.%s.w2p\' % request.args[1]\n        filename = plugin_pack(app, request.args[1], request)\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'plugin\',args=request.args))\n\ndef upgrade_web2py():\n    if \'upgrade\' in request.vars:\n        (success, error) = upgrade(request)\n        if success:\n            session.flash = T(\'web2py upgraded; please restart it\')\n        else:\n            session.flash = T(\'unable to upgrade because "%s"\', error)\n        redirect(URL(\'site\'))\n    elif \'noupgrade\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict()\n\ndef uninstall():\n    app = get_app()\n    if \'delete\' in request.vars:\n        if MULTI_USER_MODE:\n            if is_manager() and db(db.app.name==app).delete():\n                pass\n            elif db(db.app.name==app)(db.app.owner==auth.user.id).delete():\n                pass\n            else:\n                session.flash = T(\'no permission to uninstall "%s"\', app)\n                redirect(URL(\'site\'))\n        if app_uninstall(app, request):            \n            session.flash = T(\'application "%s" uninstalled\', app)\n        else:\n            session.flash = T(\'unable to uninstall "%s"\', app)\n        redirect(URL(\'site\'))\n    elif \'nodelete\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict(app=app)\n\n\ndef cleanup():\n    app = get_app()\n    clean = app_cleanup(app, request)\n    if not clean:\n        session.flash = T("some files could not be removed")\n    else:\n        session.flash = T(\'cache, errors and sessions cleaned\')\n\n    redirect(URL(\'site\'))\n\n\ndef compile_app():\n    app = get_app()\n    c = app_compile(app, request)\n    if not c:\n        session.flash = T(\'application compiled\')\n    else:\n        session.flash = DIV(T(\'Cannot compile: there are errors in your app:\'),\n                              CODE(c))\n    redirect(URL(\'site\'))\n\n\ndef remove_compiled_app():\n    """ Remove the compiled application """\n    app = get_app()\n    remove_compiled_application(apath(app, r=request))\n    session.flash = T(\'compiled application removed\')\n    redirect(URL(\'site\'))\n\ndef delete():\n    """ Object delete handler """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    sender = request.vars.sender\n\n    if isinstance(sender, list):  # ## fix a problem with Vista\n        sender = sender[0]\n\n    if \'nodelete\' in request.vars:\n        redirect(URL(sender))\n    elif \'delete\' in request.vars:\n        try:\n            os.unlink(apath(filename, r=request))\n            session.flash = T(\'file "%(filename)s" deleted\',\n                              dict(filename=filename))\n        except Exception:\n            session.flash = T(\'unable to delete file "%(filename)s"\',\n                              dict(filename=filename))\n        redirect(URL(sender))\n    return dict(filename=filename, sender=sender)\n\ndef peek():\n    """ Visualize object code """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    try:\n        data = safe_read(apath(filename, r=request)).replace(\'\\r\',\'\')\n    except IOError:\n        session.flash = T(\'file does not exist\')\n        redirect(URL(\'site\'))\n\n    extension = filename[filename.rfind(\'.\') + 1:].lower()\n\n    return dict(app=request.args[0],\n                filename=filename,\n                data=data,\n                extension=extension)\n\n\ndef test():\n    """ Execute controller tests """\n    app = get_app()\n    if len(request.args) > 1:\n        file = request.args[1]\n    else:\n        file = \'.*\\.py\'\n\n    controllers = listdir(apath(\'%s/controllers/\' % app, r=request), file + \'$\')\n\n    return dict(app=app, controllers=controllers)\n\ndef keepalive():\n    return \'\'\n\ndef search():\n    keywords=request.vars.keywords or \'\'\n    app = get_app()\n    def match(filename,keywords):\n        filename=os.path.join(apath(app, r=request),filename)\n        if keywords in read_file(filename,\'rb\'):\n            return True\n        return False\n    path = apath(request.args[0], r=request)\n    files1 = glob(os.path.join(path,\'*/*.py\'))\n    files2 = glob(os.path.join(path,\'*/*.html\'))\n    files3 = glob(os.path.join(path,\'*/*/*.html\'))\n    files=[x[len(path)+1:].replace(\'\\\\\',\'/\') for x in files1+files2+files3 if match(x,keywords)]\n    return response.json({\'files\':files})\n\ndef edit():\n    """ File edit handler """\n    # Load json only if it is ajax edited...\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    # Try to discover the file type\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n    elif filename[-5:] == \'.load\':\n        filetype = \'html\'\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'html\'\n\n    # ## check if file is not there\n\n    path = apath(filename, r=request)\n\n    if request.vars.revert and os.path.exists(path + \'.bak\'):\n        try:\n            data = safe_read(path + \'.bak\')\n            data1 = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                 return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        safe_write(path, data)\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n        safe_write(path + \'.bak\', data1)\n        response.flash = T(\'file "%s" of %s restored\', (filename, saved_on))\n    else:\n        try:\n            data = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n\n        if request.vars.file_hash and request.vars.file_hash != file_hash:\n            session.flash = T(\'file changed on disk\')\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path + \'.1\', data)\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'file changed on disk\')),\n                                      \'redirect\': URL(\'resolve\',\n                                                      args=request.args)})\n            else:\n                redirect(URL(\'resolve\', args=request.args))\n        elif request.vars.data:\n            safe_write(path + \'.bak\', data)\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path, data)\n            file_hash = md5_hash(data)\n            saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n            response.flash = T(\'file saved on %s\', saved_on)\n\n    data_or_revert = (request.vars.data or request.vars.revert)\n\n    # Check compile errors\n    highlight = None\n    if filetype == \'python\' and request.vars.data:\n        import _ast\n        try:\n            code = request.vars.data.rstrip().replace(\'\\r\\n\',\'\\n\')+\'\\n\'\n            compile(code, path, "exec", _ast.PyCF_ONLY_AST)\n        except Exception, e:\n            start = sum([len(line)+1 for l, line\n                            in enumerate(request.vars.data.split("\\n"))\n                            if l < e.lineno-1])\n            if e.text and e.offset:\n                offset = e.offset - (len(e.text) - len(e.text.splitlines()[-1]))\n            else:\n                offset = 0\n            highlight = {\'start\': start, \'end\': start + offset + 1}\n            try:\n                ex_name = e.__class__.__name__\n            except:\n                ex_name = \'unknown exception!\'\n            response.flash = DIV(T(\'failed to compile file because:\'), BR(),\n                                 B(ex_name), T(\' at line %s\') % e.lineno,\n                                 offset and T(\' at char %s\') % offset or \'\',\n                                 PRE(str(e)))\n\n    if data_or_revert and request.args[1] == \'modules\':\n        # Lets try to reload the modules\n        try:\n            mopath = \'.\'.join(request.args[2:])[:-3]\n            exec \'import applications.%s.modules.%s\' % (request.args[0], mopath)\n            reload(sys.modules[\'applications.%s.modules.%s\'\n                    % (request.args[0], mopath)])\n        except Exception, e:\n            response.flash = DIV(T(\'failed to reload module because:\'),PRE(str(e)))\n\n    edit_controller = None\n    editviewlinks = None\n    view_link = None\n    if filetype == \'html\' and len(request.args) >= 3:\n        cfilename = os.path.join(request.args[0], \'controllers\',\n                                 request.args[2] + \'.py\')\n        if os.path.exists(apath(cfilename, r=request)):\n            edit_controller = URL(\'edit\', args=[cfilename])\n            view = request.args[3].replace(\'.html\',\'\')\n            view_link = URL(request.args[0],request.args[2],view)\n    elif filetype == \'python\' and request.args[1] == \'controllers\':\n        ## it\'s a controller file.\n        ## Create links to all of the associated view files.\n        app = get_app()\n        viewname = os.path.splitext(request.args[2])[0]\n        viewpath = os.path.join(app,\'views\',viewname)\n        aviewpath = apath(viewpath, r=request)\n        viewlist = []\n        if os.path.exists(aviewpath):\n            if os.path.isdir(aviewpath):\n                viewlist = glob(os.path.join(aviewpath,\'*.html\'))\n        elif os.path.exists(aviewpath+\'.html\'):\n            viewlist.append(aviewpath+\'.html\')\n        if len(viewlist):\n            editviewlinks = []\n            for v in viewlist:\n                vf = os.path.split(v)[-1]\n                vargs = "/".join([viewpath.replace(os.sep,"/"),vf])\n                editviewlinks.append(A(T(vf.split(".")[0]),\\\n                    _href=URL(\'edit\',args=[vargs])))\n\n    if len(request.args) > 2 and request.args[1] == \'controllers\':\n        controller = (request.args[2])[:-3]\n        functions = regex_expose.findall(data)\n    else:\n        (controller, functions) = (None, None)\n\n    if \'from_ajax\' in request.vars:\n        return response.json({\'file_hash\': file_hash, \'saved_on\': saved_on, \'functions\':functions, \'controller\': controller, \'application\': request.args[0], \'highlight\': highlight })\n    else:\n\n        editarea_preferences = {}\n        editarea_preferences[\'FONT_SIZE\'] = \'10\'\n        editarea_preferences[\'FULL_SCREEN\'] = \'false\'\n        editarea_preferences[\'ALLOW_TOGGLE\'] = \'true\'\n        editarea_preferences[\'REPLACE_TAB_BY_SPACES\'] = \'4\'\n        editarea_preferences[\'DISPLAY\'] = \'onload\'\n        for key in editarea_preferences:\n            if globals().has_key(key):\n                editarea_preferences[key]=globals()[key]\n        return dict(app=request.args[0],\n                    filename=filename,\n                    filetype=filetype,\n                    data=data,\n                    edit_controller=edit_controller,\n                    file_hash=file_hash,\n                    saved_on=saved_on,\n                    controller=controller,\n                    functions=functions,\n                    view_link=view_link,\n                    editarea_preferences=editarea_preferences,\n                    editviewlinks=editviewlinks)\n\ndef resolve():\n    """\n    """\n\n    filename = \'/\'.join(request.args)\n    # ## check if file is not there\n    path = apath(filename, r=request)\n    a = safe_read(path).split(\'\\n\')\n    try:\n        b = safe_read(path + \'.1\').split(\'\\n\')\n    except IOError:\n        session.flash = \'Other file, no longer there\'\n        redirect(URL(\'edit\', args=request.args))\n\n    d = difflib.ndiff(a, b)\n\n    def leading(line):\n        """  """\n\n        # TODO: we really need to comment this\n        z = \'\'\n        for (k, c) in enumerate(line):\n            if c == \' \':\n                z += \'&nbsp;\'\n            elif c == \' \\t\':\n                z += \'&nbsp;\'\n            elif k == 0 and c == \'?\':\n                pass\n            else:\n                break\n\n        return XML(z)\n\n    def getclass(item):\n        """ Determine item class """\n\n        if item[0] == \' \':\n            return \'normal\'\n        if item[0] == \'+\':\n            return \'plus\'\n        if item[0] == \'-\':\n            return \'minus\'\n\n    if request.vars:\n        c = \'\\n\'.join([item[2:].rstrip() for (i, item) in enumerate(d) if item[0] \\\n                           == \' \' or \'line%i\' % i in request.vars])\n        safe_write(path, c)\n        session.flash = \'files merged\'\n        redirect(URL(\'edit\', args=request.args))\n    else:\n        # Making the short circuit compatible with <= python2.4\n        gen_data = lambda index,item: not item[:1] in [\'+\',\'-\'] and "" \\\n                   or INPUT(_type=\'checkbox\',\n                            _name=\'line%i\' % index,\n                            value=item[0] == \'+\')\n\n        diff = TABLE(*[TR(TD(gen_data(i,item)),\n                          TD(item[0]),\n                          TD(leading(item[2:]),\n                          TT(item[2:].rstrip())), _class=getclass(item))\n                       for (i, item) in enumerate(d) if item[0] != \'?\'])\n\n    return dict(diff=diff, filename=filename)\n\n\ndef edit_language():\n    """ Edit language file """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    from gluon.languages import read_dict, write_dict\n    strings = read_dict(apath(filename, r=request))\n    keys = sorted(strings.keys(),lambda x,y: cmp(x.lower(), y.lower()))\n    rows = []\n    rows.append(H2(T(\'Original/Translation\')))\n\n    for key in keys:\n        name = md5_hash(key)\n        if key==strings[key]:\n            _class=\'untranslated\'\n        else:\n            _class=\'translated\'\n        if len(key) <= 40:\n            elem = INPUT(_type=\'text\', _name=name,value=strings[key],\n                         _size=70,_class=_class)\n        else:\n            elem = TEXTAREA(_name=name, value=strings[key], _cols=70,\n                            _rows=5, _class=_class)\n\n        # Making the short circuit compatible with <= python2.4\n        k = (strings[key] != key) and key or B(key)\n\n        rows.append(P(k, BR(), elem, TAG.BUTTON(T(\'delete\'),\n                            _onclick=\'return delkey("%s")\' % name), _id=name))\n\n    rows.append(INPUT(_type=\'submit\', _value=T(\'update\')))\n    form = FORM(*rows)\n    if form.accepts(request.vars, keepvalues=True):\n        strs = dict()\n        for key in keys:\n            name = md5_hash(key)\n            if form.vars[name]==chr(127): continue\n            strs[key] = form.vars[name]\n        write_dict(apath(filename, r=request), strs)\n        session.flash = T(\'file saved on %(time)s\', dict(time=time.ctime()))\n        redirect(URL(r=request,args=request.args))\n    return dict(app=request.args[0], filename=filename, form=form)\n\n\ndef about():\n    """ Read about info """\n    app = get_app()\n    # ## check if file is not there\n    about = safe_read(apath(\'%s/ABOUT\' % app, r=request))\n    license = safe_read(apath(\'%s/LICENSE\' % app, r=request))\n    return dict(app=app, about=MARKMIN(about), license=MARKMIN(license))\n\n\ndef design():\n    """ Application design handler """\n    app = get_app()\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    if request.vars.pluginfile!=None and not isinstance(request.vars.pluginfile,str):\n        filename=os.path.basename(request.vars.pluginfile.filename)\n        if plugin_install(app, request.vars.pluginfile.file,\n                          request, filename):\n            session.flash = T(\'new plugin installed\')\n            redirect(URL(\'design\',args=app))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n    elif isinstance(request.vars.pluginfile,str):\n        session.flash = T(\'plugin not specified\')\n        redirect(URL(r=request))\n\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+(\\.\\w+)+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views if not x.endswith(\'.bak\')]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    cronfolder = apath(\'%s/cron\' % app, r=request)\n    if not os.path.exists(cronfolder): os.mkdir(cronfolder)\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    plugins=[]\n    def filter_plugins(items,plugins):\n        plugins+=[item[7:].split(\'/\')[0].split(\'.\')[0] for item in items if item.startswith(\'plugin_\')]\n        plugins[:]=list(set(plugins))\n        plugins.sort()\n        return [item for item in items if not item.startswith(\'plugin_\')]\n\n    return dict(app=app,\n                models=filter_plugins(models,plugins),\n                defines=defines,\n                controllers=filter_plugins(controllers,plugins),\n                functions=functions,\n                views=filter_plugins(views,plugins),\n                modules=filter_plugins(modules,plugins),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics,plugins),\n                languages=languages,\n                crontab=crontab,\n                plugins=plugins)\n\ndef delete_plugin():\n    """ Object delete handler """\n    app=request.args(0)\n    plugin = request.args(1)\n    plugin_name=\'plugin_\'+plugin\n    if \'nodelete\' in request.vars:\n        redirect(URL(\'design\',args=app))\n    elif \'delete\' in request.vars:\n        try:\n            for folder in [\'models\',\'views\',\'controllers\',\'static\',\'modules\']:\n                path=os.path.join(apath(app,r=request),folder)\n                for item in os.listdir(path):\n                    if item.startswith(plugin_name):\n                        filename=os.path.join(path,item)\n                        if os.path.isdir(filename):\n                            shutil.rmtree(filename)\n                        else:\n                            os.unlink(filename)\n            session.flash = T(\'plugin "%(plugin)s" deleted\',\n                              dict(plugin=plugin))\n        except Exception:\n            session.flash = T(\'unable to delete file plugin "%(plugin)s"\',\n                              dict(plugin=plugin))\n        redirect(URL(\'design\',args=request.args(0)))\n    return dict(plugin=plugin)\n\ndef plugin():\n    """ Application design handler """\n    app = get_app()\n    plugin = request.args(1)\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    def filter_plugins(items):\n        regex=re.compile(\'^plugin_\'+plugin+\'(/.*|\\..*)?$\')\n        return [item for item in items if regex.match(item)]\n\n    return dict(app=app,\n                models=filter_plugins(models),\n                defines=defines,\n                controllers=filter_plugins(controllers),\n                functions=functions,\n                views=filter_plugins(views),\n                modules=filter_plugins(modules),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics),\n                languages=languages,\n                crontab=crontab)\n\n\ndef create_file():\n    """ Create files handler """\n    try:\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n        filename = re.sub(\'[^\\w./-]+\', \'_\', request.vars.filename)\n\n        if path[-11:] == \'/languages/\':\n            # Handle language files\n            if len(filename) == 0:\n                raise SyntaxError\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n            app = path.split(\'/\')[-3]\n            path=os.path.join(apath(app, r=request),\'languages\',filename)\n            if not os.path.exists(path):\n                safe_write(path, \'\')\n            findT(apath(app, r=request), filename[:-3])\n            session.flash = T(\'language file "%(filename)s" created/updated\',\n                              dict(filename=filename))\n            redirect(request.vars.sender)\n\n        elif path[-8:] == \'/models/\':\n            # Handle python models\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n\'\n\n        elif path[-13:] == \'/controllers/\':\n            # Handle python controllers\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n# %s\\ndef index(): return dict(message="hello from %s")\'\n            text = text % (T(\'try something like\'), filename)\n\n        elif path[-7:] == \'/views/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle template (html) views\n            if filename.find(\'.\')<0:\n                filename += \'.html\'\n            extension = filename.split(\'.\')[-1].lower()\n\n            if len(filename) == 5:\n                raise SyntaxError\n\n            msg = T(\'This is the %(filename)s template\',\n                    dict(filename=filename))            \n            if extension == \'html\':\n                text = dedent("""\n                   {{extend \'layout.html\'}}\n                   <h1>%s</h1>\n                   {{=BEAUTIFY(response._vars)}}""" % msg)\n            else:\n                generic = os.path.join(path,\'generic.\'+extension)\n                if os.path.exists(generic):\n                    text = read_file(generic)\n                else:\n                    text = \'\'\n                \n        elif path[-9:] == \'/modules/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle python module files\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = dedent("""\n                   #!/usr/bin/env python\n                   # coding: utf8\n                   from gluon import *\\n""")\n\n        elif path[-8:] == \'/static/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            text = \'\'\n        else:\n            redirect(request.vars.sender)\n\n        full_filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(full_filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        if os.path.exists(full_filename):\n            raise SyntaxError\n\n        safe_write(full_filename, text)\n        session.flash = T(\'file "%(filename)s" created\',\n                          dict(filename=full_filename[len(path):]))\n        redirect(URL(\'edit\',\n                 args=[os.path.join(request.vars.location, filename)]))\n    except Exception, e:\n        if not isinstance(e,HTTP):\n            session.flash = T(\'cannot create file\')\n\n    redirect(request.vars.sender)\n\n\ndef upload_file():\n    """ File uploading handler """\n\n    try:\n        filename = None\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n\n        if request.vars.filename:\n            filename = re.sub(\'[^\\w\\./]+\', \'_\', request.vars.filename)\n        else:\n            filename = os.path.split(request.vars.file.filename)[-1]\n\n        if path[-8:] == \'/models/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-9:] == \'/modules/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-13:] == \'/controllers/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-7:] == \'/views/\' and not filename[-5:] == \'.html\':\n            filename += \'.html\'\n\n        if path[-11:] == \'/languages/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        safe_write(filename, request.vars.file.file.read(), \'wb\')\n        session.flash = T(\'file "%(filename)s" uploaded\',\n                          dict(filename=filename[len(path):]))\n    except Exception:\n        if filename:\n            d = dict(filename = filename[len(path):])\n        else:\n            d = dict(filename = \'unkown\')\n        session.flash = T(\'cannot upload file "%(filename)s"\', d)\n\n    redirect(request.vars.sender)\n\n\ndef errors():\n    """ Error handler """\n    import operator\n    import os\n    import pickle\n    import hashlib\n\n    app = get_app()\n\n    method = request.args(1) or \'new\'\n\n\n    if method == \'new\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in listdir(errors_path, \'^\\w.*\'):\n            fullpath = os.path.join(errors_path, fn)\n            if not os.path.isfile(fullpath): continue\n            try:\n                fullpath_file = open(fullpath, \'r\')\n                try:\n                    error = pickle.load(fullpath_file)\n                finally:\n                    fullpath_file.close()\n            except IOError:\n                continue\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                os.unlink(fullpath)\n            else:\n                try:\n                    hash2error[hash][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method)\n    else:\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                os.unlink(apath(\'%s/errors/%s\' % (app, item[7:]), r=request))\n        func = lambda p: os.stat(apath(\'%s/errors/%s\' % \\\n                                           (app, p), r=request)).st_mtime\n        tickets = sorted(listdir(apath(\'%s/errors/\' % app, r=request), \'^\\w.*\'),\n                         key=func,\n                         reverse=True)\n\n        return dict(app=app, tickets=tickets, method=method)\n\n\ndef make_link(path):\n    """ Create a link from a path """\n    tryFile = path.replace(\'\\\\\', \'/\')\n\n    if os.path.isabs(tryFile) and os.path.isfile(tryFile):\n        (folder, filename) = os.path.split(tryFile)\n        (base, ext) = os.path.splitext(filename)\n        app = get_app()\n\n        editable = {\'controllers\': \'.py\', \'models\': \'.py\', \'views\': \'.html\'}\n        for key in editable.keys():\n            check_extension = folder.endswith("%s/%s" % (app,key))\n            if ext.lower() == editable[key] and check_extension:\n                return A(\'"\' + tryFile + \'"\',\n                         _href=URL(r=request,\n                         f=\'edit/%s/%s/%s\' % (app, key, filename))).xml()\n    return \'\'\n\n\ndef make_links(traceback):\n    """ Make links using the given traceback """\n\n    lwords = traceback.split(\'"\')\n\n    # Making the short circuit compatible with <= python2.4\n    result = (len(lwords) != 0) and lwords[0] or \'\'\n\n    i = 1\n\n    while i < len(lwords):\n        link = make_link(lwords[i])\n\n        if link == \'\':\n            result += \'"\' + lwords[i]\n        else:\n            result += link\n\n            if i + 1 < len(lwords):\n                result += lwords[i + 1]\n                i = i + 1\n\n        i = i + 1\n\n    return result\n\n\nclass TRACEBACK(object):\n    """ Generate the traceback """\n\n    def __init__(self, text):\n        """ TRACEBACK constructor """\n\n        self.s = make_links(CODE(text).xml())\n\n    def xml(self):\n        """ Returns the xml """\n\n        return self.s\n\n\ndef ticket():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    e.load(request, app, ticket)\n\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef error():\n    """ Generate a ticket (for testing) """\n    raise RuntimeError(\'admin ticket generator at your service\')\n\ndef update_languages():\n    """ Update available languages """\n\n    app = get_app()\n    update_all_languages(apath(app, r=request))\n    session.flash = T(\'Language files (static strings) updated\')\n    redirect(URL(\'design\',args=app,anchor=\'languages\'))\n\ndef twitter():\n    session.forget()\n    session._unlock(response)\n    import gluon.tools\n    import gluon.contrib.simplejson as sj\n    try:\n        if TWITTER_HASH:\n            page = gluon.tools.fetch(\'http://twitter.com/%s?format=json\'%TWITTER_HASH)\n            return sj.loads(page)[\'#timeline\']\n        else:\n            return \'disabled\'\n    except Exception, e:\n        return DIV(T(\'Unable to download because:\'),BR(),str(e))\n\ndef user():\n    if MULTI_USER_MODE:\n        if not db(db.auth_user).count():\n            auth.settings.registration_requires_approval = False            \n        return dict(form=auth())\n    else:\n        return dict(form=T("Disabled"))\n\ndef reload_routes():\n    """ Reload routes.py """\n    import gluon.rewrite\n    gluon.rewrite.load()\n    redirect(URL(\'site\'))\n\nresponse._vars=response._caller(check_version)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.TypeError object>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.TypeError object>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.TypeError object>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.TypeError object>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.TypeError object>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.TypeError object>'
p22
sS'args'
p23
S"('not all arguments converted during string formatting',)"
p24
sS'__reduce__'
p25
S'<built-in method __reduce__ of exceptions.TypeError object>'
p26
sS'__str__'
p27
S"<method-wrapper '__str__' of exceptions.TypeError object>"
p28
sS'__format__'
p29
S'<built-in method __format__ of exceptions.TypeError object>'
p30
sS'__getattribute__'
p31
S"<method-wrapper '__getattribute__' of exceptions.TypeError object>"
p32
sS'__class__'
p33
S"<type 'exceptions.TypeError'>"
p34
sS'__unicode__'
p35
S'<built-in method __unicode__ of exceptions.TypeError object>'
p36
sS'__delattr__'
p37
S"<method-wrapper '__delattr__' of exceptions.TypeError object>"
p38
sS'__subclasshook__'
p39
S'<built-in method __subclasshook__ of type object>'
p40
sS'__repr__'
p41
S"<method-wrapper '__repr__' of exceptions.TypeError object>"
p42
sS'__dict__'
p43
S'{}'
p44
sS'__sizeof__'
p45
S'<built-in method __sizeof__ of exceptions.TypeError object>'
p46
sS'__doc__'
p47
S"'Inappropriate argument type.'"
p48
sS'__init__'
p49
S"<method-wrapper '__init__' of exceptions.TypeError object>"
p50
sS'__new__'
p51
S'<built-in method __new__ of type object>'
p52
ssS'evalue'
p53
S'not all arguments converted during string formatting'
p54
sS'request'
p55
ccopy_reg
_reconstructor
p56
(cgluon.html
BEAUTIFY
p57
c__builtin__
object
p58
NtRp59
(dp60
S'attributes'
p61
(dp62
sS'components'
p63
(lp64
g56
(cgluon.html
TABLE
p65
g58
NtRp66
(dp67
g61
(dp68
S'level'
p69
I5
ssS'parent'
p70
Nsg63
(lp71
g56
(cgluon.html
TR
p72
g58
NtRp73
(dp74
g61
(dp75
sg70
g66
sg63
(lp76
g56
(cgluon.html
TD
p77
g58
NtRp78
(dp79
g61
(dp80
S'_style'
p81
S'font-weight:bold;'
p82
ssg70
g73
sg63
(lp83
S'ajax'
p84
asbag56
(g77
g58
NtRp85
(dp86
g61
(dp87
S'_valign'
p88
S'top'
p89
ssg70
g73
sg63
(lp90
S':'
asbag56
(g77
g58
NtRp91
(dp92
g61
(dp93
sg70
g73
sg63
(lp94
g56
(g57
g58
NtRp95
(dp96
g61
(dp97
g69
I5
ssg70
g91
sg63
(lp98
S'True'
p99
asbasbasbag56
(g72
g58
NtRp100
(dp101
g61
(dp102
sg70
g66
sg63
(lp103
g56
(g77
g58
NtRp104
(dp105
g61
(dp106
g81
g82
ssg70
g100
sg63
(lp107
S'application'
p108
asbag56
(g77
g58
NtRp109
(dp110
g61
(dp111
g88
g89
ssg70
g100
sg63
(lp112
S':'
asbag56
(g77
g58
NtRp113
(dp114
g61
(dp115
sg70
g100
sg63
(lp116
g56
(g57
g58
NtRp117
(dp118
g61
(dp119
g69
I5
ssg70
g113
sg63
(lp120
S'admin'
p121
asbasbasbag56
(g72
g58
NtRp122
(dp123
g61
(dp124
sg70
g66
sg63
(lp125
g56
(g77
g58
NtRp126
(dp127
g61
(dp128
g81
g82
ssg70
g122
sg63
(lp129
g23
asbag56
(g77
g58
NtRp130
(dp131
g61
(dp132
g88
g89
ssg70
g122
sg63
(lp133
S':'
asbag56
(g77
g58
NtRp134
(dp135
g61
(dp136
sg70
g122
sg63
(lp137
g56
(g57
g58
NtRp138
(dp139
g61
(dp140
g69
I5
ssg70
g134
sg63
(lp141
g56
(g65
g58
NtRp142
(dp143
g61
(dp144
g69
I4
ssg70
Nsg63
(lp145
sbasbasbasbag56
(g72
g58
NtRp146
(dp147
g61
(dp148
sg70
g66
sg63
(lp149
g56
(g77
g58
NtRp150
(dp151
g61
(dp152
g81
g82
ssg70
g146
sg63
(lp153
S'body'
p154
asbag56
(g77
g58
NtRp155
(dp156
g61
(dp157
g88
g89
ssg70
g146
sg63
(lp158
S':'
asbag56
(g77
g58
NtRp159
(dp160
g61
(dp161
sg70
g146
sg63
(lp162
g56
(g57
g58
NtRp163
(dp164
g61
(dp165
g69
I5
ssg70
g159
sg63
(lp166
S"<open file '<fdopen>', mode 'w+b' at 0x7fe9702cde40>"
p167
asbasbasbag56
(g72
g58
NtRp168
(dp169
g61
(dp170
sg70
g66
sg63
(lp171
g56
(g77
g58
NtRp172
(dp173
g61
(dp174
g81
g82
ssg70
g168
sg63
(lp175
S'client'
p176
asbag56
(g77
g58
NtRp177
(dp178
g61
(dp179
g88
g89
ssg70
g168
sg63
(lp180
S':'
asbag56
(g77
g58
NtRp181
(dp182
g61
(dp183
sg70
g168
sg63
(lp184
g56
(g57
g58
NtRp185
(dp186
g61
(dp187
g69
I5
ssg70
g181
sg63
(lp188
S'127.0.0.1'
p189
asbasbasbag56
(g72
g58
NtRp190
(dp191
g61
(dp192
sg70
g66
sg63
(lp193
g56
(g77
g58
NtRp194
(dp195
g61
(dp196
g81
g82
ssg70
g190
sg63
(lp197
S'controller'
p198
asbag56
(g77
g58
NtRp199
(dp200
g61
(dp201
g88
g89
ssg70
g190
sg63
(lp202
S':'
asbag56
(g77
g58
NtRp203
(dp204
g61
(dp205
sg70
g190
sg63
(lp206
g56
(g57
g58
NtRp207
(dp208
g61
(dp209
g69
I5
ssg70
g203
sg63
(lp210
S'default'
p211
asbasbasbag56
(g72
g58
NtRp212
(dp213
g61
(dp214
sg70
g66
sg63
(lp215
g56
(g77
g58
NtRp216
(dp217
g61
(dp218
g81
g82
ssg70
g212
sg63
(lp219
S'cookies'
p220
asbag56
(g77
g58
NtRp221
(dp222
g61
(dp223
g88
g89
ssg70
g212
sg63
(lp224
S':'
asbag56
(g77
g58
NtRp225
(dp226
g61
(dp227
sg70
g212
sg63
(lp228
g56
(g57
g58
NtRp229
(dp230
g61
(dp231
g69
I5
ssg70
g225
sg63
(lp232
g56
(g65
g58
NtRp233
(dp234
g61
(dp235
g69
I4
ssg70
Nsg63
(lp236
g56
(g72
g58
NtRp237
(dp238
g61
(dp239
sg70
g233
sg63
(lp240
g56
(g77
g58
NtRp241
(dp242
g61
(dp243
g81
g82
ssg70
g237
sg63
(lp244
S'session_id_admin'
p245
asbag56
(g77
g58
NtRp246
(dp247
g61
(dp248
g88
g89
ssg70
g237
sg63
(lp249
S':'
asbag56
(g77
g58
NtRp250
(dp251
g61
(dp252
sg70
g237
sg63
(lp253
g56
(g57
g58
NtRp254
(dp255
g61
(dp256
g69
I4
ssg70
g250
sg63
(lp257
g56
(g65
g58
NtRp258
(dp259
g61
(dp260
g69
I3
ssg70
Nsg63
(lp261
g56
(g72
g58
NtRp262
(dp263
g61
(dp264
sg70
g258
sg63
(lp265
g56
(g77
g58
NtRp266
(dp267
g61
(dp268
g81
g82
ssg70
g262
sg63
(lp269
S'comment'
p270
asbag56
(g77
g58
NtRp271
(dp272
g61
(dp273
g88
g89
ssg70
g262
sg63
(lp274
S':'
asbag56
(g77
g58
NtRp275
(dp276
g61
(dp277
sg70
g262
sg63
(lp278
g56
(g57
g58
NtRp279
(dp280
g61
(dp281
g69
I3
ssg70
g275
sg63
(lp282
S''
asbasbasbag56
(g72
g58
NtRp283
(dp284
g61
(dp285
sg70
g258
sg63
(lp286
g56
(g77
g58
NtRp287
(dp288
g61
(dp289
g81
g82
ssg70
g283
sg63
(lp290
S'domain'
p291
asbag56
(g77
g58
NtRp292
(dp293
g61
(dp294
g88
g89
ssg70
g283
sg63
(lp295
S':'
asbag56
(g77
g58
NtRp296
(dp297
g61
(dp298
sg70
g283
sg63
(lp299
g56
(g57
g58
NtRp300
(dp301
g61
(dp302
g69
I3
ssg70
g296
sg63
(lp303
S''
asbasbasbag56
(g72
g58
NtRp304
(dp305
g61
(dp306
sg70
g258
sg63
(lp307
g56
(g77
g58
NtRp308
(dp309
g61
(dp310
g81
g82
ssg70
g304
sg63
(lp311
S'expires'
p312
asbag56
(g77
g58
NtRp313
(dp314
g61
(dp315
g88
g89
ssg70
g304
sg63
(lp316
S':'
asbag56
(g77
g58
NtRp317
(dp318
g61
(dp319
sg70
g304
sg63
(lp320
g56
(g57
g58
NtRp321
(dp322
g61
(dp323
g69
I3
ssg70
g317
sg63
(lp324
S''
asbasbasbag56
(g72
g58
NtRp325
(dp326
g61
(dp327
sg70
g258
sg63
(lp328
g56
(g77
g58
NtRp329
(dp330
g61
(dp331
g81
g82
ssg70
g325
sg63
(lp332
S'httponly'
p333
asbag56
(g77
g58
NtRp334
(dp335
g61
(dp336
g88
g89
ssg70
g325
sg63
(lp337
S':'
asbag56
(g77
g58
NtRp338
(dp339
g61
(dp340
sg70
g325
sg63
(lp341
g56
(g57
g58
NtRp342
(dp343
g61
(dp344
g69
I3
ssg70
g338
sg63
(lp345
S''
asbasbasbag56
(g72
g58
NtRp346
(dp347
g61
(dp348
sg70
g258
sg63
(lp349
g56
(g77
g58
NtRp350
(dp351
g61
(dp352
g81
g82
ssg70
g346
sg63
(lp353
S'max-age'
p354
asbag56
(g77
g58
NtRp355
(dp356
g61
(dp357
g88
g89
ssg70
g346
sg63
(lp358
S':'
asbag56
(g77
g58
NtRp359
(dp360
g61
(dp361
sg70
g346
sg63
(lp362
g56
(g57
g58
NtRp363
(dp364
g61
(dp365
g69
I3
ssg70
g359
sg63
(lp366
S''
asbasbasbag56
(g72
g58
NtRp367
(dp368
g61
(dp369
sg70
g258
sg63
(lp370
g56
(g77
g58
NtRp371
(dp372
g61
(dp373
g81
g82
ssg70
g367
sg63
(lp374
S'path'
p375
asbag56
(g77
g58
NtRp376
(dp377
g61
(dp378
g88
g89
ssg70
g367
sg63
(lp379
S':'
asbag56
(g77
g58
NtRp380
(dp381
g61
(dp382
sg70
g367
sg63
(lp383
g56
(g57
g58
NtRp384
(dp385
g61
(dp386
g69
I3
ssg70
g380
sg63
(lp387
S''
asbasbasbag56
(g72
g58
NtRp388
(dp389
g61
(dp390
sg70
g258
sg63
(lp391
g56
(g77
g58
NtRp392
(dp393
g61
(dp394
g81
g82
ssg70
g388
sg63
(lp395
S'secure'
p396
asbag56
(g77
g58
NtRp397
(dp398
g61
(dp399
g88
g89
ssg70
g388
sg63
(lp400
S':'
asbag56
(g77
g58
NtRp401
(dp402
g61
(dp403
sg70
g388
sg63
(lp404
g56
(g57
g58
NtRp405
(dp406
g61
(dp407
g69
I3
ssg70
g401
sg63
(lp408
S''
asbasbasbag56
(g72
g58
NtRp409
(dp410
g61
(dp411
sg70
g258
sg63
(lp412
g56
(g77
g58
NtRp413
(dp414
g61
(dp415
g81
g82
ssg70
g409
sg63
(lp416
S'version'
p417
asbag56
(g77
g58
NtRp418
(dp419
g61
(dp420
g88
g89
ssg70
g409
sg63
(lp421
S':'
asbag56
(g77
g58
NtRp422
(dp423
g61
(dp424
sg70
g409
sg63
(lp425
g56
(g57
g58
NtRp426
(dp427
g61
(dp428
g69
I3
ssg70
g422
sg63
(lp429
S''
asbasbasbasbasbasbasbag56
(g72
g58
NtRp430
(dp431
g61
(dp432
sg70
g233
sg63
(lp433
g56
(g77
g58
NtRp434
(dp435
g61
(dp436
g81
g82
ssg70
g430
sg63
(lp437
S'session_id_blog'
p438
asbag56
(g77
g58
NtRp439
(dp440
g61
(dp441
g88
g89
ssg70
g430
sg63
(lp442
S':'
asbag56
(g77
g58
NtRp443
(dp444
g61
(dp445
sg70
g430
sg63
(lp446
g56
(g57
g58
NtRp447
(dp448
g61
(dp449
g69
I4
ssg70
g443
sg63
(lp450
g56
(g65
g58
NtRp451
(dp452
g61
(dp453
g69
I3
ssg70
Nsg63
(lp454
g56
(g72
g58
NtRp455
(dp456
g61
(dp457
sg70
g451
sg63
(lp458
g56
(g77
g58
NtRp459
(dp460
g61
(dp461
g81
g82
ssg70
g455
sg63
(lp462
g270
asbag56
(g77
g58
NtRp463
(dp464
g61
(dp465
g88
g89
ssg70
g455
sg63
(lp466
S':'
asbag56
(g77
g58
NtRp467
(dp468
g61
(dp469
sg70
g455
sg63
(lp470
g56
(g57
g58
NtRp471
(dp472
g61
(dp473
g69
I3
ssg70
g467
sg63
(lp474
S''
asbasbasbag56
(g72
g58
NtRp475
(dp476
g61
(dp477
sg70
g451
sg63
(lp478
g56
(g77
g58
NtRp479
(dp480
g61
(dp481
g81
g82
ssg70
g475
sg63
(lp482
g291
asbag56
(g77
g58
NtRp483
(dp484
g61
(dp485
g88
g89
ssg70
g475
sg63
(lp486
S':'
asbag56
(g77
g58
NtRp487
(dp488
g61
(dp489
sg70
g475
sg63
(lp490
g56
(g57
g58
NtRp491
(dp492
g61
(dp493
g69
I3
ssg70
g487
sg63
(lp494
S''
asbasbasbag56
(g72
g58
NtRp495
(dp496
g61
(dp497
sg70
g451
sg63
(lp498
g56
(g77
g58
NtRp499
(dp500
g61
(dp501
g81
g82
ssg70
g495
sg63
(lp502
g312
asbag56
(g77
g58
NtRp503
(dp504
g61
(dp505
g88
g89
ssg70
g495
sg63
(lp506
S':'
asbag56
(g77
g58
NtRp507
(dp508
g61
(dp509
sg70
g495
sg63
(lp510
g56
(g57
g58
NtRp511
(dp512
g61
(dp513
g69
I3
ssg70
g507
sg63
(lp514
S''
asbasbasbag56
(g72
g58
NtRp515
(dp516
g61
(dp517
sg70
g451
sg63
(lp518
g56
(g77
g58
NtRp519
(dp520
g61
(dp521
g81
g82
ssg70
g515
sg63
(lp522
g333
asbag56
(g77
g58
NtRp523
(dp524
g61
(dp525
g88
g89
ssg70
g515
sg63
(lp526
S':'
asbag56
(g77
g58
NtRp527
(dp528
g61
(dp529
sg70
g515
sg63
(lp530
g56
(g57
g58
NtRp531
(dp532
g61
(dp533
g69
I3
ssg70
g527
sg63
(lp534
S''
asbasbasbag56
(g72
g58
NtRp535
(dp536
g61
(dp537
sg70
g451
sg63
(lp538
g56
(g77
g58
NtRp539
(dp540
g61
(dp541
g81
g82
ssg70
g535
sg63
(lp542
g354
asbag56
(g77
g58
NtRp543
(dp544
g61
(dp545
g88
g89
ssg70
g535
sg63
(lp546
S':'
asbag56
(g77
g58
NtRp547
(dp548
g61
(dp549
sg70
g535
sg63
(lp550
g56
(g57
g58
NtRp551
(dp552
g61
(dp553
g69
I3
ssg70
g547
sg63
(lp554
S''
asbasbasbag56
(g72
g58
NtRp555
(dp556
g61
(dp557
sg70
g451
sg63
(lp558
g56
(g77
g58
NtRp559
(dp560
g61
(dp561
g81
g82
ssg70
g555
sg63
(lp562
g375
asbag56
(g77
g58
NtRp563
(dp564
g61
(dp565
g88
g89
ssg70
g555
sg63
(lp566
S':'
asbag56
(g77
g58
NtRp567
(dp568
g61
(dp569
sg70
g555
sg63
(lp570
g56
(g57
g58
NtRp571
(dp572
g61
(dp573
g69
I3
ssg70
g567
sg63
(lp574
S''
asbasbasbag56
(g72
g58
NtRp575
(dp576
g61
(dp577
sg70
g451
sg63
(lp578
g56
(g77
g58
NtRp579
(dp580
g61
(dp581
g81
g82
ssg70
g575
sg63
(lp582
g396
asbag56
(g77
g58
NtRp583
(dp584
g61
(dp585
g88
g89
ssg70
g575
sg63
(lp586
S':'
asbag56
(g77
g58
NtRp587
(dp588
g61
(dp589
sg70
g575
sg63
(lp590
g56
(g57
g58
NtRp591
(dp592
g61
(dp593
g69
I3
ssg70
g587
sg63
(lp594
S''
asbasbasbag56
(g72
g58
NtRp595
(dp596
g61
(dp597
sg70
g451
sg63
(lp598
g56
(g77
g58
NtRp599
(dp600
g61
(dp601
g81
g82
ssg70
g595
sg63
(lp602
g417
asbag56
(g77
g58
NtRp603
(dp604
g61
(dp605
g88
g89
ssg70
g595
sg63
(lp606
S':'
asbag56
(g77
g58
NtRp607
(dp608
g61
(dp609
sg70
g595
sg63
(lp610
g56
(g57
g58
NtRp611
(dp612
g61
(dp613
g69
I3
ssg70
g607
sg63
(lp614
S''
asbasbasbasbasbasbasbag56
(g72
g58
NtRp615
(dp616
g61
(dp617
sg70
g233
sg63
(lp618
g56
(g77
g58
NtRp619
(dp620
g61
(dp621
g81
g82
ssg70
g615
sg63
(lp622
S'session_id_welcome'
p623
asbag56
(g77
g58
NtRp624
(dp625
g61
(dp626
g88
g89
ssg70
g615
sg63
(lp627
S':'
asbag56
(g77
g58
NtRp628
(dp629
g61
(dp630
sg70
g615
sg63
(lp631
g56
(g57
g58
NtRp632
(dp633
g61
(dp634
g69
I4
ssg70
g628
sg63
(lp635
g56
(g65
g58
NtRp636
(dp637
g61
(dp638
g69
I3
ssg70
Nsg63
(lp639
g56
(g72
g58
NtRp640
(dp641
g61
(dp642
sg70
g636
sg63
(lp643
g56
(g77
g58
NtRp644
(dp645
g61
(dp646
g81
g82
ssg70
g640
sg63
(lp647
g270
asbag56
(g77
g58
NtRp648
(dp649
g61
(dp650
g88
g89
ssg70
g640
sg63
(lp651
S':'
asbag56
(g77
g58
NtRp652
(dp653
g61
(dp654
sg70
g640
sg63
(lp655
g56
(g57
g58
NtRp656
(dp657
g61
(dp658
g69
I3
ssg70
g652
sg63
(lp659
S''
asbasbasbag56
(g72
g58
NtRp660
(dp661
g61
(dp662
sg70
g636
sg63
(lp663
g56
(g77
g58
NtRp664
(dp665
g61
(dp666
g81
g82
ssg70
g660
sg63
(lp667
g291
asbag56
(g77
g58
NtRp668
(dp669
g61
(dp670
g88
g89
ssg70
g660
sg63
(lp671
S':'
asbag56
(g77
g58
NtRp672
(dp673
g61
(dp674
sg70
g660
sg63
(lp675
g56
(g57
g58
NtRp676
(dp677
g61
(dp678
g69
I3
ssg70
g672
sg63
(lp679
S''
asbasbasbag56
(g72
g58
NtRp680
(dp681
g61
(dp682
sg70
g636
sg63
(lp683
g56
(g77
g58
NtRp684
(dp685
g61
(dp686
g81
g82
ssg70
g680
sg63
(lp687
g312
asbag56
(g77
g58
NtRp688
(dp689
g61
(dp690
g88
g89
ssg70
g680
sg63
(lp691
S':'
asbag56
(g77
g58
NtRp692
(dp693
g61
(dp694
sg70
g680
sg63
(lp695
g56
(g57
g58
NtRp696
(dp697
g61
(dp698
g69
I3
ssg70
g692
sg63
(lp699
S''
asbasbasbag56
(g72
g58
NtRp700
(dp701
g61
(dp702
sg70
g636
sg63
(lp703
g56
(g77
g58
NtRp704
(dp705
g61
(dp706
g81
g82
ssg70
g700
sg63
(lp707
g333
asbag56
(g77
g58
NtRp708
(dp709
g61
(dp710
g88
g89
ssg70
g700
sg63
(lp711
S':'
asbag56
(g77
g58
NtRp712
(dp713
g61
(dp714
sg70
g700
sg63
(lp715
g56
(g57
g58
NtRp716
(dp717
g61
(dp718
g69
I3
ssg70
g712
sg63
(lp719
S''
asbasbasbag56
(g72
g58
NtRp720
(dp721
g61
(dp722
sg70
g636
sg63
(lp723
g56
(g77
g58
NtRp724
(dp725
g61
(dp726
g81
g82
ssg70
g720
sg63
(lp727
g354
asbag56
(g77
g58
NtRp728
(dp729
g61
(dp730
g88
g89
ssg70
g720
sg63
(lp731
S':'
asbag56
(g77
g58
NtRp732
(dp733
g61
(dp734
sg70
g720
sg63
(lp735
g56
(g57
g58
NtRp736
(dp737
g61
(dp738
g69
I3
ssg70
g732
sg63
(lp739
S''
asbasbasbag56
(g72
g58
NtRp740
(dp741
g61
(dp742
sg70
g636
sg63
(lp743
g56
(g77
g58
NtRp744
(dp745
g61
(dp746
g81
g82
ssg70
g740
sg63
(lp747
g375
asbag56
(g77
g58
NtRp748
(dp749
g61
(dp750
g88
g89
ssg70
g740
sg63
(lp751
S':'
asbag56
(g77
g58
NtRp752
(dp753
g61
(dp754
sg70
g740
sg63
(lp755
g56
(g57
g58
NtRp756
(dp757
g61
(dp758
g69
I3
ssg70
g752
sg63
(lp759
S''
asbasbasbag56
(g72
g58
NtRp760
(dp761
g61
(dp762
sg70
g636
sg63
(lp763
g56
(g77
g58
NtRp764
(dp765
g61
(dp766
g81
g82
ssg70
g760
sg63
(lp767
g396
asbag56
(g77
g58
NtRp768
(dp769
g61
(dp770
g88
g89
ssg70
g760
sg63
(lp771
S':'
asbag56
(g77
g58
NtRp772
(dp773
g61
(dp774
sg70
g760
sg63
(lp775
g56
(g57
g58
NtRp776
(dp777
g61
(dp778
g69
I3
ssg70
g772
sg63
(lp779
S''
asbasbasbag56
(g72
g58
NtRp780
(dp781
g61
(dp782
sg70
g636
sg63
(lp783
g56
(g77
g58
NtRp784
(dp785
g61
(dp786
g81
g82
ssg70
g780
sg63
(lp787
g417
asbag56
(g77
g58
NtRp788
(dp789
g61
(dp790
g88
g89
ssg70
g780
sg63
(lp791
S':'
asbag56
(g77
g58
NtRp792
(dp793
g61
(dp794
sg70
g780
sg63
(lp795
g56
(g57
g58
NtRp796
(dp797
g61
(dp798
g69
I3
ssg70
g792
sg63
(lp799
S''
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp800
(dp801
g61
(dp802
sg70
g66
sg63
(lp803
g56
(g77
g58
NtRp804
(dp805
g61
(dp806
g81
g82
ssg70
g800
sg63
(lp807
S'env'
p808
asbag56
(g77
g58
NtRp809
(dp810
g61
(dp811
g88
g89
ssg70
g800
sg63
(lp812
S':'
asbag56
(g77
g58
NtRp813
(dp814
g61
(dp815
sg70
g800
sg63
(lp816
g56
(g57
g58
NtRp817
(dp818
g61
(dp819
g69
I5
ssg70
g813
sg63
(lp820
g56
(g65
g58
NtRp821
(dp822
g61
(dp823
g69
I4
ssg70
Nsg63
(lp824
g56
(g72
g58
NtRp825
(dp826
g61
(dp827
sg70
g821
sg63
(lp828
g56
(g77
g58
NtRp829
(dp830
g61
(dp831
g81
g82
ssg70
g825
sg63
(lp832
S'app_folders'
p833
asbag56
(g77
g58
NtRp834
(dp835
g61
(dp836
g88
g89
ssg70
g825
sg63
(lp837
S':'
asbag56
(g77
g58
NtRp838
(dp839
g61
(dp840
sg70
g825
sg63
(lp841
g56
(g57
g58
NtRp842
(dp843
g61
(dp844
g69
I4
ssg70
g838
sg63
(lp845
S"set(['/media/misperoles/git/pyj3nnn1/web2py/applications/admin/', '/media/misperoles/git/pyj3nnn1/web2py/applications/blog/', '/media/misperoles/git/pyj3nnn1/web2py/applications/welcome/'])"
p846
asbasbasbag56
(g72
g58
NtRp847
(dp848
g61
(dp849
sg70
g821
sg63
(lp850
g56
(g77
g58
NtRp851
(dp852
g61
(dp853
g81
g82
ssg70
g847
sg63
(lp854
S'applications_parent'
p855
asbag56
(g77
g58
NtRp856
(dp857
g61
(dp858
g88
g89
ssg70
g847
sg63
(lp859
S':'
asbag56
(g77
g58
NtRp860
(dp861
g61
(dp862
sg70
g847
sg63
(lp863
g56
(g57
g58
NtRp864
(dp865
g61
(dp866
g69
I4
ssg70
g860
sg63
(lp867
S'/media/misperoles/git/pyj3nnn1/web2py'
p868
asbasbasbag56
(g72
g58
NtRp869
(dp870
g61
(dp871
sg70
g821
sg63
(lp872
g56
(g77
g58
NtRp873
(dp874
g61
(dp875
g81
g82
ssg70
g869
sg63
(lp876
S'cmd_args'
p877
asbag56
(g77
g58
NtRp878
(dp879
g61
(dp880
g88
g89
ssg70
g869
sg63
(lp881
S':'
asbag56
(g77
g58
NtRp882
(dp883
g61
(dp884
sg70
g869
sg63
(lp885
g56
(g57
g58
NtRp886
(dp887
g61
(dp888
g69
I4
ssg70
g882
sg63
(lp889
g56
(g65
g58
NtRp890
(dp891
g61
(dp892
g69
I3
ssg70
Nsg63
(lp893
sbasbasbasbag56
(g72
g58
NtRp894
(dp895
g61
(dp896
sg70
g821
sg63
(lp897
g56
(g77
g58
NtRp898
(dp899
g61
(dp900
g81
g82
ssg70
g894
sg63
(lp901
S'cmd_options'
p902
asbag56
(g77
g58
NtRp903
(dp904
g61
(dp905
g88
g89
ssg70
g894
sg63
(lp906
S':'
asbag56
(g77
g58
NtRp907
(dp908
g61
(dp909
sg70
g894
sg63
(lp910
g56
(g57
g58
NtRp911
(dp912
g61
(dp913
g69
I4
ssg70
g907
sg63
(lp914
S"<Values at 0x1cdc7e8: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'Diotima', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/media/misperoles/git/pyj3nnn1/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'plain': False, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'numthreads': None, 'nobanner': False}>"
p915
asbasbasbag56
(g72
g58
NtRp916
(dp917
g61
(dp918
sg70
g821
sg63
(lp919
g56
(g77
g58
NtRp920
(dp921
g61
(dp922
g81
g82
ssg70
g916
sg63
(lp923
S'content_length'
p924
asbag56
(g77
g58
NtRp925
(dp926
g61
(dp927
g88
g89
ssg70
g916
sg63
(lp928
S':'
asbag56
(g77
g58
NtRp929
(dp930
g61
(dp931
sg70
g916
sg63
(lp932
g56
(g57
g58
NtRp933
(dp934
g61
(dp935
g69
I4
ssg70
g929
sg63
(lp936
S'0'
asbasbasbag56
(g72
g58
NtRp937
(dp938
g61
(dp939
sg70
g821
sg63
(lp940
g56
(g77
g58
NtRp941
(dp942
g61
(dp943
g81
g82
ssg70
g937
sg63
(lp944
S'db_sessions'
p945
asbag56
(g77
g58
NtRp946
(dp947
g61
(dp948
g88
g89
ssg70
g937
sg63
(lp949
S':'
asbag56
(g77
g58
NtRp950
(dp951
g61
(dp952
sg70
g937
sg63
(lp953
g56
(g57
g58
NtRp954
(dp955
g61
(dp956
g69
I4
ssg70
g950
sg63
(lp957
S'set([])'
p958
asbasbasbag56
(g72
g58
NtRp959
(dp960
g61
(dp961
sg70
g821
sg63
(lp962
g56
(g77
g58
NtRp963
(dp964
g61
(dp965
g81
g82
ssg70
g959
sg63
(lp966
S'debugging'
p967
asbag56
(g77
g58
NtRp968
(dp969
g61
(dp970
g88
g89
ssg70
g959
sg63
(lp971
S':'
asbag56
(g77
g58
NtRp972
(dp973
g61
(dp974
sg70
g959
sg63
(lp975
g56
(g57
g58
NtRp976
(dp977
g61
(dp978
g69
I4
ssg70
g972
sg63
(lp979
S'False'
p980
asbasbasbag56
(g72
g58
NtRp981
(dp982
g61
(dp983
sg70
g821
sg63
(lp984
g56
(g77
g58
NtRp985
(dp986
g61
(dp987
g81
g82
ssg70
g981
sg63
(lp988
S'gluon_parent'
p989
asbag56
(g77
g58
NtRp990
(dp991
g61
(dp992
g88
g89
ssg70
g981
sg63
(lp993
S':'
asbag56
(g77
g58
NtRp994
(dp995
g61
(dp996
sg70
g981
sg63
(lp997
g56
(g57
g58
NtRp998
(dp999
g61
(dp1000
g69
I4
ssg70
g994
sg63
(lp1001
S'/media/misperoles/git/pyj3nnn1/web2py'
p1002
asbasbasbag56
(g72
g58
NtRp1003
(dp1004
g61
(dp1005
sg70
g821
sg63
(lp1006
g56
(g77
g58
NtRp1007
(dp1008
g61
(dp1009
g81
g82
ssg70
g1003
sg63
(lp1010
S'http_accept'
p1011
asbag56
(g77
g58
NtRp1012
(dp1013
g61
(dp1014
g88
g89
ssg70
g1003
sg63
(lp1015
S':'
asbag56
(g77
g58
NtRp1016
(dp1017
g61
(dp1018
sg70
g1003
sg63
(lp1019
g56
(g57
g58
NtRp1020
(dp1021
g61
(dp1022
g69
I4
ssg70
g1016
sg63
(lp1023
S'*/*'
p1024
asbasbasbag56
(g72
g58
NtRp1025
(dp1026
g61
(dp1027
sg70
g821
sg63
(lp1028
g56
(g77
g58
NtRp1029
(dp1030
g61
(dp1031
g81
g82
ssg70
g1025
sg63
(lp1032
S'http_accept_charset'
p1033
asbag56
(g77
g58
NtRp1034
(dp1035
g61
(dp1036
g88
g89
ssg70
g1025
sg63
(lp1037
S':'
asbag56
(g77
g58
NtRp1038
(dp1039
g61
(dp1040
sg70
g1025
sg63
(lp1041
g56
(g57
g58
NtRp1042
(dp1043
g61
(dp1044
g69
I4
ssg70
g1038
sg63
(lp1045
S'ISO-8859-1,utf-8;q=0.7,*;q=0.7'
p1046
asbasbasbag56
(g72
g58
NtRp1047
(dp1048
g61
(dp1049
sg70
g821
sg63
(lp1050
g56
(g77
g58
NtRp1051
(dp1052
g61
(dp1053
g81
g82
ssg70
g1047
sg63
(lp1054
S'http_accept_encoding'
p1055
asbag56
(g77
g58
NtRp1056
(dp1057
g61
(dp1058
g88
g89
ssg70
g1047
sg63
(lp1059
S':'
asbag56
(g77
g58
NtRp1060
(dp1061
g61
(dp1062
sg70
g1047
sg63
(lp1063
g56
(g57
g58
NtRp1064
(dp1065
g61
(dp1066
g69
I4
ssg70
g1060
sg63
(lp1067
S'gzip, deflate'
p1068
asbasbasbag56
(g72
g58
NtRp1069
(dp1070
g61
(dp1071
sg70
g821
sg63
(lp1072
g56
(g77
g58
NtRp1073
(dp1074
g61
(dp1075
g81
g82
ssg70
g1069
sg63
(lp1076
S'http_accept_language'
p1077
asbag56
(g77
g58
NtRp1078
(dp1079
g61
(dp1080
g88
g89
ssg70
g1069
sg63
(lp1081
S':'
asbag56
(g77
g58
NtRp1082
(dp1083
g61
(dp1084
sg70
g1069
sg63
(lp1085
g56
(g57
g58
NtRp1086
(dp1087
g61
(dp1088
g69
I4
ssg70
g1082
sg63
(lp1089
S'en-us,en;q=0.5'
p1090
asbasbasbag56
(g72
g58
NtRp1091
(dp1092
g61
(dp1093
sg70
g821
sg63
(lp1094
g56
(g77
g58
NtRp1095
(dp1096
g61
(dp1097
g81
g82
ssg70
g1091
sg63
(lp1098
S'http_cache_control'
p1099
asbag56
(g77
g58
NtRp1100
(dp1101
g61
(dp1102
g88
g89
ssg70
g1091
sg63
(lp1103
S':'
asbag56
(g77
g58
NtRp1104
(dp1105
g61
(dp1106
sg70
g1091
sg63
(lp1107
g56
(g57
g58
NtRp1108
(dp1109
g61
(dp1110
g69
I4
ssg70
g1104
sg63
(lp1111
S'no-cache'
p1112
asbasbasbag56
(g72
g58
NtRp1113
(dp1114
g61
(dp1115
sg70
g821
sg63
(lp1116
g56
(g77
g58
NtRp1117
(dp1118
g61
(dp1119
g81
g82
ssg70
g1113
sg63
(lp1120
S'http_connection'
p1121
asbag56
(g77
g58
NtRp1122
(dp1123
g61
(dp1124
g88
g89
ssg70
g1113
sg63
(lp1125
S':'
asbag56
(g77
g58
NtRp1126
(dp1127
g61
(dp1128
sg70
g1113
sg63
(lp1129
g56
(g57
g58
NtRp1130
(dp1131
g61
(dp1132
g69
I4
ssg70
g1126
sg63
(lp1133
S'keep-alive'
p1134
asbasbasbag56
(g72
g58
NtRp1135
(dp1136
g61
(dp1137
sg70
g821
sg63
(lp1138
g56
(g77
g58
NtRp1139
(dp1140
g61
(dp1141
g81
g82
ssg70
g1135
sg63
(lp1142
S'http_content_length'
p1143
asbag56
(g77
g58
NtRp1144
(dp1145
g61
(dp1146
g88
g89
ssg70
g1135
sg63
(lp1147
S':'
asbag56
(g77
g58
NtRp1148
(dp1149
g61
(dp1150
sg70
g1135
sg63
(lp1151
g56
(g57
g58
NtRp1152
(dp1153
g61
(dp1154
g69
I4
ssg70
g1148
sg63
(lp1155
S'0'
asbasbasbag56
(g72
g58
NtRp1156
(dp1157
g61
(dp1158
sg70
g821
sg63
(lp1159
g56
(g77
g58
NtRp1160
(dp1161
g61
(dp1162
g81
g82
ssg70
g1156
sg63
(lp1163
S'http_cookie'
p1164
asbag56
(g77
g58
NtRp1165
(dp1166
g61
(dp1167
g88
g89
ssg70
g1156
sg63
(lp1168
S':'
asbag56
(g77
g58
NtRp1169
(dp1170
g61
(dp1171
sg70
g1156
sg63
(lp1172
g56
(g57
g58
NtRp1173
(dp1174
g61
(dp1175
g69
I4
ssg70
g1169
sg63
(lp1176
S'session_id_blog=127.0.0.1-ff1a2f0a-6e25-49b9-88d6-6c3186f655fa; session_id_welcome=127.0.0.1-96b2a66f-ad62-4f92-b25f-a831c3cb17db; session_id_admin=127.0.0.1-f03ec27a-718d-4653-8522-92fe2f9856ae'
p1177
asbasbasbag56
(g72
g58
NtRp1178
(dp1179
g61
(dp1180
sg70
g821
sg63
(lp1181
g56
(g77
g58
NtRp1182
(dp1183
g61
(dp1184
g81
g82
ssg70
g1178
sg63
(lp1185
S'http_host'
p1186
asbag56
(g77
g58
NtRp1187
(dp1188
g61
(dp1189
g88
g89
ssg70
g1178
sg63
(lp1190
S':'
asbag56
(g77
g58
NtRp1191
(dp1192
g61
(dp1193
sg70
g1178
sg63
(lp1194
g56
(g57
g58
NtRp1195
(dp1196
g61
(dp1197
g69
I4
ssg70
g1191
sg63
(lp1198
S'127.0.0.1:8000'
p1199
asbasbasbag56
(g72
g58
NtRp1200
(dp1201
g61
(dp1202
sg70
g821
sg63
(lp1203
g56
(g77
g58
NtRp1204
(dp1205
g61
(dp1206
g81
g82
ssg70
g1200
sg63
(lp1207
S'http_pragma'
p1208
asbag56
(g77
g58
NtRp1209
(dp1210
g61
(dp1211
g88
g89
ssg70
g1200
sg63
(lp1212
S':'
asbag56
(g77
g58
NtRp1213
(dp1214
g61
(dp1215
sg70
g1200
sg63
(lp1216
g56
(g57
g58
NtRp1217
(dp1218
g61
(dp1219
g69
I4
ssg70
g1213
sg63
(lp1220
S'no-cache'
p1221
asbasbasbag56
(g72
g58
NtRp1222
(dp1223
g61
(dp1224
sg70
g821
sg63
(lp1225
g56
(g77
g58
NtRp1226
(dp1227
g61
(dp1228
g81
g82
ssg70
g1222
sg63
(lp1229
S'http_referer'
p1230
asbag56
(g77
g58
NtRp1231
(dp1232
g61
(dp1233
g88
g89
ssg70
g1222
sg63
(lp1234
S':'
asbag56
(g77
g58
NtRp1235
(dp1236
g61
(dp1237
sg70
g1222
sg63
(lp1238
g56
(g57
g58
NtRp1239
(dp1240
g61
(dp1241
g69
I4
ssg70
g1235
sg63
(lp1242
S'http://127.0.0.1:8000/admin/default/site'
p1243
asbasbasbag56
(g72
g58
NtRp1244
(dp1245
g61
(dp1246
sg70
g821
sg63
(lp1247
g56
(g77
g58
NtRp1248
(dp1249
g61
(dp1250
g81
g82
ssg70
g1244
sg63
(lp1251
S'http_user_agent'
p1252
asbag56
(g77
g58
NtRp1253
(dp1254
g61
(dp1255
g88
g89
ssg70
g1244
sg63
(lp1256
S':'
asbag56
(g77
g58
NtRp1257
(dp1258
g61
(dp1259
sg70
g1244
sg63
(lp1260
g56
(g57
g58
NtRp1261
(dp1262
g61
(dp1263
g69
I4
ssg70
g1257
sg63
(lp1264
S'Mozilla/5.0 (X11; Linux x86_64; rv:9.0.1) Gecko/20100101 Firefox/9.0.1'
p1265
asbasbasbag56
(g72
g58
NtRp1266
(dp1267
g61
(dp1268
sg70
g821
sg63
(lp1269
g56
(g77
g58
NtRp1270
(dp1271
g61
(dp1272
g81
g82
ssg70
g1266
sg63
(lp1273
S'http_x_requested_with'
p1274
asbag56
(g77
g58
NtRp1275
(dp1276
g61
(dp1277
g88
g89
ssg70
g1266
sg63
(lp1278
S':'
asbag56
(g77
g58
NtRp1279
(dp1280
g61
(dp1281
sg70
g1266
sg63
(lp1282
g56
(g57
g58
NtRp1283
(dp1284
g61
(dp1285
g69
I4
ssg70
g1279
sg63
(lp1286
S'XMLHttpRequest'
p1287
asbasbasbag56
(g72
g58
NtRp1288
(dp1289
g61
(dp1290
sg70
g821
sg63
(lp1291
g56
(g77
g58
NtRp1292
(dp1293
g61
(dp1294
g81
g82
ssg70
g1288
sg63
(lp1295
S'is_jython'
p1296
asbag56
(g77
g58
NtRp1297
(dp1298
g61
(dp1299
g88
g89
ssg70
g1288
sg63
(lp1300
S':'
asbag56
(g77
g58
NtRp1301
(dp1302
g61
(dp1303
sg70
g1288
sg63
(lp1304
g56
(g57
g58
NtRp1305
(dp1306
g61
(dp1307
g69
I4
ssg70
g1301
sg63
(lp1308
g980
asbasbasbag56
(g72
g58
NtRp1309
(dp1310
g61
(dp1311
sg70
g821
sg63
(lp1312
g56
(g77
g58
NtRp1313
(dp1314
g61
(dp1315
g81
g82
ssg70
g1309
sg63
(lp1316
S'path_info'
p1317
asbag56
(g77
g58
NtRp1318
(dp1319
g61
(dp1320
g88
g89
ssg70
g1309
sg63
(lp1321
S':'
asbag56
(g77
g58
NtRp1322
(dp1323
g61
(dp1324
sg70
g1309
sg63
(lp1325
g56
(g57
g58
NtRp1326
(dp1327
g61
(dp1328
g69
I4
ssg70
g1322
sg63
(lp1329
S'/admin/default/check_version'
p1330
asbasbasbag56
(g72
g58
NtRp1331
(dp1332
g61
(dp1333
sg70
g821
sg63
(lp1334
g56
(g77
g58
NtRp1335
(dp1336
g61
(dp1337
g81
g82
ssg70
g1331
sg63
(lp1338
S'query_string'
p1339
asbag56
(g77
g58
NtRp1340
(dp1341
g61
(dp1342
g88
g89
ssg70
g1331
sg63
(lp1343
S':'
asbag56
(g77
g58
NtRp1344
(dp1345
g61
(dp1346
sg70
g1331
sg63
(lp1347
g56
(g57
g58
NtRp1348
(dp1349
g61
(dp1350
g69
I4
ssg70
g1344
sg63
(lp1351
S''
asbasbasbag56
(g72
g58
NtRp1352
(dp1353
g61
(dp1354
sg70
g821
sg63
(lp1355
g56
(g77
g58
NtRp1356
(dp1357
g61
(dp1358
g81
g82
ssg70
g1352
sg63
(lp1359
S'remote_addr'
p1360
asbag56
(g77
g58
NtRp1361
(dp1362
g61
(dp1363
g88
g89
ssg70
g1352
sg63
(lp1364
S':'
asbag56
(g77
g58
NtRp1365
(dp1366
g61
(dp1367
sg70
g1352
sg63
(lp1368
g56
(g57
g58
NtRp1369
(dp1370
g61
(dp1371
g69
I4
ssg70
g1365
sg63
(lp1372
g189
asbasbasbag56
(g72
g58
NtRp1373
(dp1374
g61
(dp1375
sg70
g821
sg63
(lp1376
g56
(g77
g58
NtRp1377
(dp1378
g61
(dp1379
g81
g82
ssg70
g1373
sg63
(lp1380
S'remote_port'
p1381
asbag56
(g77
g58
NtRp1382
(dp1383
g61
(dp1384
g88
g89
ssg70
g1373
sg63
(lp1385
S':'
asbag56
(g77
g58
NtRp1386
(dp1387
g61
(dp1388
sg70
g1373
sg63
(lp1389
g56
(g57
g58
NtRp1390
(dp1391
g61
(dp1392
g69
I4
ssg70
g1386
sg63
(lp1393
S'54984'
p1394
asbasbasbag56
(g72
g58
NtRp1395
(dp1396
g61
(dp1397
sg70
g821
sg63
(lp1398
g56
(g77
g58
NtRp1399
(dp1400
g61
(dp1401
g81
g82
ssg70
g1395
sg63
(lp1402
S'request_method'
p1403
asbag56
(g77
g58
NtRp1404
(dp1405
g61
(dp1406
g88
g89
ssg70
g1395
sg63
(lp1407
S':'
asbag56
(g77
g58
NtRp1408
(dp1409
g61
(dp1410
sg70
g1395
sg63
(lp1411
g56
(g57
g58
NtRp1412
(dp1413
g61
(dp1414
g69
I4
ssg70
g1408
sg63
(lp1415
S'POST'
p1416
asbasbasbag56
(g72
g58
NtRp1417
(dp1418
g61
(dp1419
sg70
g821
sg63
(lp1420
g56
(g77
g58
NtRp1421
(dp1422
g61
(dp1423
g81
g82
ssg70
g1417
sg63
(lp1424
S'request_uri'
p1425
asbag56
(g77
g58
NtRp1426
(dp1427
g61
(dp1428
g88
g89
ssg70
g1417
sg63
(lp1429
S':'
asbag56
(g77
g58
NtRp1430
(dp1431
g61
(dp1432
sg70
g1417
sg63
(lp1433
g56
(g57
g58
NtRp1434
(dp1435
g61
(dp1436
g69
I4
ssg70
g1430
sg63
(lp1437
g1330
asbasbasbag56
(g72
g58
NtRp1438
(dp1439
g61
(dp1440
sg70
g821
sg63
(lp1441
g56
(g77
g58
NtRp1442
(dp1443
g61
(dp1444
g81
g82
ssg70
g1438
sg63
(lp1445
S'script_name'
p1446
asbag56
(g77
g58
NtRp1447
(dp1448
g61
(dp1449
g88
g89
ssg70
g1438
sg63
(lp1450
S':'
asbag56
(g77
g58
NtRp1451
(dp1452
g61
(dp1453
sg70
g1438
sg63
(lp1454
g56
(g57
g58
NtRp1455
(dp1456
g61
(dp1457
g69
I4
ssg70
g1451
sg63
(lp1458
S''
asbasbasbag56
(g72
g58
NtRp1459
(dp1460
g61
(dp1461
sg70
g821
sg63
(lp1462
g56
(g77
g58
NtRp1463
(dp1464
g61
(dp1465
g81
g82
ssg70
g1459
sg63
(lp1466
S'server_name'
p1467
asbag56
(g77
g58
NtRp1468
(dp1469
g61
(dp1470
g88
g89
ssg70
g1459
sg63
(lp1471
S':'
asbag56
(g77
g58
NtRp1472
(dp1473
g61
(dp1474
sg70
g1459
sg63
(lp1475
g56
(g57
g58
NtRp1476
(dp1477
g61
(dp1478
g69
I4
ssg70
g1472
sg63
(lp1479
S'Diotima'
p1480
asbasbasbag56
(g72
g58
NtRp1481
(dp1482
g61
(dp1483
sg70
g821
sg63
(lp1484
g56
(g77
g58
NtRp1485
(dp1486
g61
(dp1487
g81
g82
ssg70
g1481
sg63
(lp1488
S'server_port'
p1489
asbag56
(g77
g58
NtRp1490
(dp1491
g61
(dp1492
g88
g89
ssg70
g1481
sg63
(lp1493
S':'
asbag56
(g77
g58
NtRp1494
(dp1495
g61
(dp1496
sg70
g1481
sg63
(lp1497
g56
(g57
g58
NtRp1498
(dp1499
g61
(dp1500
g69
I4
ssg70
g1494
sg63
(lp1501
S'8000'
p1502
asbasbasbag56
(g72
g58
NtRp1503
(dp1504
g61
(dp1505
sg70
g821
sg63
(lp1506
g56
(g77
g58
NtRp1507
(dp1508
g61
(dp1509
g81
g82
ssg70
g1503
sg63
(lp1510
S'server_protocol'
p1511
asbag56
(g77
g58
NtRp1512
(dp1513
g61
(dp1514
g88
g89
ssg70
g1503
sg63
(lp1515
S':'
asbag56
(g77
g58
NtRp1516
(dp1517
g61
(dp1518
sg70
g1503
sg63
(lp1519
g56
(g57
g58
NtRp1520
(dp1521
g61
(dp1522
g69
I4
ssg70
g1516
sg63
(lp1523
S'HTTP/1.1'
p1524
asbasbasbag56
(g72
g58
NtRp1525
(dp1526
g61
(dp1527
sg70
g821
sg63
(lp1528
g56
(g77
g58
NtRp1529
(dp1530
g61
(dp1531
g81
g82
ssg70
g1525
sg63
(lp1532
S'server_software'
p1533
asbag56
(g77
g58
NtRp1534
(dp1535
g61
(dp1536
g88
g89
ssg70
g1525
sg63
(lp1537
S':'
asbag56
(g77
g58
NtRp1538
(dp1539
g61
(dp1540
sg70
g1525
sg63
(lp1541
g56
(g57
g58
NtRp1542
(dp1543
g61
(dp1544
g69
I4
ssg70
g1538
sg63
(lp1545
S'Rocket 1.2.4'
p1546
asbasbasbag56
(g72
g58
NtRp1547
(dp1548
g61
(dp1549
sg70
g821
sg63
(lp1550
g56
(g77
g58
NtRp1551
(dp1552
g61
(dp1553
g81
g82
ssg70
g1547
sg63
(lp1554
S'web2py_crontype'
p1555
asbag56
(g77
g58
NtRp1556
(dp1557
g61
(dp1558
g88
g89
ssg70
g1547
sg63
(lp1559
S':'
asbag56
(g77
g58
NtRp1560
(dp1561
g61
(dp1562
sg70
g1547
sg63
(lp1563
g56
(g57
g58
NtRp1564
(dp1565
g61
(dp1566
g69
I4
ssg70
g1560
sg63
(lp1567
S'hard'
p1568
asbasbasbag56
(g72
g58
NtRp1569
(dp1570
g61
(dp1571
sg70
g821
sg63
(lp1572
g56
(g77
g58
NtRp1573
(dp1574
g61
(dp1575
g81
g82
ssg70
g1569
sg63
(lp1576
S'web2py_original_uri'
p1577
asbag56
(g77
g58
NtRp1578
(dp1579
g61
(dp1580
g88
g89
ssg70
g1569
sg63
(lp1581
S':'
asbag56
(g77
g58
NtRp1582
(dp1583
g61
(dp1584
sg70
g1569
sg63
(lp1585
g56
(g57
g58
NtRp1586
(dp1587
g61
(dp1588
g69
I4
ssg70
g1582
sg63
(lp1589
g1330
asbasbasbag56
(g72
g58
NtRp1590
(dp1591
g61
(dp1592
sg70
g821
sg63
(lp1593
g56
(g77
g58
NtRp1594
(dp1595
g61
(dp1596
g81
g82
ssg70
g1590
sg63
(lp1597
S'web2py_path'
p1598
asbag56
(g77
g58
NtRp1599
(dp1600
g61
(dp1601
g88
g89
ssg70
g1590
sg63
(lp1602
S':'
asbag56
(g77
g58
NtRp1603
(dp1604
g61
(dp1605
sg70
g1590
sg63
(lp1606
g56
(g57
g58
NtRp1607
(dp1608
g61
(dp1609
g69
I4
ssg70
g1603
sg63
(lp1610
g868
asbasbasbag56
(g72
g58
NtRp1611
(dp1612
g61
(dp1613
sg70
g821
sg63
(lp1614
g56
(g77
g58
NtRp1615
(dp1616
g61
(dp1617
g81
g82
ssg70
g1611
sg63
(lp1618
S'web2py_version'
p1619
asbag56
(g77
g58
NtRp1620
(dp1621
g61
(dp1622
g88
g89
ssg70
g1611
sg63
(lp1623
S':'
asbag56
(g77
g58
NtRp1624
(dp1625
g61
(dp1626
sg70
g1611
sg63
(lp1627
g56
(g57
g58
NtRp1628
(dp1629
g61
(dp1630
g69
I4
ssg70
g1624
sg63
(lp1631
g56
(g65
g58
NtRp1632
(dp1633
g61
(dp1634
g69
I3
ssg70
Nsg63
(lp1635
g56
(g72
g58
NtRp1636
(dp1637
g61
(dp1638
sg70
g1632
sg63
(lp1639
g56
(g77
g58
NtRp1640
(dp1641
g61
(dp1642
sg70
g1636
sg63
(lp1643
g56
(g57
g58
NtRp1644
(dp1645
g61
(dp1646
g69
I3
ssg70
g1640
sg63
(lp1647
S'1'
asbasbasbag56
(g72
g58
NtRp1648
(dp1649
g61
(dp1650
sg70
g1632
sg63
(lp1651
g56
(g77
g58
NtRp1652
(dp1653
g61
(dp1654
sg70
g1648
sg63
(lp1655
g56
(g57
g58
NtRp1656
(dp1657
g61
(dp1658
g69
I3
ssg70
g1652
sg63
(lp1659
S'99'
p1660
asbasbasbag56
(g72
g58
NtRp1661
(dp1662
g61
(dp1663
sg70
g1632
sg63
(lp1664
g56
(g77
g58
NtRp1665
(dp1666
g61
(dp1667
sg70
g1661
sg63
(lp1668
g56
(g57
g58
NtRp1669
(dp1670
g61
(dp1671
g69
I3
ssg70
g1665
sg63
(lp1672
S'2'
asbasbasbag56
(g72
g58
NtRp1673
(dp1674
g61
(dp1675
sg70
g1632
sg63
(lp1676
g56
(g77
g58
NtRp1677
(dp1678
g61
(dp1679
sg70
g1673
sg63
(lp1680
g56
(g57
g58
NtRp1681
(dp1682
g61
(dp1683
g69
I3
ssg70
g1677
sg63
(lp1684
S'datetime.datetime(2011, 9, 26, 6, 55, 33)'
p1685
asbasbasbag56
(g72
g58
NtRp1686
(dp1687
g61
(dp1688
sg70
g1632
sg63
(lp1689
g56
(g77
g58
NtRp1690
(dp1691
g61
(dp1692
sg70
g1686
sg63
(lp1693
g56
(g57
g58
NtRp1694
(dp1695
g61
(dp1696
g69
I3
ssg70
g1690
sg63
(lp1697
S'stable'
p1698
asbasbasbasbasbasbasbag56
(g72
g58
NtRp1699
(dp1700
g61
(dp1701
sg70
g821
sg63
(lp1702
g56
(g77
g58
NtRp1703
(dp1704
g61
(dp1705
g81
g82
ssg70
g1699
sg63
(lp1706
S'wsgi_errors'
p1707
asbag56
(g77
g58
NtRp1708
(dp1709
g61
(dp1710
g88
g89
ssg70
g1699
sg63
(lp1711
S':'
asbag56
(g77
g58
NtRp1712
(dp1713
g61
(dp1714
sg70
g1699
sg63
(lp1715
g56
(g57
g58
NtRp1716
(dp1717
g61
(dp1718
g69
I4
ssg70
g1712
sg63
(lp1719
S"<open file '<stderr>', mode 'w' at 0x7fe9acfe5270>"
p1720
asbasbasbag56
(g72
g58
NtRp1721
(dp1722
g61
(dp1723
sg70
g821
sg63
(lp1724
g56
(g77
g58
NtRp1725
(dp1726
g61
(dp1727
g81
g82
ssg70
g1721
sg63
(lp1728
S'wsgi_file_wrapper'
p1729
asbag56
(g77
g58
NtRp1730
(dp1731
g61
(dp1732
g88
g89
ssg70
g1721
sg63
(lp1733
S':'
asbag56
(g77
g58
NtRp1734
(dp1735
g61
(dp1736
sg70
g1721
sg63
(lp1737
g56
(g57
g58
NtRp1738
(dp1739
g61
(dp1740
g69
I4
ssg70
g1734
sg63
(lp1741
S'<class wsgiref.util.FileWrapper at 0x1d85db8>'
p1742
asbasbasbag56
(g72
g58
NtRp1743
(dp1744
g61
(dp1745
sg70
g821
sg63
(lp1746
g56
(g77
g58
NtRp1747
(dp1748
g61
(dp1749
g81
g82
ssg70
g1743
sg63
(lp1750
S'wsgi_input'
p1751
asbag56
(g77
g58
NtRp1752
(dp1753
g61
(dp1754
g88
g89
ssg70
g1743
sg63
(lp1755
S':'
asbag56
(g77
g58
NtRp1756
(dp1757
g61
(dp1758
sg70
g1743
sg63
(lp1759
g56
(g57
g58
NtRp1760
(dp1761
g61
(dp1762
g69
I4
ssg70
g1756
sg63
(lp1763
S'<socket._fileobject object at 0x7fe970437ed0>'
p1764
asbasbasbag56
(g72
g58
NtRp1765
(dp1766
g61
(dp1767
sg70
g821
sg63
(lp1768
g56
(g77
g58
NtRp1769
(dp1770
g61
(dp1771
g81
g82
ssg70
g1765
sg63
(lp1772
S'wsgi_multiprocess'
p1773
asbag56
(g77
g58
NtRp1774
(dp1775
g61
(dp1776
g88
g89
ssg70
g1765
sg63
(lp1777
S':'
asbag56
(g77
g58
NtRp1778
(dp1779
g61
(dp1780
sg70
g1765
sg63
(lp1781
g56
(g57
g58
NtRp1782
(dp1783
g61
(dp1784
g69
I4
ssg70
g1778
sg63
(lp1785
g980
asbasbasbag56
(g72
g58
NtRp1786
(dp1787
g61
(dp1788
sg70
g821
sg63
(lp1789
g56
(g77
g58
NtRp1790
(dp1791
g61
(dp1792
g81
g82
ssg70
g1786
sg63
(lp1793
S'wsgi_multithread'
p1794
asbag56
(g77
g58
NtRp1795
(dp1796
g61
(dp1797
g88
g89
ssg70
g1786
sg63
(lp1798
S':'
asbag56
(g77
g58
NtRp1799
(dp1800
g61
(dp1801
sg70
g1786
sg63
(lp1802
g56
(g57
g58
NtRp1803
(dp1804
g61
(dp1805
g69
I4
ssg70
g1799
sg63
(lp1806
g99
asbasbasbag56
(g72
g58
NtRp1807
(dp1808
g61
(dp1809
sg70
g821
sg63
(lp1810
g56
(g77
g58
NtRp1811
(dp1812
g61
(dp1813
g81
g82
ssg70
g1807
sg63
(lp1814
S'wsgi_run_once'
p1815
asbag56
(g77
g58
NtRp1816
(dp1817
g61
(dp1818
g88
g89
ssg70
g1807
sg63
(lp1819
S':'
asbag56
(g77
g58
NtRp1820
(dp1821
g61
(dp1822
sg70
g1807
sg63
(lp1823
g56
(g57
g58
NtRp1824
(dp1825
g61
(dp1826
g69
I4
ssg70
g1820
sg63
(lp1827
g980
asbasbasbag56
(g72
g58
NtRp1828
(dp1829
g61
(dp1830
sg70
g821
sg63
(lp1831
g56
(g77
g58
NtRp1832
(dp1833
g61
(dp1834
g81
g82
ssg70
g1828
sg63
(lp1835
S'wsgi_url_scheme'
p1836
asbag56
(g77
g58
NtRp1837
(dp1838
g61
(dp1839
g88
g89
ssg70
g1828
sg63
(lp1840
S':'
asbag56
(g77
g58
NtRp1841
(dp1842
g61
(dp1843
sg70
g1828
sg63
(lp1844
g56
(g57
g58
NtRp1845
(dp1846
g61
(dp1847
g69
I4
ssg70
g1841
sg63
(lp1848
S'http'
p1849
asbasbasbag56
(g72
g58
NtRp1850
(dp1851
g61
(dp1852
sg70
g821
sg63
(lp1853
g56
(g77
g58
NtRp1854
(dp1855
g61
(dp1856
g81
g82
ssg70
g1850
sg63
(lp1857
S'wsgi_version'
p1858
asbag56
(g77
g58
NtRp1859
(dp1860
g61
(dp1861
g88
g89
ssg70
g1850
sg63
(lp1862
S':'
asbag56
(g77
g58
NtRp1863
(dp1864
g61
(dp1865
sg70
g1850
sg63
(lp1866
g56
(g57
g58
NtRp1867
(dp1868
g61
(dp1869
g69
I4
ssg70
g1863
sg63
(lp1870
g56
(g65
g58
NtRp1871
(dp1872
g61
(dp1873
g69
I3
ssg70
Nsg63
(lp1874
g56
(g72
g58
NtRp1875
(dp1876
g61
(dp1877
sg70
g1871
sg63
(lp1878
g56
(g77
g58
NtRp1879
(dp1880
g61
(dp1881
sg70
g1875
sg63
(lp1882
g56
(g57
g58
NtRp1883
(dp1884
g61
(dp1885
g69
I3
ssg70
g1879
sg63
(lp1886
S'1'
asbasbasbag56
(g72
g58
NtRp1887
(dp1888
g61
(dp1889
sg70
g1871
sg63
(lp1890
g56
(g77
g58
NtRp1891
(dp1892
g61
(dp1893
sg70
g1887
sg63
(lp1894
g56
(g57
g58
NtRp1895
(dp1896
g61
(dp1897
g69
I3
ssg70
g1891
sg63
(lp1898
S'0'
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp1899
(dp1900
g61
(dp1901
sg70
g66
sg63
(lp1902
g56
(g77
g58
NtRp1903
(dp1904
g61
(dp1905
g81
g82
ssg70
g1899
sg63
(lp1906
S'extension'
p1907
asbag56
(g77
g58
NtRp1908
(dp1909
g61
(dp1910
g88
g89
ssg70
g1899
sg63
(lp1911
S':'
asbag56
(g77
g58
NtRp1912
(dp1913
g61
(dp1914
sg70
g1899
sg63
(lp1915
g56
(g57
g58
NtRp1916
(dp1917
g61
(dp1918
g69
I5
ssg70
g1912
sg63
(lp1919
S'html'
p1920
asbasbasbag56
(g72
g58
NtRp1921
(dp1922
g61
(dp1923
sg70
g66
sg63
(lp1924
g56
(g77
g58
NtRp1925
(dp1926
g61
(dp1927
g81
g82
ssg70
g1921
sg63
(lp1928
S'folder'
p1929
asbag56
(g77
g58
NtRp1930
(dp1931
g61
(dp1932
g88
g89
ssg70
g1921
sg63
(lp1933
S':'
asbag56
(g77
g58
NtRp1934
(dp1935
g61
(dp1936
sg70
g1921
sg63
(lp1937
g56
(g57
g58
NtRp1938
(dp1939
g61
(dp1940
g69
I5
ssg70
g1934
sg63
(lp1941
S'/media/misperoles/git/pyj3nnn1/web2py/applications/admin/'
p1942
asbasbasbag56
(g72
g58
NtRp1943
(dp1944
g61
(dp1945
sg70
g66
sg63
(lp1946
g56
(g77
g58
NtRp1947
(dp1948
g61
(dp1949
g81
g82
ssg70
g1943
sg63
(lp1950
S'function'
p1951
asbag56
(g77
g58
NtRp1952
(dp1953
g61
(dp1954
g88
g89
ssg70
g1943
sg63
(lp1955
S':'
asbag56
(g77
g58
NtRp1956
(dp1957
g61
(dp1958
sg70
g1943
sg63
(lp1959
g56
(g57
g58
NtRp1960
(dp1961
g61
(dp1962
g69
I5
ssg70
g1956
sg63
(lp1963
S'check_version'
p1964
asbasbasbag56
(g72
g58
NtRp1965
(dp1966
g61
(dp1967
sg70
g66
sg63
(lp1968
g56
(g77
g58
NtRp1969
(dp1970
g61
(dp1971
g81
g82
ssg70
g1965
sg63
(lp1972
S'get_vars'
p1973
asbag56
(g77
g58
NtRp1974
(dp1975
g61
(dp1976
g88
g89
ssg70
g1965
sg63
(lp1977
S':'
asbag56
(g77
g58
NtRp1978
(dp1979
g61
(dp1980
sg70
g1965
sg63
(lp1981
g56
(g57
g58
NtRp1982
(dp1983
g61
(dp1984
g69
I5
ssg70
g1978
sg63
(lp1985
g56
(g65
g58
NtRp1986
(dp1987
g61
(dp1988
g69
I4
ssg70
Nsg63
(lp1989
sbasbasbasbag56
(g72
g58
NtRp1990
(dp1991
g61
(dp1992
sg70
g66
sg63
(lp1993
g56
(g77
g58
NtRp1994
(dp1995
g61
(dp1996
g81
g82
ssg70
g1990
sg63
(lp1997
S'global_settings'
p1998
asbag56
(g77
g58
NtRp1999
(dp2000
g61
(dp2001
g88
g89
ssg70
g1990
sg63
(lp2002
S':'
asbag56
(g77
g58
NtRp2003
(dp2004
g61
(dp2005
sg70
g1990
sg63
(lp2006
g56
(g57
g58
NtRp2007
(dp2008
g61
(dp2009
g69
I5
ssg70
g2003
sg63
(lp2010
g56
(g65
g58
NtRp2011
(dp2012
g61
(dp2013
g69
I4
ssg70
Nsg63
(lp2014
g56
(g72
g58
NtRp2015
(dp2016
g61
(dp2017
sg70
g2011
sg63
(lp2018
g56
(g77
g58
NtRp2019
(dp2020
g61
(dp2021
g81
g82
ssg70
g2015
sg63
(lp2022
g833
asbag56
(g77
g58
NtRp2023
(dp2024
g61
(dp2025
g88
g89
ssg70
g2015
sg63
(lp2026
S':'
asbag56
(g77
g58
NtRp2027
(dp2028
g61
(dp2029
sg70
g2015
sg63
(lp2030
g56
(g57
g58
NtRp2031
(dp2032
g61
(dp2033
g69
I4
ssg70
g2027
sg63
(lp2034
S"set(['/media/misperoles/git/pyj3nnn1/web2py/applications/admin/', '/media/misperoles/git/pyj3nnn1/web2py/applications/blog/', '/media/misperoles/git/pyj3nnn1/web2py/applications/welcome/'])"
p2035
asbasbasbag56
(g72
g58
NtRp2036
(dp2037
g61
(dp2038
sg70
g2011
sg63
(lp2039
g56
(g77
g58
NtRp2040
(dp2041
g61
(dp2042
g81
g82
ssg70
g2036
sg63
(lp2043
g855
asbag56
(g77
g58
NtRp2044
(dp2045
g61
(dp2046
g88
g89
ssg70
g2036
sg63
(lp2047
S':'
asbag56
(g77
g58
NtRp2048
(dp2049
g61
(dp2050
sg70
g2036
sg63
(lp2051
g56
(g57
g58
NtRp2052
(dp2053
g61
(dp2054
g69
I4
ssg70
g2048
sg63
(lp2055
g868
asbasbasbag56
(g72
g58
NtRp2056
(dp2057
g61
(dp2058
sg70
g2011
sg63
(lp2059
g56
(g77
g58
NtRp2060
(dp2061
g61
(dp2062
g81
g82
ssg70
g2056
sg63
(lp2063
g877
asbag56
(g77
g58
NtRp2064
(dp2065
g61
(dp2066
g88
g89
ssg70
g2056
sg63
(lp2067
S':'
asbag56
(g77
g58
NtRp2068
(dp2069
g61
(dp2070
sg70
g2056
sg63
(lp2071
g56
(g57
g58
NtRp2072
(dp2073
g61
(dp2074
g69
I4
ssg70
g2068
sg63
(lp2075
g56
(g65
g58
NtRp2076
(dp2077
g61
(dp2078
g69
I3
ssg70
Nsg63
(lp2079
sbasbasbasbag56
(g72
g58
NtRp2080
(dp2081
g61
(dp2082
sg70
g2011
sg63
(lp2083
g56
(g77
g58
NtRp2084
(dp2085
g61
(dp2086
g81
g82
ssg70
g2080
sg63
(lp2087
g902
asbag56
(g77
g58
NtRp2088
(dp2089
g61
(dp2090
g88
g89
ssg70
g2080
sg63
(lp2091
S':'
asbag56
(g77
g58
NtRp2092
(dp2093
g61
(dp2094
sg70
g2080
sg63
(lp2095
g56
(g57
g58
NtRp2096
(dp2097
g61
(dp2098
g69
I4
ssg70
g2092
sg63
(lp2099
S"<Values at 0x1cdc7e8: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'Diotima', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/media/misperoles/git/pyj3nnn1/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'plain': False, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'numthreads': None, 'nobanner': False}>"
p2100
asbasbasbag56
(g72
g58
NtRp2101
(dp2102
g61
(dp2103
sg70
g2011
sg63
(lp2104
g56
(g77
g58
NtRp2105
(dp2106
g61
(dp2107
g81
g82
ssg70
g2101
sg63
(lp2108
g945
asbag56
(g77
g58
NtRp2109
(dp2110
g61
(dp2111
g88
g89
ssg70
g2101
sg63
(lp2112
S':'
asbag56
(g77
g58
NtRp2113
(dp2114
g61
(dp2115
sg70
g2101
sg63
(lp2116
g56
(g57
g58
NtRp2117
(dp2118
g61
(dp2119
g69
I4
ssg70
g2113
sg63
(lp2120
S'set([])'
p2121
asbasbasbag56
(g72
g58
NtRp2122
(dp2123
g61
(dp2124
sg70
g2011
sg63
(lp2125
g56
(g77
g58
NtRp2126
(dp2127
g61
(dp2128
g81
g82
ssg70
g2122
sg63
(lp2129
g967
asbag56
(g77
g58
NtRp2130
(dp2131
g61
(dp2132
g88
g89
ssg70
g2122
sg63
(lp2133
S':'
asbag56
(g77
g58
NtRp2134
(dp2135
g61
(dp2136
sg70
g2122
sg63
(lp2137
g56
(g57
g58
NtRp2138
(dp2139
g61
(dp2140
g69
I4
ssg70
g2134
sg63
(lp2141
g980
asbasbasbag56
(g72
g58
NtRp2142
(dp2143
g61
(dp2144
sg70
g2011
sg63
(lp2145
g56
(g77
g58
NtRp2146
(dp2147
g61
(dp2148
g81
g82
ssg70
g2142
sg63
(lp2149
g989
asbag56
(g77
g58
NtRp2150
(dp2151
g61
(dp2152
g88
g89
ssg70
g2142
sg63
(lp2153
S':'
asbag56
(g77
g58
NtRp2154
(dp2155
g61
(dp2156
sg70
g2142
sg63
(lp2157
g56
(g57
g58
NtRp2158
(dp2159
g61
(dp2160
g69
I4
ssg70
g2154
sg63
(lp2161
g1002
asbasbasbag56
(g72
g58
NtRp2162
(dp2163
g61
(dp2164
sg70
g2011
sg63
(lp2165
g56
(g77
g58
NtRp2166
(dp2167
g61
(dp2168
g81
g82
ssg70
g2162
sg63
(lp2169
g1296
asbag56
(g77
g58
NtRp2170
(dp2171
g61
(dp2172
g88
g89
ssg70
g2162
sg63
(lp2173
S':'
asbag56
(g77
g58
NtRp2174
(dp2175
g61
(dp2176
sg70
g2162
sg63
(lp2177
g56
(g57
g58
NtRp2178
(dp2179
g61
(dp2180
g69
I4
ssg70
g2174
sg63
(lp2181
g980
asbasbasbag56
(g72
g58
NtRp2182
(dp2183
g61
(dp2184
sg70
g2011
sg63
(lp2185
g56
(g77
g58
NtRp2186
(dp2187
g61
(dp2188
g81
g82
ssg70
g2182
sg63
(lp2189
g1555
asbag56
(g77
g58
NtRp2190
(dp2191
g61
(dp2192
g88
g89
ssg70
g2182
sg63
(lp2193
S':'
asbag56
(g77
g58
NtRp2194
(dp2195
g61
(dp2196
sg70
g2182
sg63
(lp2197
g56
(g57
g58
NtRp2198
(dp2199
g61
(dp2200
g69
I4
ssg70
g2194
sg63
(lp2201
g1568
asbasbasbag56
(g72
g58
NtRp2202
(dp2203
g61
(dp2204
sg70
g2011
sg63
(lp2205
g56
(g77
g58
NtRp2206
(dp2207
g61
(dp2208
g81
g82
ssg70
g2202
sg63
(lp2209
g1619
asbag56
(g77
g58
NtRp2210
(dp2211
g61
(dp2212
g88
g89
ssg70
g2202
sg63
(lp2213
S':'
asbag56
(g77
g58
NtRp2214
(dp2215
g61
(dp2216
sg70
g2202
sg63
(lp2217
g56
(g57
g58
NtRp2218
(dp2219
g61
(dp2220
g69
I4
ssg70
g2214
sg63
(lp2221
g56
(g65
g58
NtRp2222
(dp2223
g61
(dp2224
g69
I3
ssg70
Nsg63
(lp2225
g56
(g72
g58
NtRp2226
(dp2227
g61
(dp2228
sg70
g2222
sg63
(lp2229
g56
(g77
g58
NtRp2230
(dp2231
g61
(dp2232
sg70
g2226
sg63
(lp2233
g56
(g57
g58
NtRp2234
(dp2235
g61
(dp2236
g69
I3
ssg70
g2230
sg63
(lp2237
S'1'
asbasbasbag56
(g72
g58
NtRp2238
(dp2239
g61
(dp2240
sg70
g2222
sg63
(lp2241
g56
(g77
g58
NtRp2242
(dp2243
g61
(dp2244
sg70
g2238
sg63
(lp2245
g56
(g57
g58
NtRp2246
(dp2247
g61
(dp2248
g69
I3
ssg70
g2242
sg63
(lp2249
S'99'
p2250
asbasbasbag56
(g72
g58
NtRp2251
(dp2252
g61
(dp2253
sg70
g2222
sg63
(lp2254
g56
(g77
g58
NtRp2255
(dp2256
g61
(dp2257
sg70
g2251
sg63
(lp2258
g56
(g57
g58
NtRp2259
(dp2260
g61
(dp2261
g69
I3
ssg70
g2255
sg63
(lp2262
S'2'
asbasbasbag56
(g72
g58
NtRp2263
(dp2264
g61
(dp2265
sg70
g2222
sg63
(lp2266
g56
(g77
g58
NtRp2267
(dp2268
g61
(dp2269
sg70
g2263
sg63
(lp2270
g56
(g57
g58
NtRp2271
(dp2272
g61
(dp2273
g69
I3
ssg70
g2267
sg63
(lp2274
S'datetime.datetime(2011, 9, 26, 6, 55, 33)'
p2275
asbasbasbag56
(g72
g58
NtRp2276
(dp2277
g61
(dp2278
sg70
g2222
sg63
(lp2279
g56
(g77
g58
NtRp2280
(dp2281
g61
(dp2282
sg70
g2276
sg63
(lp2283
g56
(g57
g58
NtRp2284
(dp2285
g61
(dp2286
g69
I3
ssg70
g2280
sg63
(lp2287
g1698
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp2288
(dp2289
g61
(dp2290
sg70
g66
sg63
(lp2291
g56
(g77
g58
NtRp2292
(dp2293
g61
(dp2294
g81
g82
ssg70
g2288
sg63
(lp2295
S'is_https'
p2296
asbag56
(g77
g58
NtRp2297
(dp2298
g61
(dp2299
g88
g89
ssg70
g2288
sg63
(lp2300
S':'
asbag56
(g77
g58
NtRp2301
(dp2302
g61
(dp2303
sg70
g2288
sg63
(lp2304
g56
(g57
g58
NtRp2305
(dp2306
g61
(dp2307
g69
I5
ssg70
g2301
sg63
(lp2308
g980
asbasbasbag56
(g72
g58
NtRp2309
(dp2310
g61
(dp2311
sg70
g66
sg63
(lp2312
g56
(g77
g58
NtRp2313
(dp2314
g61
(dp2315
g81
g82
ssg70
g2309
sg63
(lp2316
S'is_local'
p2317
asbag56
(g77
g58
NtRp2318
(dp2319
g61
(dp2320
g88
g89
ssg70
g2309
sg63
(lp2321
S':'
asbag56
(g77
g58
NtRp2322
(dp2323
g61
(dp2324
sg70
g2309
sg63
(lp2325
g56
(g57
g58
NtRp2326
(dp2327
g61
(dp2328
g69
I5
ssg70
g2322
sg63
(lp2329
g99
asbasbasbag56
(g72
g58
NtRp2330
(dp2331
g61
(dp2332
sg70
g66
sg63
(lp2333
g56
(g77
g58
NtRp2334
(dp2335
g61
(dp2336
g81
g82
ssg70
g2330
sg63
(lp2337
S'is_restful'
p2338
asbag56
(g77
g58
NtRp2339
(dp2340
g61
(dp2341
g88
g89
ssg70
g2330
sg63
(lp2342
S':'
asbag56
(g77
g58
NtRp2343
(dp2344
g61
(dp2345
sg70
g2330
sg63
(lp2346
g56
(g57
g58
NtRp2347
(dp2348
g61
(dp2349
g69
I5
ssg70
g2343
sg63
(lp2350
g980
asbasbasbag56
(g72
g58
NtRp2351
(dp2352
g61
(dp2353
sg70
g66
sg63
(lp2354
g56
(g77
g58
NtRp2355
(dp2356
g61
(dp2357
g81
g82
ssg70
g2351
sg63
(lp2358
S'now'
p2359
asbag56
(g77
g58
NtRp2360
(dp2361
g61
(dp2362
g88
g89
ssg70
g2351
sg63
(lp2363
S':'
asbag56
(g77
g58
NtRp2364
(dp2365
g61
(dp2366
sg70
g2351
sg63
(lp2367
g56
(g57
g58
NtRp2368
(dp2369
g61
(dp2370
g69
I5
ssg70
g2364
sg63
(lp2371
S'datetime.datetime(2012, 1, 21, 19, 30, 49, 204552)'
p2372
asbasbasbag56
(g72
g58
NtRp2373
(dp2374
g61
(dp2375
sg70
g66
sg63
(lp2376
g56
(g77
g58
NtRp2377
(dp2378
g61
(dp2379
g81
g82
ssg70
g2373
sg63
(lp2380
S'post_vars'
p2381
asbag56
(g77
g58
NtRp2382
(dp2383
g61
(dp2384
g88
g89
ssg70
g2373
sg63
(lp2385
S':'
asbag56
(g77
g58
NtRp2386
(dp2387
g61
(dp2388
sg70
g2373
sg63
(lp2389
g56
(g57
g58
NtRp2390
(dp2391
g61
(dp2392
g69
I5
ssg70
g2386
sg63
(lp2393
g56
(g65
g58
NtRp2394
(dp2395
g61
(dp2396
g69
I4
ssg70
Nsg63
(lp2397
sbasbasbasbag56
(g72
g58
NtRp2398
(dp2399
g61
(dp2400
sg70
g66
sg63
(lp2401
g56
(g77
g58
NtRp2402
(dp2403
g61
(dp2404
g81
g82
ssg70
g2398
sg63
(lp2405
S'url'
p2406
asbag56
(g77
g58
NtRp2407
(dp2408
g61
(dp2409
g88
g89
ssg70
g2398
sg63
(lp2410
S':'
asbag56
(g77
g58
NtRp2411
(dp2412
g61
(dp2413
sg70
g2398
sg63
(lp2414
g56
(g57
g58
NtRp2415
(dp2416
g61
(dp2417
g69
I5
ssg70
g2411
sg63
(lp2418
S'/admin/default/check_version'
p2419
asbasbasbag56
(g72
g58
NtRp2420
(dp2421
g61
(dp2422
sg70
g66
sg63
(lp2423
g56
(g77
g58
NtRp2424
(dp2425
g61
(dp2426
g81
g82
ssg70
g2420
sg63
(lp2427
S'utcnow'
p2428
asbag56
(g77
g58
NtRp2429
(dp2430
g61
(dp2431
g88
g89
ssg70
g2420
sg63
(lp2432
S':'
asbag56
(g77
g58
NtRp2433
(dp2434
g61
(dp2435
sg70
g2420
sg63
(lp2436
g56
(g57
g58
NtRp2437
(dp2438
g61
(dp2439
g69
I5
ssg70
g2433
sg63
(lp2440
S'datetime.datetime(2012, 1, 22, 0, 0, 49, 204595)'
p2441
asbasbasbag56
(g72
g58
NtRp2442
(dp2443
g61
(dp2444
sg70
g66
sg63
(lp2445
g56
(g77
g58
NtRp2446
(dp2447
g61
(dp2448
g81
g82
ssg70
g2442
sg63
(lp2449
S'uuid'
p2450
asbag56
(g77
g58
NtRp2451
(dp2452
g61
(dp2453
g88
g89
ssg70
g2442
sg63
(lp2454
S':'
asbag56
(g77
g58
NtRp2455
(dp2456
g61
(dp2457
sg70
g2442
sg63
(lp2458
g56
(g57
g58
NtRp2459
(dp2460
g61
(dp2461
g69
I5
ssg70
g2455
sg63
(lp2462
S'admin/127.0.0.1.2012-01-21.19-30-49.c0a7723f-f80f-4536-a4dd-1fb92598ef37'
p2463
asbasbasbag56
(g72
g58
NtRp2464
(dp2465
g61
(dp2466
sg70
g66
sg63
(lp2467
g56
(g77
g58
NtRp2468
(dp2469
g61
(dp2470
g81
g82
ssg70
g2464
sg63
(lp2471
S'vars'
p2472
asbag56
(g77
g58
NtRp2473
(dp2474
g61
(dp2475
g88
g89
ssg70
g2464
sg63
(lp2476
S':'
asbag56
(g77
g58
NtRp2477
(dp2478
g61
(dp2479
sg70
g2464
sg63
(lp2480
g56
(g57
g58
NtRp2481
(dp2482
g61
(dp2483
g69
I5
ssg70
g2477
sg63
(lp2484
g56
(g65
g58
NtRp2485
(dp2486
g61
(dp2487
g69
I4
ssg70
Nsg63
(lp2488
sbasbasbasbag56
(g72
g58
NtRp2489
(dp2490
g61
(dp2491
sg70
g66
sg63
(lp2492
g56
(g77
g58
NtRp2493
(dp2494
g61
(dp2495
g81
g82
ssg70
g2489
sg63
(lp2496
S'wsgi'
p2497
asbag56
(g77
g58
NtRp2498
(dp2499
g61
(dp2500
g88
g89
ssg70
g2489
sg63
(lp2501
S':'
asbag56
(g77
g58
NtRp2502
(dp2503
g61
(dp2504
sg70
g2489
sg63
(lp2505
g56
(g57
g58
NtRp2506
(dp2507
g61
(dp2508
g69
I5
ssg70
g2502
sg63
(lp2509
g56
(g65
g58
NtRp2510
(dp2511
g61
(dp2512
g69
I4
ssg70
Nsg63
(lp2513
g56
(g72
g58
NtRp2514
(dp2515
g61
(dp2516
sg70
g2510
sg63
(lp2517
g56
(g77
g58
NtRp2518
(dp2519
g61
(dp2520
g81
g82
ssg70
g2514
sg63
(lp2521
S'environ'
p2522
asbag56
(g77
g58
NtRp2523
(dp2524
g61
(dp2525
g88
g89
ssg70
g2514
sg63
(lp2526
S':'
asbag56
(g77
g58
NtRp2527
(dp2528
g61
(dp2529
sg70
g2514
sg63
(lp2530
g56
(g57
g58
NtRp2531
(dp2532
g61
(dp2533
g69
I4
ssg70
g2527
sg63
(lp2534
g56
(g65
g58
NtRp2535
(dp2536
g61
(dp2537
g69
I3
ssg70
Nsg63
(lp2538
g56
(g72
g58
NtRp2539
(dp2540
g61
(dp2541
sg70
g2535
sg63
(lp2542
g56
(g77
g58
NtRp2543
(dp2544
g61
(dp2545
g81
g82
ssg70
g2539
sg63
(lp2546
S'CONTENT_LENGTH'
p2547
asbag56
(g77
g58
NtRp2548
(dp2549
g61
(dp2550
g88
g89
ssg70
g2539
sg63
(lp2551
S':'
asbag56
(g77
g58
NtRp2552
(dp2553
g61
(dp2554
sg70
g2539
sg63
(lp2555
g56
(g57
g58
NtRp2556
(dp2557
g61
(dp2558
g69
I3
ssg70
g2552
sg63
(lp2559
S'0'
asbasbasbag56
(g72
g58
NtRp2560
(dp2561
g61
(dp2562
sg70
g2535
sg63
(lp2563
g56
(g77
g58
NtRp2564
(dp2565
g61
(dp2566
g81
g82
ssg70
g2560
sg63
(lp2567
S'HTTP_ACCEPT'
p2568
asbag56
(g77
g58
NtRp2569
(dp2570
g61
(dp2571
g88
g89
ssg70
g2560
sg63
(lp2572
S':'
asbag56
(g77
g58
NtRp2573
(dp2574
g61
(dp2575
sg70
g2560
sg63
(lp2576
g56
(g57
g58
NtRp2577
(dp2578
g61
(dp2579
g69
I3
ssg70
g2573
sg63
(lp2580
g1024
asbasbasbag56
(g72
g58
NtRp2581
(dp2582
g61
(dp2583
sg70
g2535
sg63
(lp2584
g56
(g77
g58
NtRp2585
(dp2586
g61
(dp2587
g81
g82
ssg70
g2581
sg63
(lp2588
S'HTTP_ACCEPT_CHARSET'
p2589
asbag56
(g77
g58
NtRp2590
(dp2591
g61
(dp2592
g88
g89
ssg70
g2581
sg63
(lp2593
S':'
asbag56
(g77
g58
NtRp2594
(dp2595
g61
(dp2596
sg70
g2581
sg63
(lp2597
g56
(g57
g58
NtRp2598
(dp2599
g61
(dp2600
g69
I3
ssg70
g2594
sg63
(lp2601
g1046
asbasbasbag56
(g72
g58
NtRp2602
(dp2603
g61
(dp2604
sg70
g2535
sg63
(lp2605
g56
(g77
g58
NtRp2606
(dp2607
g61
(dp2608
g81
g82
ssg70
g2602
sg63
(lp2609
S'HTTP_ACCEPT_ENCODING'
p2610
asbag56
(g77
g58
NtRp2611
(dp2612
g61
(dp2613
g88
g89
ssg70
g2602
sg63
(lp2614
S':'
asbag56
(g77
g58
NtRp2615
(dp2616
g61
(dp2617
sg70
g2602
sg63
(lp2618
g56
(g57
g58
NtRp2619
(dp2620
g61
(dp2621
g69
I3
ssg70
g2615
sg63
(lp2622
g1068
asbasbasbag56
(g72
g58
NtRp2623
(dp2624
g61
(dp2625
sg70
g2535
sg63
(lp2626
g56
(g77
g58
NtRp2627
(dp2628
g61
(dp2629
g81
g82
ssg70
g2623
sg63
(lp2630
S'HTTP_ACCEPT_LANGUAGE'
p2631
asbag56
(g77
g58
NtRp2632
(dp2633
g61
(dp2634
g88
g89
ssg70
g2623
sg63
(lp2635
S':'
asbag56
(g77
g58
NtRp2636
(dp2637
g61
(dp2638
sg70
g2623
sg63
(lp2639
g56
(g57
g58
NtRp2640
(dp2641
g61
(dp2642
g69
I3
ssg70
g2636
sg63
(lp2643
g1090
asbasbasbag56
(g72
g58
NtRp2644
(dp2645
g61
(dp2646
sg70
g2535
sg63
(lp2647
g56
(g77
g58
NtRp2648
(dp2649
g61
(dp2650
g81
g82
ssg70
g2644
sg63
(lp2651
S'HTTP_CACHE_CONTROL'
p2652
asbag56
(g77
g58
NtRp2653
(dp2654
g61
(dp2655
g88
g89
ssg70
g2644
sg63
(lp2656
S':'
asbag56
(g77
g58
NtRp2657
(dp2658
g61
(dp2659
sg70
g2644
sg63
(lp2660
g56
(g57
g58
NtRp2661
(dp2662
g61
(dp2663
g69
I3
ssg70
g2657
sg63
(lp2664
g1112
asbasbasbag56
(g72
g58
NtRp2665
(dp2666
g61
(dp2667
sg70
g2535
sg63
(lp2668
g56
(g77
g58
NtRp2669
(dp2670
g61
(dp2671
g81
g82
ssg70
g2665
sg63
(lp2672
S'HTTP_CONNECTION'
p2673
asbag56
(g77
g58
NtRp2674
(dp2675
g61
(dp2676
g88
g89
ssg70
g2665
sg63
(lp2677
S':'
asbag56
(g77
g58
NtRp2678
(dp2679
g61
(dp2680
sg70
g2665
sg63
(lp2681
g56
(g57
g58
NtRp2682
(dp2683
g61
(dp2684
g69
I3
ssg70
g2678
sg63
(lp2685
g1134
asbasbasbag56
(g72
g58
NtRp2686
(dp2687
g61
(dp2688
sg70
g2535
sg63
(lp2689
g56
(g77
g58
NtRp2690
(dp2691
g61
(dp2692
g81
g82
ssg70
g2686
sg63
(lp2693
S'HTTP_CONTENT_LENGTH'
p2694
asbag56
(g77
g58
NtRp2695
(dp2696
g61
(dp2697
g88
g89
ssg70
g2686
sg63
(lp2698
S':'
asbag56
(g77
g58
NtRp2699
(dp2700
g61
(dp2701
sg70
g2686
sg63
(lp2702
g56
(g57
g58
NtRp2703
(dp2704
g61
(dp2705
g69
I3
ssg70
g2699
sg63
(lp2706
S'0'
asbasbasbag56
(g72
g58
NtRp2707
(dp2708
g61
(dp2709
sg70
g2535
sg63
(lp2710
g56
(g77
g58
NtRp2711
(dp2712
g61
(dp2713
g81
g82
ssg70
g2707
sg63
(lp2714
S'HTTP_COOKIE'
p2715
asbag56
(g77
g58
NtRp2716
(dp2717
g61
(dp2718
g88
g89
ssg70
g2707
sg63
(lp2719
S':'
asbag56
(g77
g58
NtRp2720
(dp2721
g61
(dp2722
sg70
g2707
sg63
(lp2723
g56
(g57
g58
NtRp2724
(dp2725
g61
(dp2726
g69
I3
ssg70
g2720
sg63
(lp2727
g1177
asbasbasbag56
(g72
g58
NtRp2728
(dp2729
g61
(dp2730
sg70
g2535
sg63
(lp2731
g56
(g77
g58
NtRp2732
(dp2733
g61
(dp2734
g81
g82
ssg70
g2728
sg63
(lp2735
S'HTTP_HOST'
p2736
asbag56
(g77
g58
NtRp2737
(dp2738
g61
(dp2739
g88
g89
ssg70
g2728
sg63
(lp2740
S':'
asbag56
(g77
g58
NtRp2741
(dp2742
g61
(dp2743
sg70
g2728
sg63
(lp2744
g56
(g57
g58
NtRp2745
(dp2746
g61
(dp2747
g69
I3
ssg70
g2741
sg63
(lp2748
g1199
asbasbasbag56
(g72
g58
NtRp2749
(dp2750
g61
(dp2751
sg70
g2535
sg63
(lp2752
g56
(g77
g58
NtRp2753
(dp2754
g61
(dp2755
g81
g82
ssg70
g2749
sg63
(lp2756
S'HTTP_PRAGMA'
p2757
asbag56
(g77
g58
NtRp2758
(dp2759
g61
(dp2760
g88
g89
ssg70
g2749
sg63
(lp2761
S':'
asbag56
(g77
g58
NtRp2762
(dp2763
g61
(dp2764
sg70
g2749
sg63
(lp2765
g56
(g57
g58
NtRp2766
(dp2767
g61
(dp2768
g69
I3
ssg70
g2762
sg63
(lp2769
g1221
asbasbasbag56
(g72
g58
NtRp2770
(dp2771
g61
(dp2772
sg70
g2535
sg63
(lp2773
g56
(g77
g58
NtRp2774
(dp2775
g61
(dp2776
g81
g82
ssg70
g2770
sg63
(lp2777
S'HTTP_REFERER'
p2778
asbag56
(g77
g58
NtRp2779
(dp2780
g61
(dp2781
g88
g89
ssg70
g2770
sg63
(lp2782
S':'
asbag56
(g77
g58
NtRp2783
(dp2784
g61
(dp2785
sg70
g2770
sg63
(lp2786
g56
(g57
g58
NtRp2787
(dp2788
g61
(dp2789
g69
I3
ssg70
g2783
sg63
(lp2790
g1243
asbasbasbag56
(g72
g58
NtRp2791
(dp2792
g61
(dp2793
sg70
g2535
sg63
(lp2794
g56
(g77
g58
NtRp2795
(dp2796
g61
(dp2797
g81
g82
ssg70
g2791
sg63
(lp2798
S'HTTP_USER_AGENT'
p2799
asbag56
(g77
g58
NtRp2800
(dp2801
g61
(dp2802
g88
g89
ssg70
g2791
sg63
(lp2803
S':'
asbag56
(g77
g58
NtRp2804
(dp2805
g61
(dp2806
sg70
g2791
sg63
(lp2807
g56
(g57
g58
NtRp2808
(dp2809
g61
(dp2810
g69
I3
ssg70
g2804
sg63
(lp2811
g1265
asbasbasbag56
(g72
g58
NtRp2812
(dp2813
g61
(dp2814
sg70
g2535
sg63
(lp2815
g56
(g77
g58
NtRp2816
(dp2817
g61
(dp2818
g81
g82
ssg70
g2812
sg63
(lp2819
S'HTTP_X_REQUESTED_WITH'
p2820
asbag56
(g77
g58
NtRp2821
(dp2822
g61
(dp2823
g88
g89
ssg70
g2812
sg63
(lp2824
S':'
asbag56
(g77
g58
NtRp2825
(dp2826
g61
(dp2827
sg70
g2812
sg63
(lp2828
g56
(g57
g58
NtRp2829
(dp2830
g61
(dp2831
g69
I3
ssg70
g2825
sg63
(lp2832
g1287
asbasbasbag56
(g72
g58
NtRp2833
(dp2834
g61
(dp2835
sg70
g2535
sg63
(lp2836
g56
(g77
g58
NtRp2837
(dp2838
g61
(dp2839
g81
g82
ssg70
g2833
sg63
(lp2840
S'PATH_INFO'
p2841
asbag56
(g77
g58
NtRp2842
(dp2843
g61
(dp2844
g88
g89
ssg70
g2833
sg63
(lp2845
S':'
asbag56
(g77
g58
NtRp2846
(dp2847
g61
(dp2848
sg70
g2833
sg63
(lp2849
g56
(g57
g58
NtRp2850
(dp2851
g61
(dp2852
g69
I3
ssg70
g2846
sg63
(lp2853
g1330
asbasbasbag56
(g72
g58
NtRp2854
(dp2855
g61
(dp2856
sg70
g2535
sg63
(lp2857
g56
(g77
g58
NtRp2858
(dp2859
g61
(dp2860
g81
g82
ssg70
g2854
sg63
(lp2861
S'QUERY_STRING'
p2862
asbag56
(g77
g58
NtRp2863
(dp2864
g61
(dp2865
g88
g89
ssg70
g2854
sg63
(lp2866
S':'
asbag56
(g77
g58
NtRp2867
(dp2868
g61
(dp2869
sg70
g2854
sg63
(lp2870
g56
(g57
g58
NtRp2871
(dp2872
g61
(dp2873
g69
I3
ssg70
g2867
sg63
(lp2874
S''
asbasbasbag56
(g72
g58
NtRp2875
(dp2876
g61
(dp2877
sg70
g2535
sg63
(lp2878
g56
(g77
g58
NtRp2879
(dp2880
g61
(dp2881
g81
g82
ssg70
g2875
sg63
(lp2882
S'REMOTE_ADDR'
p2883
asbag56
(g77
g58
NtRp2884
(dp2885
g61
(dp2886
g88
g89
ssg70
g2875
sg63
(lp2887
S':'
asbag56
(g77
g58
NtRp2888
(dp2889
g61
(dp2890
sg70
g2875
sg63
(lp2891
g56
(g57
g58
NtRp2892
(dp2893
g61
(dp2894
g69
I3
ssg70
g2888
sg63
(lp2895
g189
asbasbasbag56
(g72
g58
NtRp2896
(dp2897
g61
(dp2898
sg70
g2535
sg63
(lp2899
g56
(g77
g58
NtRp2900
(dp2901
g61
(dp2902
g81
g82
ssg70
g2896
sg63
(lp2903
S'REMOTE_PORT'
p2904
asbag56
(g77
g58
NtRp2905
(dp2906
g61
(dp2907
g88
g89
ssg70
g2896
sg63
(lp2908
S':'
asbag56
(g77
g58
NtRp2909
(dp2910
g61
(dp2911
sg70
g2896
sg63
(lp2912
g56
(g57
g58
NtRp2913
(dp2914
g61
(dp2915
g69
I3
ssg70
g2909
sg63
(lp2916
g1394
asbasbasbag56
(g72
g58
NtRp2917
(dp2918
g61
(dp2919
sg70
g2535
sg63
(lp2920
g56
(g77
g58
NtRp2921
(dp2922
g61
(dp2923
g81
g82
ssg70
g2917
sg63
(lp2924
S'REQUEST_METHOD'
p2925
asbag56
(g77
g58
NtRp2926
(dp2927
g61
(dp2928
g88
g89
ssg70
g2917
sg63
(lp2929
S':'
asbag56
(g77
g58
NtRp2930
(dp2931
g61
(dp2932
sg70
g2917
sg63
(lp2933
g56
(g57
g58
NtRp2934
(dp2935
g61
(dp2936
g69
I3
ssg70
g2930
sg63
(lp2937
g1416
asbasbasbag56
(g72
g58
NtRp2938
(dp2939
g61
(dp2940
sg70
g2535
sg63
(lp2941
g56
(g77
g58
NtRp2942
(dp2943
g61
(dp2944
g81
g82
ssg70
g2938
sg63
(lp2945
S'REQUEST_URI'
p2946
asbag56
(g77
g58
NtRp2947
(dp2948
g61
(dp2949
g88
g89
ssg70
g2938
sg63
(lp2950
S':'
asbag56
(g77
g58
NtRp2951
(dp2952
g61
(dp2953
sg70
g2938
sg63
(lp2954
g56
(g57
g58
NtRp2955
(dp2956
g61
(dp2957
g69
I3
ssg70
g2951
sg63
(lp2958
g1330
asbasbasbag56
(g72
g58
NtRp2959
(dp2960
g61
(dp2961
sg70
g2535
sg63
(lp2962
g56
(g77
g58
NtRp2963
(dp2964
g61
(dp2965
g81
g82
ssg70
g2959
sg63
(lp2966
S'SCRIPT_NAME'
p2967
asbag56
(g77
g58
NtRp2968
(dp2969
g61
(dp2970
g88
g89
ssg70
g2959
sg63
(lp2971
S':'
asbag56
(g77
g58
NtRp2972
(dp2973
g61
(dp2974
sg70
g2959
sg63
(lp2975
g56
(g57
g58
NtRp2976
(dp2977
g61
(dp2978
g69
I3
ssg70
g2972
sg63
(lp2979
S''
asbasbasbag56
(g72
g58
NtRp2980
(dp2981
g61
(dp2982
sg70
g2535
sg63
(lp2983
g56
(g77
g58
NtRp2984
(dp2985
g61
(dp2986
g81
g82
ssg70
g2980
sg63
(lp2987
S'SERVER_NAME'
p2988
asbag56
(g77
g58
NtRp2989
(dp2990
g61
(dp2991
g88
g89
ssg70
g2980
sg63
(lp2992
S':'
asbag56
(g77
g58
NtRp2993
(dp2994
g61
(dp2995
sg70
g2980
sg63
(lp2996
g56
(g57
g58
NtRp2997
(dp2998
g61
(dp2999
g69
I3
ssg70
g2993
sg63
(lp3000
g1480
asbasbasbag56
(g72
g58
NtRp3001
(dp3002
g61
(dp3003
sg70
g2535
sg63
(lp3004
g56
(g77
g58
NtRp3005
(dp3006
g61
(dp3007
g81
g82
ssg70
g3001
sg63
(lp3008
S'SERVER_PORT'
p3009
asbag56
(g77
g58
NtRp3010
(dp3011
g61
(dp3012
g88
g89
ssg70
g3001
sg63
(lp3013
S':'
asbag56
(g77
g58
NtRp3014
(dp3015
g61
(dp3016
sg70
g3001
sg63
(lp3017
g56
(g57
g58
NtRp3018
(dp3019
g61
(dp3020
g69
I3
ssg70
g3014
sg63
(lp3021
g1502
asbasbasbag56
(g72
g58
NtRp3022
(dp3023
g61
(dp3024
sg70
g2535
sg63
(lp3025
g56
(g77
g58
NtRp3026
(dp3027
g61
(dp3028
g81
g82
ssg70
g3022
sg63
(lp3029
S'SERVER_PROTOCOL'
p3030
asbag56
(g77
g58
NtRp3031
(dp3032
g61
(dp3033
g88
g89
ssg70
g3022
sg63
(lp3034
S':'
asbag56
(g77
g58
NtRp3035
(dp3036
g61
(dp3037
sg70
g3022
sg63
(lp3038
g56
(g57
g58
NtRp3039
(dp3040
g61
(dp3041
g69
I3
ssg70
g3035
sg63
(lp3042
g1524
asbasbasbag56
(g72
g58
NtRp3043
(dp3044
g61
(dp3045
sg70
g2535
sg63
(lp3046
g56
(g77
g58
NtRp3047
(dp3048
g61
(dp3049
g81
g82
ssg70
g3043
sg63
(lp3050
S'SERVER_SOFTWARE'
p3051
asbag56
(g77
g58
NtRp3052
(dp3053
g61
(dp3054
g88
g89
ssg70
g3043
sg63
(lp3055
S':'
asbag56
(g77
g58
NtRp3056
(dp3057
g61
(dp3058
sg70
g3043
sg63
(lp3059
g56
(g57
g58
NtRp3060
(dp3061
g61
(dp3062
g69
I3
ssg70
g3056
sg63
(lp3063
g1546
asbasbasbag56
(g72
g58
NtRp3064
(dp3065
g61
(dp3066
sg70
g2535
sg63
(lp3067
g56
(g77
g58
NtRp3068
(dp3069
g61
(dp3070
g81
g82
ssg70
g3064
sg63
(lp3071
S'WEB2PY_ORIGINAL_URI'
p3072
asbag56
(g77
g58
NtRp3073
(dp3074
g61
(dp3075
g88
g89
ssg70
g3064
sg63
(lp3076
S':'
asbag56
(g77
g58
NtRp3077
(dp3078
g61
(dp3079
sg70
g3064
sg63
(lp3080
g56
(g57
g58
NtRp3081
(dp3082
g61
(dp3083
g69
I3
ssg70
g3077
sg63
(lp3084
g1330
asbasbasbag56
(g72
g58
NtRp3085
(dp3086
g61
(dp3087
sg70
g2535
sg63
(lp3088
g56
(g77
g58
NtRp3089
(dp3090
g61
(dp3091
g81
g82
ssg70
g3085
sg63
(lp3092
S'wsgi.errors'
p3093
asbag56
(g77
g58
NtRp3094
(dp3095
g61
(dp3096
g88
g89
ssg70
g3085
sg63
(lp3097
S':'
asbag56
(g77
g58
NtRp3098
(dp3099
g61
(dp3100
sg70
g3085
sg63
(lp3101
g56
(g57
g58
NtRp3102
(dp3103
g61
(dp3104
g69
I3
ssg70
g3098
sg63
(lp3105
S"<open file '<stderr>', mode 'w' at 0x7fe9acfe5270>"
p3106
asbasbasbag56
(g72
g58
NtRp3107
(dp3108
g61
(dp3109
sg70
g2535
sg63
(lp3110
g56
(g77
g58
NtRp3111
(dp3112
g61
(dp3113
g81
g82
ssg70
g3107
sg63
(lp3114
S'wsgi.file_wrapper'
p3115
asbag56
(g77
g58
NtRp3116
(dp3117
g61
(dp3118
g88
g89
ssg70
g3107
sg63
(lp3119
S':'
asbag56
(g77
g58
NtRp3120
(dp3121
g61
(dp3122
sg70
g3107
sg63
(lp3123
g56
(g57
g58
NtRp3124
(dp3125
g61
(dp3126
g69
I3
ssg70
g3120
sg63
(lp3127
S'<class wsgiref.util.FileWrapper at 0x1d85db8>'
p3128
asbasbasbag56
(g72
g58
NtRp3129
(dp3130
g61
(dp3131
sg70
g2535
sg63
(lp3132
g56
(g77
g58
NtRp3133
(dp3134
g61
(dp3135
g81
g82
ssg70
g3129
sg63
(lp3136
S'wsgi.input'
p3137
asbag56
(g77
g58
NtRp3138
(dp3139
g61
(dp3140
g88
g89
ssg70
g3129
sg63
(lp3141
S':'
asbag56
(g77
g58
NtRp3142
(dp3143
g61
(dp3144
sg70
g3129
sg63
(lp3145
g56
(g57
g58
NtRp3146
(dp3147
g61
(dp3148
g69
I3
ssg70
g3142
sg63
(lp3149
S"<open file '<fdopen>', mode 'w+b' at 0x7fe9702cde40>"
p3150
asbasbasbag56
(g72
g58
NtRp3151
(dp3152
g61
(dp3153
sg70
g2535
sg63
(lp3154
g56
(g77
g58
NtRp3155
(dp3156
g61
(dp3157
g81
g82
ssg70
g3151
sg63
(lp3158
S'wsgi.multiprocess'
p3159
asbag56
(g77
g58
NtRp3160
(dp3161
g61
(dp3162
g88
g89
ssg70
g3151
sg63
(lp3163
S':'
asbag56
(g77
g58
NtRp3164
(dp3165
g61
(dp3166
sg70
g3151
sg63
(lp3167
g56
(g57
g58
NtRp3168
(dp3169
g61
(dp3170
g69
I3
ssg70
g3164
sg63
(lp3171
g980
asbasbasbag56
(g72
g58
NtRp3172
(dp3173
g61
(dp3174
sg70
g2535
sg63
(lp3175
g56
(g77
g58
NtRp3176
(dp3177
g61
(dp3178
g81
g82
ssg70
g3172
sg63
(lp3179
S'wsgi.multithread'
p3180
asbag56
(g77
g58
NtRp3181
(dp3182
g61
(dp3183
g88
g89
ssg70
g3172
sg63
(lp3184
S':'
asbag56
(g77
g58
NtRp3185
(dp3186
g61
(dp3187
sg70
g3172
sg63
(lp3188
g56
(g57
g58
NtRp3189
(dp3190
g61
(dp3191
g69
I3
ssg70
g3185
sg63
(lp3192
g99
asbasbasbag56
(g72
g58
NtRp3193
(dp3194
g61
(dp3195
sg70
g2535
sg63
(lp3196
g56
(g77
g58
NtRp3197
(dp3198
g61
(dp3199
g81
g82
ssg70
g3193
sg63
(lp3200
S'wsgi.run_once'
p3201
asbag56
(g77
g58
NtRp3202
(dp3203
g61
(dp3204
g88
g89
ssg70
g3193
sg63
(lp3205
S':'
asbag56
(g77
g58
NtRp3206
(dp3207
g61
(dp3208
sg70
g3193
sg63
(lp3209
g56
(g57
g58
NtRp3210
(dp3211
g61
(dp3212
g69
I3
ssg70
g3206
sg63
(lp3213
g980
asbasbasbag56
(g72
g58
NtRp3214
(dp3215
g61
(dp3216
sg70
g2535
sg63
(lp3217
g56
(g77
g58
NtRp3218
(dp3219
g61
(dp3220
g81
g82
ssg70
g3214
sg63
(lp3221
S'wsgi.url_scheme'
p3222
asbag56
(g77
g58
NtRp3223
(dp3224
g61
(dp3225
g88
g89
ssg70
g3214
sg63
(lp3226
S':'
asbag56
(g77
g58
NtRp3227
(dp3228
g61
(dp3229
sg70
g3214
sg63
(lp3230
g56
(g57
g58
NtRp3231
(dp3232
g61
(dp3233
g69
I3
ssg70
g3227
sg63
(lp3234
g1849
asbasbasbag56
(g72
g58
NtRp3235
(dp3236
g61
(dp3237
sg70
g2535
sg63
(lp3238
g56
(g77
g58
NtRp3239
(dp3240
g61
(dp3241
g81
g82
ssg70
g3235
sg63
(lp3242
S'wsgi.version'
p3243
asbag56
(g77
g58
NtRp3244
(dp3245
g61
(dp3246
g88
g89
ssg70
g3235
sg63
(lp3247
S':'
asbag56
(g77
g58
NtRp3248
(dp3249
g61
(dp3250
sg70
g3235
sg63
(lp3251
g56
(g57
g58
NtRp3252
(dp3253
g61
(dp3254
g69
I3
ssg70
g3248
sg63
(lp3255
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p3256
(lp3257
(dp3258
S'file'
p3259
S'/media/misperoles/git/pyj3nnn1/web2py/gluon/restricted.py'
p3260
sS'dump'
p3261
(dp3262
S'environment'
p3263
S"{'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CHECK_VERSION': True, ...}"
p3264
sS'ccode'
p3265
S'<code object <module> at 0x7fe9706435b0, file "/...plications/admin/controllers/default.py", line 3>'
p3266
ssS'lnum'
p3267
I194
sS'lines'
p3268
(dp3269
I192
S'        else:'
p3270
sI193
S'            ccode = compile2(code,layer)'
p3271
sI194
S'        exec ccode in environment'
p3272
sI195
S'    except HTTP:'
p3273
sI196
S'        raise'
p3274
sI197
S'    except Exception, error:'
p3275
sI198
S'        # XXX Show exception in Wing IDE if running in debugger'
p3276
sI189
S'    try:'
p3277
sI190
S'        if type(code) == types.CodeType:'
p3278
sI191
S'            ccode = code'
p3279
ssS'call'
p3280
S"(code='# coding: utf8\\n\\nfrom gluon.admin import *\\nfrom g...\\n\\nresponse._vars=response._caller(check_version)\\n', environment={'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CHECK_VERSION': True, ...}, layer='/media/misperoles/git/pyj3nnn1/web2py/applications/admin/controllers/default.py')"
p3281
sS'func'
p3282
S'restricted'
p3283
sa(dp3284
g3259
S'/media/misperoles/git/pyj3nnn1/web2py/applications/admin/controllers/default.py'
p3285
sg3261
(dp3286
sg3267
I1225
sg3268
(dp3287
I1216
S'    else:'
p3288
sI1217
S'        return dict(form=T("Disabled"))'
p3289
sI1218
S''
sI1219
S'def reload_routes():'
p3290
sI1220
S'    """ Reload routes.py """'
p3291
sI1221
S'    import gluon.rewrite'
p3292
sI1222
S'    gluon.rewrite.load()'
p3293
sI1223
S"    redirect(URL('site'))"
p3294
sI1214
S'            auth.settings.registration_requires_approval = False'
p3295
sI1215
S'        return dict(form=auth())'
p3296
ssg3280
S'()'
p3297
sg3282
S'<module>'
p3298
sa(dp3299
g3259
S'/media/misperoles/git/pyj3nnn1/web2py/gluon/globals.py'
p3300
sg3261
(dp3301
S'self'
p3302
S'undefined'
p3303
sS'f'
S'<function check_version>'
p3304
ssg3267
I149
sg3268
(dp3305
I144
S'        self.meta = Storage()      # used by web2py_ajax.html'
p3306
sI145
S'        self.menu = []             # used by the default view layout'
p3307
sI146
S'        self.files = []            # used by web2py_ajax.html'
p3308
sI147
S'        self.generic_patterns = [] # patterns to allow generic views'
p3309
sI148
S'        self._vars = None'
p3310
sI149
S'        self._caller = lambda f: f()'
p3311
sI150
S'        self._view_environment = None'
p3312
sI151
S'        self._custom_commit = None'
p3313
sI152
S'        self._custom_rollback = None'
p3314
sI153
S''
ssg3280
S'(f=<function check_version>)'
p3315
sg3282
S'<lambda>'
p3316
sa(dp3317
g3259
S'/media/misperoles/git/pyj3nnn1/web2py/applications/admin/controllers/default.py'
p3318
sg3261
(dp3319
S'global XML'
p3320
S"<class 'gluon.html.XML'>"
p3321
sS'version_number'
p3322
S"(1, 99, 4, datetime.datetime(2011, 12, 14, 14, 46, 14), 'stable')"
p3323
ssg3267
I105
sg3268
(dp3324
I100
S"        return A(T('web2py is up to date'), _href=WEB2PY_URL)"
p3325
sI101
S'    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):'
p3326
sI102
S"        return SPAN('You should upgrade to version %s' % version_number)"
p3327
sI103
S'    else:'
p3328
sI104
S"        return sp_button(URL('upgrade_web2py'), T('upgrade now')) \\"
p3329
sI105
S'          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)'
p3330
sI106
S''
sI107
S''
sI108
S'def logout():'
p3331
sI109
S'    """ Logout handler """'
p3332
ssg3280
S'()'
p3333
sg3282
S'check_version'
p3334
sasS'pyver'
p3335
S'Python 2.7.2: /usr/bin/python2'
p3336
sS'session'
p3337
g56
(g57
g58
NtRp3338
(dp3339
g61
(dp3340
sg63
(lp3341
g56
(g65
g58
NtRp3342
(dp3343
g61
(dp3344
g69
I5
ssg70
Nsg63
(lp3345
g56
(g72
g58
NtRp3346
(dp3347
g61
(dp3348
sg70
g3342
sg63
(lp3349
g56
(g77
g58
NtRp3350
(dp3351
g61
(dp3352
g81
g82
ssg70
g3346
sg63
(lp3353
S'authorized'
p3354
asbag56
(g77
g58
NtRp3355
(dp3356
g61
(dp3357
g88
g89
ssg70
g3346
sg63
(lp3358
S':'
asbag56
(g77
g58
NtRp3359
(dp3360
g61
(dp3361
sg70
g3346
sg63
(lp3362
g56
(g57
g58
NtRp3363
(dp3364
g61
(dp3365
g69
I5
ssg70
g3359
sg63
(lp3366
g99
asbasbasbag56
(g72
g58
NtRp3367
(dp3368
g61
(dp3369
sg70
g3342
sg63
(lp3370
g56
(g77
g58
NtRp3371
(dp3372
g61
(dp3373
g81
g82
ssg70
g3367
sg63
(lp3374
S'check_version'
p3375
asbag56
(g77
g58
NtRp3376
(dp3377
g61
(dp3378
g88
g89
ssg70
g3367
sg63
(lp3379
S':'
asbag56
(g77
g58
NtRp3380
(dp3381
g61
(dp3382
sg70
g3367
sg63
(lp3383
g56
(g57
g58
NtRp3384
(dp3385
g61
(dp3386
g69
I5
ssg70
g3380
sg63
(lp3387
g980
asbasbasbag56
(g72
g58
NtRp3388
(dp3389
g61
(dp3390
sg70
g3342
sg63
(lp3391
g56
(g77
g58
NtRp3392
(dp3393
g61
(dp3394
g81
g82
ssg70
g3388
sg63
(lp3395
S'last_time'
p3396
asbag56
(g77
g58
NtRp3397
(dp3398
g61
(dp3399
g88
g89
ssg70
g3388
sg63
(lp3400
S':'
asbag56
(g77
g58
NtRp3401
(dp3402
g61
(dp3403
sg70
g3388
sg63
(lp3404
g56
(g57
g58
NtRp3405
(dp3406
g61
(dp3407
g69
I5
ssg70
g3401
sg63
(lp3408
S'1327190449.21346'
p3409
asbasbasbasbasbsS'etype'
p3410
S"<type 'exceptions.TypeError'>"
p3411
sS'date'
p3412
S'Sat Jan 21 19:30:49 2012'
p3413
sS'response'
p3414
g56
(g57
g58
NtRp3415
(dp3416
g61
(dp3417
sg63
(lp3418
g56
(g65
g58
NtRp3419
(dp3420
g61
(dp3421
g69
I5
ssg70
Nsg63
(lp3422
g56
(g72
g58
NtRp3423
(dp3424
g61
(dp3425
sg70
g3419
sg63
(lp3426
g56
(g77
g58
NtRp3427
(dp3428
g61
(dp3429
g81
g82
ssg70
g3423
sg63
(lp3430
g154
asbag56
(g77
g58
NtRp3431
(dp3432
g61
(dp3433
g88
g89
ssg70
g3423
sg63
(lp3434
S':'
asbag56
(g77
g58
NtRp3435
(dp3436
g61
(dp3437
sg70
g3423
sg63
(lp3438
g56
(g57
g58
NtRp3439
(dp3440
g61
(dp3441
g69
I5
ssg70
g3435
sg63
(lp3442
S'<cStringIO.StringO object at 0x7fe970444228>'
p3443
asbasbasbag56
(g72
g58
NtRp3444
(dp3445
g61
(dp3446
sg70
g3419
sg63
(lp3447
g56
(g77
g58
NtRp3448
(dp3449
g61
(dp3450
g81
g82
ssg70
g3444
sg63
(lp3451
g220
asbag56
(g77
g58
NtRp3452
(dp3453
g61
(dp3454
g88
g89
ssg70
g3444
sg63
(lp3455
S':'
asbag56
(g77
g58
NtRp3456
(dp3457
g61
(dp3458
sg70
g3444
sg63
(lp3459
g56
(g57
g58
NtRp3460
(dp3461
g61
(dp3462
g69
I5
ssg70
g3456
sg63
(lp3463
g56
(g65
g58
NtRp3464
(dp3465
g61
(dp3466
g69
I4
ssg70
Nsg63
(lp3467
g56
(g72
g58
NtRp3468
(dp3469
g61
(dp3470
sg70
g3464
sg63
(lp3471
g56
(g77
g58
NtRp3472
(dp3473
g61
(dp3474
g81
g82
ssg70
g3468
sg63
(lp3475
S'session_id_admin'
p3476
asbag56
(g77
g58
NtRp3477
(dp3478
g61
(dp3479
g88
g89
ssg70
g3468
sg63
(lp3480
S':'
asbag56
(g77
g58
NtRp3481
(dp3482
g61
(dp3483
sg70
g3468
sg63
(lp3484
g56
(g57
g58
NtRp3485
(dp3486
g61
(dp3487
g69
I4
ssg70
g3481
sg63
(lp3488
g56
(g65
g58
NtRp3489
(dp3490
g61
(dp3491
g69
I3
ssg70
Nsg63
(lp3492
g56
(g72
g58
NtRp3493
(dp3494
g61
(dp3495
sg70
g3489
sg63
(lp3496
g56
(g77
g58
NtRp3497
(dp3498
g61
(dp3499
g81
g82
ssg70
g3493
sg63
(lp3500
g270
asbag56
(g77
g58
NtRp3501
(dp3502
g61
(dp3503
g88
g89
ssg70
g3493
sg63
(lp3504
S':'
asbag56
(g77
g58
NtRp3505
(dp3506
g61
(dp3507
sg70
g3493
sg63
(lp3508
g56
(g57
g58
NtRp3509
(dp3510
g61
(dp3511
g69
I3
ssg70
g3505
sg63
(lp3512
S''
asbasbasbag56
(g72
g58
NtRp3513
(dp3514
g61
(dp3515
sg70
g3489
sg63
(lp3516
g56
(g77
g58
NtRp3517
(dp3518
g61
(dp3519
g81
g82
ssg70
g3513
sg63
(lp3520
g291
asbag56
(g77
g58
NtRp3521
(dp3522
g61
(dp3523
g88
g89
ssg70
g3513
sg63
(lp3524
S':'
asbag56
(g77
g58
NtRp3525
(dp3526
g61
(dp3527
sg70
g3513
sg63
(lp3528
g56
(g57
g58
NtRp3529
(dp3530
g61
(dp3531
g69
I3
ssg70
g3525
sg63
(lp3532
S''
asbasbasbag56
(g72
g58
NtRp3533
(dp3534
g61
(dp3535
sg70
g3489
sg63
(lp3536
g56
(g77
g58
NtRp3537
(dp3538
g61
(dp3539
g81
g82
ssg70
g3533
sg63
(lp3540
g312
asbag56
(g77
g58
NtRp3541
(dp3542
g61
(dp3543
g88
g89
ssg70
g3533
sg63
(lp3544
S':'
asbag56
(g77
g58
NtRp3545
(dp3546
g61
(dp3547
sg70
g3533
sg63
(lp3548
g56
(g57
g58
NtRp3549
(dp3550
g61
(dp3551
g69
I3
ssg70
g3545
sg63
(lp3552
S''
asbasbasbag56
(g72
g58
NtRp3553
(dp3554
g61
(dp3555
sg70
g3489
sg63
(lp3556
g56
(g77
g58
NtRp3557
(dp3558
g61
(dp3559
g81
g82
ssg70
g3553
sg63
(lp3560
g333
asbag56
(g77
g58
NtRp3561
(dp3562
g61
(dp3563
g88
g89
ssg70
g3553
sg63
(lp3564
S':'
asbag56
(g77
g58
NtRp3565
(dp3566
g61
(dp3567
sg70
g3553
sg63
(lp3568
g56
(g57
g58
NtRp3569
(dp3570
g61
(dp3571
g69
I3
ssg70
g3565
sg63
(lp3572
S''
asbasbasbag56
(g72
g58
NtRp3573
(dp3574
g61
(dp3575
sg70
g3489
sg63
(lp3576
g56
(g77
g58
NtRp3577
(dp3578
g61
(dp3579
g81
g82
ssg70
g3573
sg63
(lp3580
g354
asbag56
(g77
g58
NtRp3581
(dp3582
g61
(dp3583
g88
g89
ssg70
g3573
sg63
(lp3584
S':'
asbag56
(g77
g58
NtRp3585
(dp3586
g61
(dp3587
sg70
g3573
sg63
(lp3588
g56
(g57
g58
NtRp3589
(dp3590
g61
(dp3591
g69
I3
ssg70
g3585
sg63
(lp3592
S''
asbasbasbag56
(g72
g58
NtRp3593
(dp3594
g61
(dp3595
sg70
g3489
sg63
(lp3596
g56
(g77
g58
NtRp3597
(dp3598
g61
(dp3599
g81
g82
ssg70
g3593
sg63
(lp3600
g375
asbag56
(g77
g58
NtRp3601
(dp3602
g61
(dp3603
g88
g89
ssg70
g3593
sg63
(lp3604
S':'
asbag56
(g77
g58
NtRp3605
(dp3606
g61
(dp3607
sg70
g3593
sg63
(lp3608
g56
(g57
g58
NtRp3609
(dp3610
g61
(dp3611
g69
I3
ssg70
g3605
sg63
(lp3612
S'/'
asbasbasbag56
(g72
g58
NtRp3613
(dp3614
g61
(dp3615
sg70
g3489
sg63
(lp3616
g56
(g77
g58
NtRp3617
(dp3618
g61
(dp3619
g81
g82
ssg70
g3613
sg63
(lp3620
g396
asbag56
(g77
g58
NtRp3621
(dp3622
g61
(dp3623
g88
g89
ssg70
g3613
sg63
(lp3624
S':'
asbag56
(g77
g58
NtRp3625
(dp3626
g61
(dp3627
sg70
g3613
sg63
(lp3628
g56
(g57
g58
NtRp3629
(dp3630
g61
(dp3631
g69
I3
ssg70
g3625
sg63
(lp3632
S''
asbasbasbag56
(g72
g58
NtRp3633
(dp3634
g61
(dp3635
sg70
g3489
sg63
(lp3636
g56
(g77
g58
NtRp3637
(dp3638
g61
(dp3639
g81
g82
ssg70
g3633
sg63
(lp3640
g417
asbag56
(g77
g58
NtRp3641
(dp3642
g61
(dp3643
g88
g89
ssg70
g3633
sg63
(lp3644
S':'
asbag56
(g77
g58
NtRp3645
(dp3646
g61
(dp3647
sg70
g3633
sg63
(lp3648
g56
(g57
g58
NtRp3649
(dp3650
g61
(dp3651
g69
I3
ssg70
g3645
sg63
(lp3652
S''
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp3653
(dp3654
g61
(dp3655
sg70
g3419
sg63
(lp3656
g56
(g77
g58
NtRp3657
(dp3658
g61
(dp3659
g81
g82
ssg70
g3653
sg63
(lp3660
S'files'
p3661
asbag56
(g77
g58
NtRp3662
(dp3663
g61
(dp3664
g88
g89
ssg70
g3653
sg63
(lp3665
S':'
asbag56
(g77
g58
NtRp3666
(dp3667
g61
(dp3668
sg70
g3653
sg63
(lp3669
g56
(g57
g58
NtRp3670
(dp3671
g61
(dp3672
g69
I5
ssg70
g3666
sg63
(lp3673
g56
(g65
g58
NtRp3674
(dp3675
g61
(dp3676
g69
I4
ssg70
Nsg63
(lp3677
g56
(g72
g58
NtRp3678
(dp3679
g61
(dp3680
sg70
g3674
sg63
(lp3681
g56
(g77
g58
NtRp3682
(dp3683
g61
(dp3684
sg70
g3678
sg63
(lp3685
g56
(g57
g58
NtRp3686
(dp3687
g61
(dp3688
g69
I4
ssg70
g3682
sg63
(lp3689
S'/admin/static/plugin_multiselect/jquery.dimensions.js'
p3690
asbasbasbag56
(g72
g58
NtRp3691
(dp3692
g61
(dp3693
sg70
g3674
sg63
(lp3694
g56
(g77
g58
NtRp3695
(dp3696
g61
(dp3697
sg70
g3691
sg63
(lp3698
g56
(g57
g58
NtRp3699
(dp3700
g61
(dp3701
g69
I4
ssg70
g3695
sg63
(lp3702
S'/admin/static/plugin_multiselect/jquery.multiselect.js'
p3703
asbasbasbag56
(g72
g58
NtRp3704
(dp3705
g61
(dp3706
sg70
g3674
sg63
(lp3707
g56
(g77
g58
NtRp3708
(dp3709
g61
(dp3710
sg70
g3704
sg63
(lp3711
g56
(g57
g58
NtRp3712
(dp3713
g61
(dp3714
g69
I4
ssg70
g3708
sg63
(lp3715
S'/admin/static/plugin_multiselect/jquery.multiselect.css'
p3716
asbasbasbag56
(g72
g58
NtRp3717
(dp3718
g61
(dp3719
sg70
g3674
sg63
(lp3720
g56
(g77
g58
NtRp3721
(dp3722
g61
(dp3723
sg70
g3717
sg63
(lp3724
g56
(g57
g58
NtRp3725
(dp3726
g61
(dp3727
g69
I4
ssg70
g3721
sg63
(lp3728
S'/admin/static/plugin_multiselect/start.js'
p3729
asbasbasbasbasbasbasbag56
(g72
g58
NtRp3730
(dp3731
g61
(dp3732
sg70
g3419
sg63
(lp3733
g56
(g77
g58
NtRp3734
(dp3735
g61
(dp3736
g81
g82
ssg70
g3730
sg63
(lp3737
S'flash'
p3738
asbag56
(g77
g58
NtRp3739
(dp3740
g61
(dp3741
g88
g89
ssg70
g3730
sg63
(lp3742
S':'
asbag56
(g77
g58
NtRp3743
(dp3744
g61
(dp3745
sg70
g3730
sg63
(lp3746
g56
(g57
g58
NtRp3747
(dp3748
g61
(dp3749
g69
I5
ssg70
g3743
sg63
(lp3750
S''
asbasbasbag56
(g72
g58
NtRp3751
(dp3752
g61
(dp3753
sg70
g3419
sg63
(lp3754
g56
(g77
g58
NtRp3755
(dp3756
g61
(dp3757
g81
g82
ssg70
g3751
sg63
(lp3758
S'generic_patterns'
p3759
asbag56
(g77
g58
NtRp3760
(dp3761
g61
(dp3762
g88
g89
ssg70
g3751
sg63
(lp3763
S':'
asbag56
(g77
g58
NtRp3764
(dp3765
g61
(dp3766
sg70
g3751
sg63
(lp3767
g56
(g57
g58
NtRp3768
(dp3769
g61
(dp3770
g69
I5
ssg70
g3764
sg63
(lp3771
g56
(g65
g58
NtRp3772
(dp3773
g61
(dp3774
g69
I4
ssg70
Nsg63
(lp3775
sbasbasbasbag56
(g72
g58
NtRp3776
(dp3777
g61
(dp3778
sg70
g3419
sg63
(lp3779
g56
(g77
g58
NtRp3780
(dp3781
g61
(dp3782
g81
g82
ssg70
g3776
sg63
(lp3783
S'headers'
p3784
asbag56
(g77
g58
NtRp3785
(dp3786
g61
(dp3787
g88
g89
ssg70
g3776
sg63
(lp3788
S':'
asbag56
(g77
g58
NtRp3789
(dp3790
g61
(dp3791
sg70
g3776
sg63
(lp3792
g56
(g57
g58
NtRp3793
(dp3794
g61
(dp3795
g69
I5
ssg70
g3789
sg63
(lp3796
g56
(g65
g58
NtRp3797
(dp3798
g61
(dp3799
g69
I4
ssg70
Nsg63
(lp3800
g56
(g72
g58
NtRp3801
(dp3802
g61
(dp3803
sg70
g3797
sg63
(lp3804
g56
(g77
g58
NtRp3805
(dp3806
g61
(dp3807
g81
g82
ssg70
g3801
sg63
(lp3808
S'Cache-Control'
p3809
asbag56
(g77
g58
NtRp3810
(dp3811
g61
(dp3812
g88
g89
ssg70
g3801
sg63
(lp3813
S':'
asbag56
(g77
g58
NtRp3814
(dp3815
g61
(dp3816
sg70
g3801
sg63
(lp3817
g56
(g57
g58
NtRp3818
(dp3819
g61
(dp3820
g69
I4
ssg70
g3814
sg63
(lp3821
S'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
p3822
asbasbasbag56
(g72
g58
NtRp3823
(dp3824
g61
(dp3825
sg70
g3797
sg63
(lp3826
g56
(g77
g58
NtRp3827
(dp3828
g61
(dp3829
g81
g82
ssg70
g3823
sg63
(lp3830
S'Content-Type'
p3831
asbag56
(g77
g58
NtRp3832
(dp3833
g61
(dp3834
g88
g89
ssg70
g3823
sg63
(lp3835
S':'
asbag56
(g77
g58
NtRp3836
(dp3837
g61
(dp3838
sg70
g3823
sg63
(lp3839
g56
(g57
g58
NtRp3840
(dp3841
g61
(dp3842
g69
I4
ssg70
g3836
sg63
(lp3843
S'text/html; charset=utf-8'
p3844
asbasbasbag56
(g72
g58
NtRp3845
(dp3846
g61
(dp3847
sg70
g3797
sg63
(lp3848
g56
(g77
g58
NtRp3849
(dp3850
g61
(dp3851
g81
g82
ssg70
g3845
sg63
(lp3852
S'Expires'
p3853
asbag56
(g77
g58
NtRp3854
(dp3855
g61
(dp3856
g88
g89
ssg70
g3845
sg63
(lp3857
S':'
asbag56
(g77
g58
NtRp3858
(dp3859
g61
(dp3860
sg70
g3845
sg63
(lp3861
g56
(g57
g58
NtRp3862
(dp3863
g61
(dp3864
g69
I4
ssg70
g3858
sg63
(lp3865
S'Sun, 22 Jan 2012 00:00:49 GMT'
p3866
asbasbasbag56
(g72
g58
NtRp3867
(dp3868
g61
(dp3869
sg70
g3797
sg63
(lp3870
g56
(g77
g58
NtRp3871
(dp3872
g61
(dp3873
g81
g82
ssg70
g3867
sg63
(lp3874
S'Pragma'
p3875
asbag56
(g77
g58
NtRp3876
(dp3877
g61
(dp3878
g88
g89
ssg70
g3867
sg63
(lp3879
S':'
asbag56
(g77
g58
NtRp3880
(dp3881
g61
(dp3882
sg70
g3867
sg63
(lp3883
g56
(g57
g58
NtRp3884
(dp3885
g61
(dp3886
g69
I4
ssg70
g3880
sg63
(lp3887
S'no-cache'
p3888
asbasbasbag56
(g72
g58
NtRp3889
(dp3890
g61
(dp3891
sg70
g3797
sg63
(lp3892
g56
(g77
g58
NtRp3893
(dp3894
g61
(dp3895
g81
g82
ssg70
g3889
sg63
(lp3896
S'X-Powered-By'
p3897
asbag56
(g77
g58
NtRp3898
(dp3899
g61
(dp3900
g88
g89
ssg70
g3889
sg63
(lp3901
S':'
asbag56
(g77
g58
NtRp3902
(dp3903
g61
(dp3904
sg70
g3889
sg63
(lp3905
g56
(g57
g58
NtRp3906
(dp3907
g61
(dp3908
g69
I4
ssg70
g3902
sg63
(lp3909
S'web2py'
p3910
asbasbasbasbasbasbasbag56
(g72
g58
NtRp3911
(dp3912
g61
(dp3913
sg70
g3419
sg63
(lp3914
g56
(g77
g58
NtRp3915
(dp3916
g61
(dp3917
g81
g82
ssg70
g3911
sg63
(lp3918
S'menu'
p3919
asbag56
(g77
g58
NtRp3920
(dp3921
g61
(dp3922
g88
g89
ssg70
g3911
sg63
(lp3923
S':'
asbag56
(g77
g58
NtRp3924
(dp3925
g61
(dp3926
sg70
g3911
sg63
(lp3927
g56
(g57
g58
NtRp3928
(dp3929
g61
(dp3930
g69
I5
ssg70
g3924
sg63
(lp3931
g56
(g65
g58
NtRp3932
(dp3933
g61
(dp3934
g69
I4
ssg70
Nsg63
(lp3935
g56
(g72
g58
NtRp3936
(dp3937
g61
(dp3938
sg70
g3932
sg63
(lp3939
g56
(g77
g58
NtRp3940
(dp3941
g61
(dp3942
sg70
g3936
sg63
(lp3943
g56
(g57
g58
NtRp3944
(dp3945
g61
(dp3946
g69
I4
ssg70
g3940
sg63
(lp3947
g56
(g65
g58
NtRp3948
(dp3949
g61
(dp3950
g69
I3
ssg70
Nsg63
(lp3951
g56
(g72
g58
NtRp3952
(dp3953
g61
(dp3954
sg70
g3948
sg63
(lp3955
g56
(g77
g58
NtRp3956
(dp3957
g61
(dp3958
sg70
g3952
sg63
(lp3959
g56
(g57
g58
NtRp3960
(dp3961
g61
(dp3962
g69
I3
ssg70
g3956
sg63
(lp3963
cgluon.languages
lazyT_unpickle
p3964
(S't\x04\x00\x00\x00Site'
tRp3965
asbasbasbag56
(g72
g58
NtRp3966
(dp3967
g61
(dp3968
sg70
g3948
sg63
(lp3969
g56
(g77
g58
NtRp3970
(dp3971
g61
(dp3972
sg70
g3966
sg63
(lp3973
g56
(g57
g58
NtRp3974
(dp3975
g61
(dp3976
g69
I3
ssg70
g3970
sg63
(lp3977
g980
asbasbasbag56
(g72
g58
NtRp3978
(dp3979
g61
(dp3980
sg70
g3948
sg63
(lp3981
g56
(g77
g58
NtRp3982
(dp3983
g61
(dp3984
sg70
g3978
sg63
(lp3985
g56
(g57
g58
NtRp3986
(dp3987
g61
(dp3988
g69
I3
ssg70
g3982
sg63
(lp3989
S'/admin/default/site'
p3990
asbasbasbasbasbasbasbag56
(g72
g58
NtRp3991
(dp3992
g61
(dp3993
sg70
g3932
sg63
(lp3994
g56
(g77
g58
NtRp3995
(dp3996
g61
(dp3997
sg70
g3991
sg63
(lp3998
g56
(g57
g58
NtRp3999
(dp4000
g61
(dp4001
g69
I4
ssg70
g3995
sg63
(lp4002
g56
(g65
g58
NtRp4003
(dp4004
g61
(dp4005
g69
I3
ssg70
Nsg63
(lp4006
g56
(g72
g58
NtRp4007
(dp4008
g61
(dp4009
sg70
g4003
sg63
(lp4010
g56
(g77
g58
NtRp4011
(dp4012
g61
(dp4013
sg70
g4007
sg63
(lp4014
g56
(g57
g58
NtRp4015
(dp4016
g61
(dp4017
g69
I3
ssg70
g4011
sg63
(lp4018
g3964
(S't\x06\x00\x00\x00Logout'
tRp4019
asbasbasbag56
(g72
g58
NtRp4020
(dp4021
g61
(dp4022
sg70
g4003
sg63
(lp4023
g56
(g77
g58
NtRp4024
(dp4025
g61
(dp4026
sg70
g4020
sg63
(lp4027
g56
(g57
g58
NtRp4028
(dp4029
g61
(dp4030
g69
I3
ssg70
g4024
sg63
(lp4031
g980
asbasbasbag56
(g72
g58
NtRp4032
(dp4033
g61
(dp4034
sg70
g4003
sg63
(lp4035
g56
(g77
g58
NtRp4036
(dp4037
g61
(dp4038
sg70
g4032
sg63
(lp4039
g56
(g57
g58
NtRp4040
(dp4041
g61
(dp4042
g69
I3
ssg70
g4036
sg63
(lp4043
S'/admin/default/logout'
p4044
asbasbasbasbasbasbasbag56
(g72
g58
NtRp4045
(dp4046
g61
(dp4047
sg70
g3932
sg63
(lp4048
g56
(g77
g58
NtRp4049
(dp4050
g61
(dp4051
sg70
g4045
sg63
(lp4052
g56
(g57
g58
NtRp4053
(dp4054
g61
(dp4055
g69
I4
ssg70
g4049
sg63
(lp4056
g56
(g65
g58
NtRp4057
(dp4058
g61
(dp4059
g69
I3
ssg70
Nsg63
(lp4060
g56
(g72
g58
NtRp4061
(dp4062
g61
(dp4063
sg70
g4057
sg63
(lp4064
g56
(g77
g58
NtRp4065
(dp4066
g61
(dp4067
sg70
g4061
sg63
(lp4068
g56
(g57
g58
NtRp4069
(dp4070
g61
(dp4071
g69
I3
ssg70
g4065
sg63
(lp4072
g3964
(S't\x04\x00\x00\x00Help'
tRp4073
asbasbasbag56
(g72
g58
NtRp4074
(dp4075
g61
(dp4076
sg70
g4057
sg63
(lp4077
g56
(g77
g58
NtRp4078
(dp4079
g61
(dp4080
sg70
g4074
sg63
(lp4081
g56
(g57
g58
NtRp4082
(dp4083
g61
(dp4084
g69
I3
ssg70
g4078
sg63
(lp4085
g980
asbasbasbag56
(g72
g58
NtRp4086
(dp4087
g61
(dp4088
sg70
g4057
sg63
(lp4089
g56
(g77
g58
NtRp4090
(dp4091
g61
(dp4092
sg70
g4086
sg63
(lp4093
g56
(g57
g58
NtRp4094
(dp4095
g61
(dp4096
g69
I3
ssg70
g4090
sg63
(lp4097
S'/examples/default/index'
p4098
asbasbasbasbasbasbasbasbasbasbasbag56
(g72
g58
NtRp4099
(dp4100
g61
(dp4101
sg70
g3419
sg63
(lp4102
g56
(g77
g58
NtRp4103
(dp4104
g61
(dp4105
g81
g82
ssg70
g4099
sg63
(lp4106
S'meta'
p4107
asbag56
(g77
g58
NtRp4108
(dp4109
g61
(dp4110
g88
g89
ssg70
g4099
sg63
(lp4111
S':'
asbag56
(g77
g58
NtRp4112
(dp4113
g61
(dp4114
sg70
g4099
sg63
(lp4115
g56
(g57
g58
NtRp4116
(dp4117
g61
(dp4118
g69
I5
ssg70
g4112
sg63
(lp4119
g56
(g65
g58
NtRp4120
(dp4121
g61
(dp4122
g69
I4
ssg70
Nsg63
(lp4123
sbasbasbasbag56
(g72
g58
NtRp4124
(dp4125
g61
(dp4126
sg70
g3419
sg63
(lp4127
g56
(g77
g58
NtRp4128
(dp4129
g61
(dp4130
g81
g82
ssg70
g4124
sg63
(lp4131
S'postprocessing'
p4132
asbag56
(g77
g58
NtRp4133
(dp4134
g61
(dp4135
g88
g89
ssg70
g4124
sg63
(lp4136
S':'
asbag56
(g77
g58
NtRp4137
(dp4138
g61
(dp4139
sg70
g4124
sg63
(lp4140
g56
(g57
g58
NtRp4141
(dp4142
g61
(dp4143
g69
I5
ssg70
g4137
sg63
(lp4144
g56
(g65
g58
NtRp4145
(dp4146
g61
(dp4147
g69
I4
ssg70
Nsg63
(lp4148
sbasbasbasbag56
(g72
g58
NtRp4149
(dp4150
g61
(dp4151
sg70
g3419
sg63
(lp4152
g56
(g77
g58
NtRp4153
(dp4154
g61
(dp4155
g81
g82
ssg70
g4149
sg63
(lp4156
S'session_file'
p4157
asbag56
(g77
g58
NtRp4158
(dp4159
g61
(dp4160
g88
g89
ssg70
g4149
sg63
(lp4161
S':'
asbag56
(g77
g58
NtRp4162
(dp4163
g61
(dp4164
sg70
g4149
sg63
(lp4165
g56
(g57
g58
NtRp4166
(dp4167
g61
(dp4168
g69
I5
ssg70
g4162
sg63
(lp4169
S"<open file '/media/misperoles/git/pyj3nnn1/web2py/applications/admin/sessions/127.0.0.1-f03ec27a-718d-4653-8522-92fe2f9856ae', mode 'rb+' at 0x7fe9704241e0>"
p4170
asbasbasbag56
(g72
g58
NtRp4171
(dp4172
g61
(dp4173
sg70
g3419
sg63
(lp4174
g56
(g77
g58
NtRp4175
(dp4176
g61
(dp4177
g81
g82
ssg70
g4171
sg63
(lp4178
S'session_filename'
p4179
asbag56
(g77
g58
NtRp4180
(dp4181
g61
(dp4182
g88
g89
ssg70
g4171
sg63
(lp4183
S':'
asbag56
(g77
g58
NtRp4184
(dp4185
g61
(dp4186
sg70
g4171
sg63
(lp4187
g56
(g57
g58
NtRp4188
(dp4189
g61
(dp4190
g69
I5
ssg70
g4184
sg63
(lp4191
S'/media/misperoles/git/pyj3nnn1/web2py/applications/admin/sessions/127.0.0.1-f03ec27a-718d-4653-8522-92fe2f9856ae'
p4192
asbasbasbag56
(g72
g58
NtRp4193
(dp4194
g61
(dp4195
sg70
g3419
sg63
(lp4196
g56
(g77
g58
NtRp4197
(dp4198
g61
(dp4199
g81
g82
ssg70
g4193
sg63
(lp4200
S'session_id'
p4201
asbag56
(g77
g58
NtRp4202
(dp4203
g61
(dp4204
g88
g89
ssg70
g4193
sg63
(lp4205
S':'
asbag56
(g77
g58
NtRp4206
(dp4207
g61
(dp4208
sg70
g4193
sg63
(lp4209
g56
(g57
g58
NtRp4210
(dp4211
g61
(dp4212
g69
I5
ssg70
g4206
sg63
(lp4213
S'127.0.0.1-f03ec27a-718d-4653-8522-92fe2f9856ae'
p4214
asbasbasbag56
(g72
g58
NtRp4215
(dp4216
g61
(dp4217
sg70
g3419
sg63
(lp4218
g56
(g77
g58
NtRp4219
(dp4220
g61
(dp4221
g81
g82
ssg70
g4215
sg63
(lp4222
S'session_id_name'
p4223
asbag56
(g77
g58
NtRp4224
(dp4225
g61
(dp4226
g88
g89
ssg70
g4215
sg63
(lp4227
S':'
asbag56
(g77
g58
NtRp4228
(dp4229
g61
(dp4230
sg70
g4215
sg63
(lp4231
g56
(g57
g58
NtRp4232
(dp4233
g61
(dp4234
g69
I5
ssg70
g4228
sg63
(lp4235
g3476
asbasbasbag56
(g72
g58
NtRp4236
(dp4237
g61
(dp4238
sg70
g3419
sg63
(lp4239
g56
(g77
g58
NtRp4240
(dp4241
g61
(dp4242
g81
g82
ssg70
g4236
sg63
(lp4243
S'session_locked'
p4244
asbag56
(g77
g58
NtRp4245
(dp4246
g61
(dp4247
g88
g89
ssg70
g4236
sg63
(lp4248
S':'
asbag56
(g77
g58
NtRp4249
(dp4250
g61
(dp4251
sg70
g4236
sg63
(lp4252
g56
(g57
g58
NtRp4253
(dp4254
g61
(dp4255
g69
I5
ssg70
g4249
sg63
(lp4256
g980
asbasbasbag56
(g72
g58
NtRp4257
(dp4258
g61
(dp4259
sg70
g3419
sg63
(lp4260
g56
(g77
g58
NtRp4261
(dp4262
g61
(dp4263
g81
g82
ssg70
g4257
sg63
(lp4264
S'session_new'
p4265
asbag56
(g77
g58
NtRp4266
(dp4267
g61
(dp4268
g88
g89
ssg70
g4257
sg63
(lp4269
S':'
asbag56
(g77
g58
NtRp4270
(dp4271
g61
(dp4272
sg70
g4257
sg63
(lp4273
g56
(g57
g58
NtRp4274
(dp4275
g61
(dp4276
g69
I5
ssg70
g4270
sg63
(lp4277
g980
asbasbasbag56
(g72
g58
NtRp4278
(dp4279
g61
(dp4280
sg70
g3419
sg63
(lp4281
g56
(g77
g58
NtRp4282
(dp4283
g61
(dp4284
g81
g82
ssg70
g4278
sg63
(lp4285
S'status'
p4286
asbag56
(g77
g58
NtRp4287
(dp4288
g61
(dp4289
g88
g89
ssg70
g4278
sg63
(lp4290
S':'
asbag56
(g77
g58
NtRp4291
(dp4292
g61
(dp4293
sg70
g4278
sg63
(lp4294
g56
(g57
g58
NtRp4295
(dp4296
g61
(dp4297
g69
I5
ssg70
g4291
sg63
(lp4298
S'200'
p4299
asbasbasbag56
(g72
g58
NtRp4300
(dp4301
g61
(dp4302
sg70
g3419
sg63
(lp4303
g56
(g77
g58
NtRp4304
(dp4305
g61
(dp4306
g81
g82
ssg70
g4300
sg63
(lp4307
S'subtitle'
p4308
asbag56
(g77
g58
NtRp4309
(dp4310
g61
(dp4311
g88
g89
ssg70
g4300
sg63
(lp4312
S':'
asbag56
(g77
g58
NtRp4313
(dp4314
g61
(dp4315
sg70
g4300
sg63
(lp4316
g56
(g57
g58
NtRp4317
(dp4318
g61
(dp4319
g69
I5
ssg70
g4313
sg63
(lp4320
S'admin'
p4321
asbasbasbag56
(g72
g58
NtRp4322
(dp4323
g61
(dp4324
sg70
g3419
sg63
(lp4325
g56
(g77
g58
NtRp4326
(dp4327
g61
(dp4328
g81
g82
ssg70
g4322
sg63
(lp4329
S'title'
p4330
asbag56
(g77
g58
NtRp4331
(dp4332
g61
(dp4333
g88
g89
ssg70
g4322
sg63
(lp4334
S':'
asbag56
(g77
g58
NtRp4335
(dp4336
g61
(dp4337
sg70
g4322
sg63
(lp4338
g56
(g57
g58
NtRp4339
(dp4340
g61
(dp4341
g69
I5
ssg70
g4335
sg63
(lp4342
S'check_version '
p4343
asbasbasbag56
(g72
g58
NtRp4344
(dp4345
g61
(dp4346
sg70
g3419
sg63
(lp4347
g56
(g77
g58
NtRp4348
(dp4349
g61
(dp4350
g81
g82
ssg70
g4344
sg63
(lp4351
g2450
asbag56
(g77
g58
NtRp4352
(dp4353
g61
(dp4354
g88
g89
ssg70
g4344
sg63
(lp4355
S':'
asbag56
(g77
g58
NtRp4356
(dp4357
g61
(dp4358
sg70
g4344
sg63
(lp4359
g56
(g57
g58
NtRp4360
(dp4361
g61
(dp4362
g69
I5
ssg70
g4356
sg63
(lp4363
g2463
asbasbasbag56
(g72
g58
NtRp4364
(dp4365
g61
(dp4366
sg70
g3419
sg63
(lp4367
g56
(g77
g58
NtRp4368
(dp4369
g61
(dp4370
g81
g82
ssg70
g4364
sg63
(lp4371
S'view'
p4372
asbag56
(g77
g58
NtRp4373
(dp4374
g61
(dp4375
g88
g89
ssg70
g4364
sg63
(lp4376
S':'
asbag56
(g77
g58
NtRp4377
(dp4378
g61
(dp4379
sg70
g4364
sg63
(lp4380
g56
(g57
g58
NtRp4381
(dp4382
g61
(dp4383
g69
I5
ssg70
g4377
sg63
(lp4384
S'default/check_version.html'
p4385
asbasbasbasbasbsS'locals'
p4386
(dp4387
S'version_number'
p4388
S"(1, 99, 4, datetime.datetime(2011, 12, 14, 14, 46, 14), 'stable')"
p4389
sS'new_version'
p4390
g99
sssS'traceback'
p4391
S'Traceback (most recent call last):\n  File "/media/misperoles/git/pyj3nnn1/web2py/gluon/restricted.py", line 194, in restricted\n    exec ccode in environment\n  File "/media/misperoles/git/pyj3nnn1/web2py/applications/admin/controllers/default.py", line 1225, in <module>\n  File "/media/misperoles/git/pyj3nnn1/web2py/gluon/globals.py", line 149, in <lambda>\n    self._caller = lambda f: f()\n  File "/media/misperoles/git/pyj3nnn1/web2py/applications/admin/controllers/default.py", line 105, in check_version\n    + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)\nTypeError: not all arguments converted during string formatting\n'
p4392
s.