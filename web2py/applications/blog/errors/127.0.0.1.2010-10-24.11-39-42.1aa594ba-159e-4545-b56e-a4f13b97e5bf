(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'gae\')                           # connect to Google BigTable\n    session.connect(request, response, db = db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\nelse:                                         # else use a normal relational database\n    db = DAL(\'sqlite://storage.sqlite\')       # if not, use SQLite or other DB\n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for \n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import *\nmail = Mail()                                  # mailer\nauth = Auth(globals(),db)                      # authentication/authorization\ncrud = Crud(globals(),db)                      # for CRUD helpers using auth\nservice = Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\nplugins = PluginManager()\n\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'  # your SMTP server\nmail.settings.sender = \'you@gmail.com\'         # your email\nmail.settings.login = \'username:password\'      # your credentials or None\n\nauth.settings.hmac_key = \'sha512:f3d5ade2-9740-497b-92a8-a0d5169de496\'   # before define_tables()\nauth.define_tables()                           # creates all needed tables\nauth.settings.mailer = mail                    # for user email verification\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.messages.verify_email = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'verify_email\'])+\'/%(key)s to verify your email\'\nauth.settings.reset_password_requires_verification = True\nauth.messages.reset_password = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'reset_password\'])+\'/%(key)s to reset your password\'\n\n#########################################################################\n## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, uncomment and customize following\n# from gluon.contrib.login_methods.rpx_account import RPXAccount\n# auth.settings.actions_disabled=[\'register\',\'change_password\',\'request_reset_password\']\n# auth.settings.login_form = RPXAccount(request, api_key=\'...\',domain=\'...\',\n#    url = "http://localhost:8000/%s/default/user/login" % request.application)\n## other login methods are in gluon/contrib/login_methods\n#########################################################################\n\ncrud.settings.auth = None                      # =auth to enforce authorization on crud\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\ndb.define_table(\'usuarios\',\n        Field(\'usuario\'), \n        Field(\'clave\'),\n        Field(\'correo\', requires=IS_EMAIL(), readable=False, writable=True),\n        unique=[\'usuario\',\'correo\'])\n        \ndb.usuarios.usuario.requires = IS_NOT_IN_DB(db,\'usuarios.usuario\')\n\nimport datetime\nnow = datetime.datetime.today()\n\ndb.define_table(\'articulos\',\n        Field(\'titulo\',\'string\',length=255),\n        Field(\'articulo\',\'text\'),\n        Field(\'fecha\',\'datetime\'),\n        Field(\'id_usuario\',db.usuarios, readable=False, writable=False))\n        \ndb.articulos.titulo.requires=IS_NOT_IN_DB(db, \'articulos.titulo\')\n\ndb.define_table(\'comentarios\',\n        Field(\'id_articulo\', db.articulos, readable=False, writable=False),\n        Field(\'titulo\'),\n        Field(\'comentario\', requires = IS_NOT_EMPTY()),\n        Field(\'nombre\', requires = IS_NOT_EMPTY()),\n        Field(\'correo\', requires = IS_EMAIL()),\n        Field(\'url\', required = False, requires=IS_URL()),\n        Field(\'fecha\',\'datetime\'),\n        Field(\'visible\', \'boolean\'),format=\'%(nombre)s\')\n\n\ndb.define_table(\'etiquetas\',\n        Field(\'nombre\', requires=IS_NOT_EMPTY()))\n\n\ndb.define_table(\'etiquetas_articulos\', \n        Field(\'id_etiqueta\',db.etiquetas, readable=False, writable=False),      \n        Field(\'id_articulo\',db.articulos, readable=False, writable=False))\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__getslice__'
p11
S"<method-wrapper '__getslice__' of exceptions.SyntaxError object>"
p12
sS'text'
p13
S'None'
p14
sS'__str__'
p15
S"<method-wrapper '__str__' of exceptions.SyntaxError object>"
p16
sS'__reduce__'
p17
S'<built-in method __reduce__ of exceptions.SyntaxError object>'
p18
sS'__dict__'
p19
S'{}'
p20
sS'__sizeof__'
p21
S'<built-in method __sizeof__ of exceptions.SyntaxError object>'
p22
sS'__init__'
p23
S"<method-wrapper '__init__' of exceptions.SyntaxError object>"
p24
sS'__setattr__'
p25
S"<method-wrapper '__setattr__' of exceptions.SyntaxError object>"
p26
sS'__reduce_ex__'
p27
S'<built-in method __reduce_ex__ of exceptions.SyntaxError object>'
p28
sS'__new__'
p29
S'<built-in method __new__ of type object>'
p30
sS'__format__'
p31
S'<built-in method __format__ of exceptions.SyntaxError object>'
p32
sS'__class__'
p33
S"<type 'exceptions.SyntaxError'>"
p34
sS'filename'
p35
S'None'
p36
sS'lineno'
p37
S'None'
p38
sS'msg'
p39
S'\'invalid table "usuarios" attribute: unique\''
p40
sS'__doc__'
p41
S"'Invalid syntax.'"
p42
sS'__getitem__'
p43
S"<method-wrapper '__getitem__' of exceptions.SyntaxError object>"
p44
sS'__setstate__'
p45
S'<built-in method __setstate__ of exceptions.SyntaxError object>'
p46
sS'__getattribute__'
p47
S"<method-wrapper '__getattribute__' of exceptions.SyntaxError object>"
p48
sS'print_file_and_line'
p49
S'None'
p50
sS'args'
p51
S'(\'invalid table "usuarios" attribute: unique\',)'
p52
sS'__subclasshook__'
p53
S'<built-in method __subclasshook__ of type object>'
p54
sS'offset'
p55
S'None'
p56
sS'__unicode__'
p57
S'<built-in method __unicode__ of exceptions.SyntaxError object>'
p58
sS'__delattr__'
p59
S"<method-wrapper '__delattr__' of exceptions.SyntaxError object>"
p60
sS'__repr__'
p61
S"<method-wrapper '__repr__' of exceptions.SyntaxError object>"
p62
sS'__hash__'
p63
S"<method-wrapper '__hash__' of exceptions.SyntaxError object>"
p64
ssS'evalue'
p65
S'invalid table "usuarios" attribute: unique'
p66
sS'request'
p67
(dp68
S'function'
p69
S"'index'"
p70
sS'body'
p71
S'<cStringIO.StringO object>'
p72
sS'wsgi'
p73
S"<Storage {'start_response': <function <lambda> a...>, 'HTTP_ACCEPT_ENCODING': 'gzip,deflate,sdch'}}>"
p74
sS'extension'
p75
S"'html'"
p76
sS'vars'
p77
S'<Storage {}>'
p78
sS'cid'
p79
S'None'
p80
sS'url'
p81
S'<gluon.html.XML object>'
p82
sg51
S'[]'
p83
sS'controller'
p84
S"'appadmin'"
p85
sS'cookies'
p86
S"<SimpleCookie: session_id_admin='127-0-0-1-30657...'127-0-0-1-f66a923b-35d4-4221-bb69-65adf56edca3'>"
p87
sS'application'
p88
S"'blog'"
p89
sS'ajax'
p90
S'False'
p91
sS'client'
p92
S"'127.0.0.1'"
p93
sS'env'
p94
S"<Storage {'http_user_agent': 'Mozilla/5.0 (X11; ...ce': False, 'path_info': '/blog/appadmin/index'}>"
p95
sS'raw_args'
p96
S'None'
p97
sS'get_vars'
p98
S'<Storage {}>'
p99
sS'folder'
p100
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/'"
p101
sS'now'
p102
S'datetime.datetime(2010, 10, 24, 11, 39, 42, 758829)'
p103
sS'post_vars'
p104
S'<Storage {}>'
p105
ssS'frames'
p106
(lp107
(dp108
S'file'
p109
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py'
p110
sS'dump'
p111
(dp112
S'environment'
p113
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p114
sS'ccode'
p115
S'<code object <module> at 0x9116e30, file "/home/...1/web2py/applications/blog/models/db.py", line 7>'
p116
ssS'lnum'
p117
I188
sS'lines'
p118
(dp119
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p120
sI183
S'        if type(code) == types.CodeType:'
p121
sI184
S'            ccode = code'
p122
sI185
S'        else:'
p123
sI186
S'            ccode = compile2(code,layer)'
p124
sI187
S''
sI188
S'        exec ccode in environment'
p125
sI189
S'    except HTTP:'
p126
sI190
S'        raise'
p127
sI191
S'    except Exception:'
p128
ssS'call'
p129
S'(code="# -*- coding: utf-8 -*- \\n\\n######################...\',db.articulos, readable=False, writable=False))\\n", environment={\'A\': <class \'gluon.html.A\'>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, \'CLEANUP\': <class \'gluon.validators.CLEANUP\'>, \'CODE\': <class \'gluon.html.CODE\'>, \'CRYPT\': <class \'gluon.validators.CRYPT\'>, ...}, layer=\'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py\')'
p130
sS'func'
p131
S'restricted'
p132
sa(dp133
g109
S'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py'
p134
sg111
(dp135
S'unique'
p136
S'undefined'
p137
ssg117
I82
sg118
(dp138
I77
S''
sI78
S"db.define_table('usuarios',"
p139
sI79
S"        Field('usuario'),"
p140
sI80
S"        Field('clave'),"
p141
sI81
S"        Field('correo', requires=IS_EMAIL(), readable=False, writable=True),"
p142
sI82
S"        unique=['usuario','correo'])"
p143
sI83
S''
sI84
S"db.usuarios.usuario.requires = IS_NOT_IN_DB(db,'usuarios.usuario')"
p144
sI85
S''
sI86
S'import datetime'
p145
ssg129
S'()'
p146
sg131
S'<module>'
p147
sa(dp148
g109
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/sql.py'
p149
sg111
(dp150
S'tablename'
p151
S"'usuarios'"
p152
sS'builtinSyntaxError'
p153
S"<type 'exceptions.SyntaxError'>"
p154
sS'key'
p155
S"'unique'"
p156
ssg117
I1310
sg118
(dp157
I1312
S"        fake_migrate = args.get('fake_migrate', self._fake_migrate)"
p158
sI1313
S"        format = args.get('format', None)"
p159
sI1314
S"        trigger_name = args.get('trigger_name', None)"
p160
sI1305
S"                    'primarykey',"
p161
sI1306
S"                    'fake_migrate',"
p162
sI1307
S"                    'format',"
p163
sI1308
S"                    'trigger_name',"
p164
sI1309
S"                    'sequence_name']:"
p165
sI1310
S'                raise SyntaxError, \'invalid table "%s" attribute: %s\' % (tablename, key)'
p166
sI1311
S"        migrate = args.get('migrate', self._migrate)"
p167
ssg129
S"(self=<SQLDB {'_connection': <pysqlite2.dbapi2.Connect...0x935d96c>}>, '_migrate': True, '_pool_size': 0}>, tablename='usuarios', *fields=(<gluon.sql.Field object>, <gluon.sql.Field object>, <gluon.sql.Field object>), **args={'unique': ['usuario', 'correo']})"
p168
sg131
S'define_table'
p169
sasS'pyver'
p170
S'Python 2.6.6: /usr/bin/python'
p171
sS'session'
p172
(dp173
S'last_orderby'
p174
S'None'
p175
sS'last_query'
p176
S'\'db.usuarios.usuario!=""\''
p177
sS'_formkey[default]'
p178
S"'a1de23bf-1680-4a4f-b9de-957af6cc5cdf'"
p179
sS'auth'
p180
S'None'
p181
sS'_formkey[usuarios_create]'
p182
S"'278c5c27-8482-444c-acae-f326ebcc5253'"
p183
ssS'etype'
p184
S"<type 'exceptions.SyntaxError'>"
p185
sS'date'
p186
S'Sun Oct 24 11:39:42 2010'
p187
sS'response'
p188
(dp189
S'status'
p190
S'200'
p191
sg71
S'<cStringIO.StringO object>'
p192
sg86
S"<SimpleCookie: session_id_blog='127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'>"
p193
sS'_vars'
p194
S'None'
p195
sS'session_file'
p196
S"<open file '/home/j3nnn1/git/pyj3nnn1/web2py/app...9e49980-0272-480c-b712-192f1f1b4547', mode 'rb+'>"
p197
sS'flash'
p198
S"''"
p199
sS'_custom_rollback'
p200
S'None'
p201
sS'session_id'
p202
S"'127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'"
p203
sS'headers'
p204
S"<Storage {'Expires': 'Sun, 24 Oct 2010 16:09:42 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p205
sS'meta'
p206
S'<Storage {}>'
p207
sS'session_filename'
p208
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/bl...ns/127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'"
p209
sS'postprocessing'
p210
S'[]'
p211
sS'menu'
p212
S'[]'
p213
sS'_view_environment'
p214
S"{'A': <class 'gluon.html.A'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, 'DAL': <function DAL>, ...}"
p215
sS'session_id_name'
p216
S"'session_id_blog'"
p217
sS'_custom_commit'
p218
S'None'
p219
sS'_caller'
p220
S'<function <lambda>>'
p221
sS'files'
p222
S'[]'
p223
sS'view'
p224
S"'appadmin/index.html'"
p225
ssS'locals'
p226
(dp227
S'fields'
p228
S'(<gluon.sql.Field object>, <gluon.sql.Field object>, <gluon.sql.Field object>)'
p229
sS'self'
p230
S"<SQLDB {'_connection': <pysqlite2.dbapi2.Connect...0x935d96c>}>, '_migrate': True, '_pool_size': 0}>"
p231
sg51
S"{'unique': ['usuario', 'correo']}"
p232
sS'tablename'
p233
S"'usuarios'"
p234
sS'key'
p235
S"'unique'"
p236
sssS'traceback'
p237
S'Traceback (most recent call last):\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py", line 82, in <module>\n    unique=[\'usuario\',\'correo\'])\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/sql.py", line 1310, in define_table\n    raise SyntaxError, \'invalid table "%s" attribute: %s\' % (tablename, key)\nSyntaxError: invalid table "usuarios" attribute: unique\n'
p238
s.