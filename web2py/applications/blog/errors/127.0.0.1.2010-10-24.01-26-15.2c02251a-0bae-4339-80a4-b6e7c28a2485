(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'gae\')                           # connect to Google BigTable\n    session.connect(request, response, db = db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\nelse:                                         # else use a normal relational database\n    db = DAL(\'sqlite://storage.sqlite\')       # if not, use SQLite or other DB\n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for \n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import *\nmail = Mail()                                  # mailer\nauth = Auth(globals(),db)                      # authentication/authorization\ncrud = Crud(globals(),db)                      # for CRUD helpers using auth\nservice = Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\nplugins = PluginManager()\n\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'  # your SMTP server\nmail.settings.sender = \'you@gmail.com\'         # your email\nmail.settings.login = \'username:password\'      # your credentials or None\n\nauth.settings.hmac_key = \'sha512:f3d5ade2-9740-497b-92a8-a0d5169de496\'   # before define_tables()\nauth.define_tables()                           # creates all needed tables\nauth.settings.mailer = mail                    # for user email verification\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.messages.verify_email = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'verify_email\'])+\'/%(key)s to verify your email\'\nauth.settings.reset_password_requires_verification = True\nauth.messages.reset_password = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'reset_password\'])+\'/%(key)s to reset your password\'\n\n#########################################################################\n## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, uncomment and customize following\n# from gluon.contrib.login_methods.rpx_account import RPXAccount\n# auth.settings.actions_disabled=[\'register\',\'change_password\',\'request_reset_password\']\n# auth.settings.login_form = RPXAccount(request, api_key=\'...\',domain=\'...\',\n#    url = "http://localhost:8000/%s/default/user/login" % request.application)\n## other login methods are in gluon/contrib/login_methods\n#########################################################################\n\ncrud.settings.auth = None                      # =auth to enforce authorization on crud\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n \n   \ndb.define_table(\'usuarios\',\n        Field(\'usuario\', readable=True, writable=True), \n        Field(\'password\', readable=True, writable=True),\n        Field(\'correo\', readable=False, writable=False, requires=IS_EMAIL()),\n        primarykey=[\'usuario\',\'correo\'])\n        \ndb.usuarios.usuario.requires = IS_NOT_IN_DB(db,\'usuarios.usuario\')\n\ndb.define_table(\'articulos\',\n        Field(\'titulo\',\'string\',length=255),\n        Field(\'articulo\',\'text\'),\n        Field(\'fecha\',\'datetime\'),\n        Field(\'id_usuario\',db.usuarios, readable=False, writable=False))\n        \ndb.articulos.titulo.requires=IS_NOT_IN_DB(db, \'articulos.titulo\')\n\ndb.define_table(\'comentarios\',\n        Field(\'id_articulo\', db.articulos, readable=False, writable=False),\n        Field(\'titulo\'),\n        Field(\'comentario\', requires = IS_NOT_EMPTY()),\n        Field(\'nombre\', requires = IS_NOT_EMPTY()),\n        Field(\'correo\', requires = IS_EMAIL()),\n        Field(\'url\', required = False, requires=IS_URL()),\n        Field(\'fecha\',\'datetime\'),\n        Field(\'visible\', \'boolean\'),format=\'%(nombre)s\')\n\n\ndb.define_table(\'etiquetas\',\n        Field(\'nombre\'), requires=IS_NOT_EMPTY())\n\n\ndb.define_table(\'etiquetas_articulos\', \n        Field(\'id_etiqueta\',db.etiquetas, readable=False, writable=False),      \n        Field(\'id_articulo\',db.articulos, readable=False, writable=False))\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__getslice__'
p11
S"<method-wrapper '__getslice__' of exceptions.SyntaxError object>"
p12
sS'text'
p13
S'None'
p14
sS'__str__'
p15
S"<method-wrapper '__str__' of exceptions.SyntaxError object>"
p16
sS'__reduce__'
p17
S'<built-in method __reduce__ of exceptions.SyntaxError object>'
p18
sS'__dict__'
p19
S'{}'
p20
sS'__sizeof__'
p21
S'<built-in method __sizeof__ of exceptions.SyntaxError object>'
p22
sS'__init__'
p23
S"<method-wrapper '__init__' of exceptions.SyntaxError object>"
p24
sS'__setattr__'
p25
S"<method-wrapper '__setattr__' of exceptions.SyntaxError object>"
p26
sS'__reduce_ex__'
p27
S'<built-in method __reduce_ex__ of exceptions.SyntaxError object>'
p28
sS'__new__'
p29
S'<built-in method __new__ of type object>'
p30
sS'__format__'
p31
S'<built-in method __format__ of exceptions.SyntaxError object>'
p32
sS'__class__'
p33
S"<type 'exceptions.SyntaxError'>"
p34
sS'filename'
p35
S'None'
p36
sS'lineno'
p37
S'None'
p38
sS'msg'
p39
S'\'invalid table "etiquetas" attribute: requires\''
p40
sS'__doc__'
p41
S"'Invalid syntax.'"
p42
sS'__getitem__'
p43
S"<method-wrapper '__getitem__' of exceptions.SyntaxError object>"
p44
sS'__setstate__'
p45
S'<built-in method __setstate__ of exceptions.SyntaxError object>'
p46
sS'__getattribute__'
p47
S"<method-wrapper '__getattribute__' of exceptions.SyntaxError object>"
p48
sS'print_file_and_line'
p49
S'None'
p50
sS'args'
p51
S'(\'invalid table "etiquetas" attribute: requires\',)'
p52
sS'__subclasshook__'
p53
S'<built-in method __subclasshook__ of type object>'
p54
sS'offset'
p55
S'None'
p56
sS'__unicode__'
p57
S'<built-in method __unicode__ of exceptions.SyntaxError object>'
p58
sS'__delattr__'
p59
S"<method-wrapper '__delattr__' of exceptions.SyntaxError object>"
p60
sS'__repr__'
p61
S"<method-wrapper '__repr__' of exceptions.SyntaxError object>"
p62
sS'__hash__'
p63
S"<method-wrapper '__hash__' of exceptions.SyntaxError object>"
p64
ssS'evalue'
p65
S'invalid table "etiquetas" attribute: requires'
p66
sS'request'
p67
(dp68
S'function'
p69
S"'index'"
p70
sS'body'
p71
S'<cStringIO.StringO object>'
p72
sS'wsgi'
p73
S"<Storage {'start_response': <function <lambda> a...>, 'HTTP_ACCEPT_ENCODING': 'gzip,deflate,sdch'}}>"
p74
sS'extension'
p75
S"'html'"
p76
sS'vars'
p77
S'<Storage {}>'
p78
sS'cid'
p79
S'None'
p80
sS'url'
p81
S'<gluon.html.XML object>'
p82
sg51
S'[]'
p83
sS'controller'
p84
S"'appadmin'"
p85
sS'cookies'
p86
S"<SimpleCookie: session_id_admin='127-0-0-1-30657...'127-0-0-1-f66a923b-35d4-4221-bb69-65adf56edca3'>"
p87
sS'application'
p88
S"'blog'"
p89
sS'ajax'
p90
S'False'
p91
sS'client'
p92
S"'127.0.0.1'"
p93
sS'env'
p94
S"<Storage {'http_user_agent': 'Mozilla/5.0 (X11; ...ch', 'query_string': '', 'wsgi_run_once': False}>"
p95
sS'raw_args'
p96
S'None'
p97
sS'get_vars'
p98
S'<Storage {}>'
p99
sS'folder'
p100
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/'"
p101
sS'now'
p102
S'datetime.datetime(2010, 10, 24, 1, 26, 15, 965846)'
p103
sS'post_vars'
p104
S'<Storage {}>'
p105
ssS'frames'
p106
(lp107
(dp108
S'file'
p109
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py'
p110
sS'dump'
p111
(dp112
S'environment'
p113
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p114
sS'ccode'
p115
S'<code object <module> at 0xa1a6380, file "/home/...1/web2py/applications/blog/models/db.py", line 7>'
p116
ssS'lnum'
p117
I188
sS'lines'
p118
(dp119
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p120
sI183
S'        if type(code) == types.CodeType:'
p121
sI184
S'            ccode = code'
p122
sI185
S'        else:'
p123
sI186
S'            ccode = compile2(code,layer)'
p124
sI187
S''
sI188
S'        exec ccode in environment'
p125
sI189
S'    except HTTP:'
p126
sI190
S'        raise'
p127
sI191
S'    except Exception:'
p128
ssS'call'
p129
S'(code="# -*- coding: utf-8 -*- \\n\\n######################...\',db.articulos, readable=False, writable=False))\\n", environment={\'A\': <class \'gluon.html.A\'>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, \'CLEANUP\': <class \'gluon.validators.CLEANUP\'>, \'CODE\': <class \'gluon.html.CODE\'>, \'CRYPT\': <class \'gluon.validators.CRYPT\'>, ...}, layer=\'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py\')'
p130
sS'func'
p131
S'restricted'
p132
sa(dp133
g109
S'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py'
p134
sg111
(dp135
S'IS_NOT_EMPTY'
p136
S"<class 'gluon.validators.IS_NOT_EMPTY'>"
p137
sS'Field'
p138
S"<class 'gluon.sql.Field'>"
p139
sS'requires'
p140
S'undefined'
p141
ssg117
I107
sg118
(dp142
I102
S"        Field('fecha','datetime'),"
p143
sI103
S"        Field('visible', 'boolean'),format='%(nombre)s')"
p144
sI104
S''
sI105
S''
sI106
S"db.define_table('etiquetas',"
p145
sI107
S"        Field('nombre'), requires=IS_NOT_EMPTY())"
p146
sI108
S''
sI109
S''
sI110
S"db.define_table('etiquetas_articulos',"
p147
sI111
S"        Field('id_etiqueta',db.etiquetas, readable=False, writable=False),"
p148
ssg129
S'()'
p149
sg131
S'<module>'
p150
sa(dp151
g109
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/sql.py'
p152
sg111
(dp153
S'tablename'
p154
S"'etiquetas'"
p155
sS'builtinSyntaxError'
p156
S"<type 'exceptions.SyntaxError'>"
p157
sS'key'
p158
S"'requires'"
p159
ssg117
I1310
sg118
(dp160
I1312
S"        fake_migrate = args.get('fake_migrate', self._fake_migrate)"
p161
sI1313
S"        format = args.get('format', None)"
p162
sI1314
S"        trigger_name = args.get('trigger_name', None)"
p163
sI1305
S"                    'primarykey',"
p164
sI1306
S"                    'fake_migrate',"
p165
sI1307
S"                    'format',"
p166
sI1308
S"                    'trigger_name',"
p167
sI1309
S"                    'sequence_name']:"
p168
sI1310
S'                raise SyntaxError, \'invalid table "%s" attribute: %s\' % (tablename, key)'
p169
sI1311
S"        migrate = args.get('migrate', self._migrate)"
p170
ssg129
S"(self=<SQLDB {'auth_event': <Table {'origin': <gluon.s..., 'id': <gluon.sql.Field object at 0xa5140ec>}>}>, tablename='etiquetas', *fields=(<gluon.sql.Field object>,), **args={'requires': <gluon.validators.IS_NOT_EMPTY object>})"
p171
sg131
S'define_table'
p172
sasS'pyver'
p173
S'Python 2.6.6: /usr/bin/python'
p174
sS'session'
p175
(dp176
S'auth'
p177
S'None'
p178
ssS'etype'
p179
S"<type 'exceptions.SyntaxError'>"
p180
sS'date'
p181
S'Sun Oct 24 01:26:15 2010'
p182
sS'response'
p183
(dp184
S'status'
p185
S'200'
p186
sg71
S'<cStringIO.StringO object>'
p187
sg86
S"<SimpleCookie: session_id_blog='127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'>"
p188
sS'_vars'
p189
S'None'
p190
sS'session_file'
p191
S"<open file '/home/j3nnn1/git/pyj3nnn1/web2py/app...9e49980-0272-480c-b712-192f1f1b4547', mode 'rb+'>"
p192
sS'flash'
p193
S"''"
p194
sS'_custom_rollback'
p195
S'None'
p196
sS'session_id'
p197
S"'127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'"
p198
sS'headers'
p199
S"<Storage {'Expires': 'dom, 24 oct 2010 05:56:15 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p200
sS'meta'
p201
S'<Storage {}>'
p202
sS'session_filename'
p203
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/bl...ns/127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'"
p204
sS'postprocessing'
p205
S'[]'
p206
sS'menu'
p207
S'[]'
p208
sS'_view_environment'
p209
S"{'A': <class 'gluon.html.A'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, 'DAL': <function DAL>, ...}"
p210
sS'session_id_name'
p211
S"'session_id_blog'"
p212
sS'_custom_commit'
p213
S'None'
p214
sS'_caller'
p215
S'<function <lambda>>'
p216
sS'files'
p217
S'[]'
p218
sS'view'
p219
S"'appadmin/index.html'"
p220
ssS'locals'
p221
(dp222
S'fields'
p223
S'(<gluon.sql.Field object>,)'
p224
sS'self'
p225
S"<SQLDB {'auth_event': <Table {'origin': <gluon.s..., 'id': <gluon.sql.Field object at 0xa5140ec>}>}>"
p226
sg51
S"{'requires': <gluon.validators.IS_NOT_EMPTY object>}"
p227
sS'tablename'
p228
S"'etiquetas'"
p229
sS'key'
p230
S"'requires'"
p231
sssS'traceback'
p232
S'Traceback (most recent call last):\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py", line 107, in <module>\n    Field(\'nombre\'), requires=IS_NOT_EMPTY())\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/sql.py", line 1310, in define_table\n    raise SyntaxError, \'invalid table "%s" attribute: %s\' % (tablename, key)\nSyntaxError: invalid table "etiquetas" attribute: requires\n'
p233
s.