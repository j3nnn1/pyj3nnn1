(dp1
S'output'
p2
S''
sS'layer'
p3
S'/cygdrive/e/Documents and Settings/jmaldo03/git/pyj3nnn1/pyj3nnn1/web2py/applications/blog/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \n\ndef index():\n    """\n    Esta vista va a obtener 3 post\n    """\n    # filter to join.\n    filtro = (db.articulos.id_usuario==db.usuarios.id)\n    perpage = 3                                  # Numero de articulos por pagina\n    totalposts = db(db.articulos.id > 0).count() # contamos cuantos posts hay en la bd\n    totalpages = totalposts / perpage            # division para sacar el numero de paginas\n                  \n    page = int(request.vars.page) if request.vars.page else 1\n    limit = int(page - 1) * perpage\n                         \n    if totalposts > perpage and totalpages == 1 and totalpages * perpage != totalposts:\n        totalpages = 2\n                                                        \n    post = db(filtro).select(db.articulos.ALL, db.usuarios.usuario,limitby=(limit,page*perpage),orderby=~db.articulos.fecha)\n\n    return dict(post=post,totalpages=totalpages,postpage=page)\n\ndef about():\n    """ Informaci\xc3\xb3n sobre mi persona"""\n    return dict()\n\ndef viewpost():\n    if request.args(0):\n        filtro      = ((db.articulos.id==request.args(0)) & (db.articulos.id_usuario==db.usuarios.id))\n        post        = db(filtro).select(db.articulos.ALL, db.usuarios.usuario).first()\n\n        if post:\n            form        = SQLFORM(db.comentarios)\n            form.vars.id_articulo = post.articulos.id\n            filtro          = (db.comentarios.id_articulo==post.articulos.id)\n            comments        = (db(filtro).select(db.comentarios.ALL, orderby=~db.comentarios.fecha)).records \n        else:\n            redirect(URL(\'index\'))\n\n        if form.accepts(request.vars, session):\n            response.flash =\'Tu comentario ha sido publicado\'\n    else:\n        redirect(URL(\'index\'))\n\n    return dict(post=post, form=form, comments=comments)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef admin():\n\n    return dict()\n\ndef modifypost():\n\n    if request.args(0):  #modificando un post\n\n\tfiltro = ((db.articulos.id==request.args(0)) & (db.articulos.id_usuario==db.usuarios.id))\n        post   = db(filtro).select(db.articulos.ALL, db.usuarios.usuario)\n\n\tif post:\n\t    form = SQLFORM(post)\n\telse:\n\t    response.flash =\'No existe el articulo\'\n\n\tif form.accepts(request.vars, session):\n            response.flash =\'Tu comentario ha sido publicado\'\n\n    else:\n\t response.flash =\'No existe el articulo\'\n    \n    return dict(form=form)\n\ndef createpost():\n    \n\n    return dict()\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\nresponse._vars=response._caller(modifypost)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.UnboundLocalError object>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.UnboundLocalError object>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.UnboundLocalError object>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.UnboundLocalError object>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.UnboundLocalError object>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.UnboundLocalError object>'
p22
sS'__reduce__'
p23
S'<built-in method __reduce__ of exceptions.UnboundLocalError object>'
p24
sS'__str__'
p25
S"<method-wrapper '__str__' of exceptions.UnboundLocalError object>"
p26
sS'__format__'
p27
S'<built-in method __format__ of exceptions.UnboundLocalError object>'
p28
sS'__getattribute__'
p29
S"<method-wrapper '__getattribute__' of exceptions.UnboundLocalError object>"
p30
sS'__class__'
p31
S"<type 'exceptions.UnboundLocalError'>"
p32
sS'__unicode__'
p33
S'<built-in method __unicode__ of exceptions.UnboundLocalError object>'
p34
sS'__delattr__'
p35
S"<method-wrapper '__delattr__' of exceptions.UnboundLocalError object>"
p36
sS'__subclasshook__'
p37
S'<built-in method __subclasshook__ of type object>'
p38
sS'__repr__'
p39
S"<method-wrapper '__repr__' of exceptions.UnboundLocalError object>"
p40
sS'args'
p41
S'("local variable \'form\' referenced before assignment",)'
p42
sS'__dict__'
p43
S'{}'
p44
sS'__sizeof__'
p45
S'<built-in method __sizeof__ of exceptions.UnboundLocalError object>'
p46
sS'__doc__'
p47
S"'Local name referenced but not bound to a value.'"
p48
sS'__init__'
p49
S"<method-wrapper '__init__' of exceptions.UnboundLocalError object>"
p50
sS'__new__'
p51
S'<built-in method __new__ of type object>'
p52
ssS'evalue'
p53
S"local variable 'form' referenced before assignment"
p54
sS'request'
p55
(dp56
S'function'
p57
S"'modifypost'"
p58
sS'body'
p59
S'<cStringIO.StringO object>'
p60
sS'wsgi'
p61
S"<Storage {'start_response': <function <lambda> a...ING': 'gzip,deflate', 'HTTP_KEEP_ALIVE': '115'}}>"
p62
sS'extension'
p63
S"'html'"
p64
sS'vars'
p65
S'<Storage {}>'
p66
sS'cid'
p67
S'None'
p68
sS'url'
p69
S'<gluon.html.XML object>'
p70
sg41
S'[]'
p71
sS'controller'
p72
S"'default'"
p73
sS'cookies'
p74
S"<SimpleCookie: session_id_admin='127-0-0-1-877c5...'127-0-0-1-abbacfdd-6a37-4a45-8aaf-8734a84b6dd4'>"
p75
sS'application'
p76
S"'blog'"
p77
sS'ajax'
p78
S'False'
p79
sS'client'
p80
S"'127.0.0.1'"
p81
sS'env'
p82
S"<Storage {'http_user_agent': 'Mozilla/5.0 (Windo... False, 'path_info': '/blog/default/modifypost'}>"
p83
sS'raw_args'
p84
S'None'
p85
sS'get_vars'
p86
S'<Storage {}>'
p87
sS'folder'
p88
S"'/cygdrive/e/Documents and Settings/jmaldo03/git/pyj3nnn1/pyj3nnn1/web2py/applications/blog/'"
p89
sS'now'
p90
S'datetime.datetime(2010, 10, 25, 9, 44, 27, 526750)'
p91
sS'post_vars'
p92
S'<Storage {}>'
p93
ssS'frames'
p94
(lp95
(dp96
S'file'
p97
S'/cygdrive/e/Documents and Settings/jmaldo03/git/pyj3nnn1/pyj3nnn1/web2py/gluon/restricted.py'
p98
sS'dump'
p99
(dp100
S'environment'
p101
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p102
sS'ccode'
p103
S'<code object <module> at 0xf5b4a0, file "/cygdri...plications/blog/controllers/default.py", line 11>'
p104
ssS'lnum'
p105
I188
sS'lines'
p106
(dp107
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p108
sI183
S'        if type(code) == types.CodeType:'
p109
sI184
S'            ccode = code'
p110
sI185
S'        else:'
p111
sI186
S'            ccode = compile2(code,layer)'
p112
sI187
S''
sI188
S'        exec ccode in environment'
p113
sI189
S'    except HTTP:'
p114
sI190
S'        raise'
p115
sI191
S'    except Exception:'
p116
ssS'call'
p117
S"(code='# -*- coding: utf-8 -*- \\n\\n######################...e()\\n\\nresponse._vars=response._caller(modifypost)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}, layer='/cygdrive/e/Documents and Settings/jmaldo03/git/...1/web2py/applications/blog/controllers/default.py')"
p118
sS'func'
p119
S'restricted'
p120
sa(dp121
g97
S'/cygdrive/e/Documents and Settings/jmaldo03/git/pyj3nnn1/pyj3nnn1/web2py/applications/blog/controllers/default.py'
p122
sg99
(dp123
sg105
I119
sg106
(dp124
I108
S''
sI109
S'def call():'
p125
sI110
S'    """'
p126
sI111
S'    exposes services. for example:'
p127
sI112
S'    http://..../[app]/default/call/jsonrpc'
p128
sI113
S'    decorate with @services.jsonrpc the functions to expose'
p129
sI114
S'    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv'
p130
sI115
S'    """'
p131
sI116
S'    session.forget()'
p132
sI117
S'    return service()'
p133
ssg117
S'()'
p134
sg119
S'<module>'
p135
sa(dp136
g97
S'/cygdrive/e/Documents and Settings/jmaldo03/git/pyj3nnn1/pyj3nnn1/web2py/gluon/globals.py'
p137
sg99
(dp138
S'self'
p139
S'undefined'
p140
sS'f'
S'<function modifypost>'
p141
ssg105
I96
sg106
(dp142
I96
S'        self._caller = lambda f: f()'
p143
sI97
S'        self._view_environment = None'
p144
sI98
S'        self._custom_commit = None'
p145
sI99
S'        self._custom_rollback = None'
p146
sI100
S''
sI91
S"        self.flash = ''           # used by the default view layout"
p147
sI92
S'        self.meta = Storage()     # used by web2py_ajax.html'
p148
sI93
S'        self.menu = []            # used by the default view layout'
p149
sI94
S'        self.files = []           # used by web2py_ajax.html'
p150
sI95
S'        self._vars = None'
p151
ssg117
S'(f=<function modifypost>)'
p152
sg119
S'<lambda>'
p153
sa(dp154
g97
S'/cygdrive/e/Documents and Settings/jmaldo03/git/pyj3nnn1/pyj3nnn1/web2py/applications/blog/controllers/default.py'
p155
sg99
(dp156
S'form'
p157
g140
sS'builtindict'
p158
S"<type 'dict'>"
p159
ssg105
I94
sg106
(dp160
I96
S'def createpost():'
p161
sI97
S''
sI98
S''
sI89
S"            response.flash ='Tu comentario ha sido publicado'"
p162
sI90
S''
sI91
S'    else:'
p163
sI92
S"\t response.flash ='No existe el articulo'"
p164
sI93
S''
sI94
S'    return dict(form=form)'
p165
sI95
S''
ssg117
S'()'
p166
sg119
S'modifypost'
p167
sasS'pyver'
p168
S'Python 2.6.5: /usr/bin/python'
p169
sS'session'
p170
(dp171
S'_formkey[articulos_create]'
p172
S"'d935a8cd-4db6-48df-8739-3756fea9723e'"
p173
sS'_formkey[register]'
p174
S"'916f3654-72ab-4fe3-8c51-26ed26684973'"
p175
sS'flash'
p176
S'None'
p177
sS'auth'
p178
S"<Storage {'expiration': 3600, 'last_visit': date...y': '', 'email': 'jcmm986@gmail.com', 'id': 1}>}>"
p179
sS'last_orderby'
p180
S'None'
p181
sS'last_query'
p182
S"'db.articulos.id>0'"
p183
sS'_formkey[articulos_1]'
p184
S"'074680d4-ecb2-487d-9a3c-920a47b19b26'"
p185
sS'_formkey[login]'
p186
S"'cd0d63aa-d852-4aef-8758-6b04cccb3d22'"
p187
ssS'etype'
p188
S"<type 'exceptions.UnboundLocalError'>"
p189
sS'date'
p190
S'Mon Oct 25 09:44:27 2010'
p191
sS'response'
p192
(dp193
S'status'
p194
S'200'
p195
sg59
S'<cStringIO.StringO object>'
p196
sg74
S"<SimpleCookie: session_id_blog='127-0-0-1-fee2cd34-3e42-44cb-bee6-3936b80cedc4'>"
p197
sS'_vars'
p198
S'None'
p199
sS'title'
p200
S"'blog'"
p201
sS'session_file'
p202
S"<open file '/cygdrive/e/Documents and Settings/j...ee2cd34-3e42-44cb-bee6-3936b80cedc4', mode 'rb+'>"
p203
sS'flash'
p204
S"'No existe el articulo'"
p205
sS'_custom_rollback'
p206
S'None'
p207
sS'session_id'
p208
S"'127-0-0-1-fee2cd34-3e42-44cb-bee6-3936b80cedc4'"
p209
sS'headers'
p210
S"<Storage {'Expires': 'Mon, 25 Oct 2010 14:14:27 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p211
sS'meta'
p212
S"<Storage {'keywords': 'j3nnn1 web2py python', 'd...con web2py... ', 'author': 'Jennifer Maldonado'}>"
p213
sS'session_filename'
p214
S"'/cygdrive/e/Documents and Settings/jmaldo03/git/...ns/127-0-0-1-fee2cd34-3e42-44cb-bee6-3936b80cedc4'"
p215
sS'postprocessing'
p216
S'[]'
p217
sS'menu'
p218
S"[(<lazyT 'Index'>, False, <gluon.html.XML object>, []), (<lazyT 'About'>, False, <gluon.html.XML object>, []), (<lazyT 'Admin'>, False, <gluon.html.XML object>, []), (<lazyT 'Edit'>, False, <gluon.html.XML object>, [(<lazyT 'Controller'>, False, <gluon.html.XML object>), (<lazyT 'View'>, False, <gluon.html.XML object>), (<lazyT 'Layout'>, False, <gluon.html.XML object>), (<lazyT 'Stylesheet'>, False, <gluon.html.XML object>), (<lazyT 'DB Model'>, False, <gluon.html.XML object>), (<lazyT 'Menu Model'>, False, <gluon.html.XML object>), (<lazyT 'Database'>, False, <gluon.html.XML object>)])]"
p219
sS'_view_environment'
p220
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p221
sS'subtitle'
p222
S'<lazyT "it\'s me j3nnn1">'
p223
sS'session_id_name'
p224
S"'session_id_blog'"
p225
sS'_custom_commit'
p226
S'None'
p227
sS'_caller'
p228
S'<function <lambda>>'
p229
sS'files'
p230
S'[]'
p231
sS'view'
p232
S"'default/modifypost.html'"
p233
ssS'locals'
p234
(dp235
ssS'traceback'
p236
S'Traceback (most recent call last):\n  File "/cygdrive/e/Documents and Settings/jmaldo03/git/pyj3nnn1/pyj3nnn1/web2py/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/cygdrive/e/Documents and Settings/jmaldo03/git/pyj3nnn1/pyj3nnn1/web2py/applications/blog/controllers/default.py", line 119, in <module>\n  File "/cygdrive/e/Documents and Settings/jmaldo03/git/pyj3nnn1/pyj3nnn1/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/cygdrive/e/Documents and Settings/jmaldo03/git/pyj3nnn1/pyj3nnn1/web2py/applications/blog/controllers/default.py", line 94, in modifypost\n    return dict(form=form)\nUnboundLocalError: local variable \'form\' referenced before assignment\n'
p237
s.