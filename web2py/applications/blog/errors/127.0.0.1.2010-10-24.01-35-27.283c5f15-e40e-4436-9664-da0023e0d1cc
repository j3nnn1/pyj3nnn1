(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'gae\')                           # connect to Google BigTable\n    session.connect(request, response, db = db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\nelse:                                         # else use a normal relational database\n    db = DAL(\'sqlite://storage.sqlite\')       # if not, use SQLite or other DB\n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for \n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import *\nmail = Mail()                                  # mailer\nauth = Auth(globals(),db)                      # authentication/authorization\ncrud = Crud(globals(),db)                      # for CRUD helpers using auth\nservice = Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\nplugins = PluginManager()\n\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'  # your SMTP server\nmail.settings.sender = \'you@gmail.com\'         # your email\nmail.settings.login = \'username:password\'      # your credentials or None\n\nauth.settings.hmac_key = \'sha512:f3d5ade2-9740-497b-92a8-a0d5169de496\'   # before define_tables()\nauth.define_tables()                           # creates all needed tables\nauth.settings.mailer = mail                    # for user email verification\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.messages.verify_email = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'verify_email\'])+\'/%(key)s to verify your email\'\nauth.settings.reset_password_requires_verification = True\nauth.messages.reset_password = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'reset_password\'])+\'/%(key)s to reset your password\'\n\n#########################################################################\n## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, uncomment and customize following\n# from gluon.contrib.login_methods.rpx_account import RPXAccount\n# auth.settings.actions_disabled=[\'register\',\'change_password\',\'request_reset_password\']\n# auth.settings.login_form = RPXAccount(request, api_key=\'...\',domain=\'...\',\n#    url = "http://localhost:8000/%s/default/user/login" % request.application)\n## other login methods are in gluon/contrib/login_methods\n#########################################################################\n\ncrud.settings.auth = None                      # =auth to enforce authorization on crud\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n db.define_table(\'usuarios\',\n        Field(\'usuario\', readable=True, writable=True), \n        Field(\'password\', readable=True, writable=True),\n        Field(\'correo\', readable=False, writable=False, requires=IS_EMAIL()),\n        primarykey=[\'usuario\',\'correo\'])\n        \ndb.usuarios.usuario.requires = IS_NOT_IN_DB(db,\'usuarios.usuario\')\n\ndb.define_table(\'articulos\',\n        Field(\'titulo\',\'string\',length=255),\n        Field(\'articulo\',\'text\'),\n        Field(\'fecha\',\'datetime\'),\n        Field(\'id_usuario\',db.usuarios, readable=False, writable=False))\n        \ndb.articulos.titulo.requires=IS_NOT_IN_DB(db, \'articulos.titulo\')\n\ndb.define_table(\'comentarios\',\n        Field(\'id_articulo\', db.articulos, readable=False, writable=False),\n        Field(\'titulo\'),\n        Field(\'comentario\', requires = IS_NOT_EMPTY()),\n        Field(\'nombre\', requires = IS_NOT_EMPTY()),\n        Field(\'correo\', requires = IS_EMAIL()),\n        Field(\'url\', required = False, requires=IS_URL()),\n        Field(\'fecha\',\'datetime\'),\n        Field(\'visible\', \'boolean\'),format=\'%(nombre)s\')\n\n\ndb.define_table(\'etiquetas\',\n        Field(\'nombre\', requires=IS_NOT_EMPTY()))\n\n\ndb.define_table(\'etiquetas_articulos\', \n        Field(\'id_etiqueta\',db.etiquetas, readable=False, writable=False),      \n        Field(\'id_articulo\',db.articulos, readable=False, writable=False))\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__getslice__'
p11
S"<method-wrapper '__getslice__' of exceptions.IndentationError object>"
p12
sS'text'
p13
S'" db.define_table(\'usuarios\',\\n"'
p14
sS'__str__'
p15
S"<method-wrapper '__str__' of exceptions.IndentationError object>"
p16
sS'__reduce__'
p17
S'<built-in method __reduce__ of exceptions.IndentationError object>'
p18
sS'__dict__'
p19
S'{}'
p20
sS'__sizeof__'
p21
S'<built-in method __sizeof__ of exceptions.IndentationError object>'
p22
sS'__init__'
p23
S"<method-wrapper '__init__' of exceptions.IndentationError object>"
p24
sS'__setattr__'
p25
S"<method-wrapper '__setattr__' of exceptions.IndentationError object>"
p26
sS'__reduce_ex__'
p27
S'<built-in method __reduce_ex__ of exceptions.IndentationError object>'
p28
sS'__new__'
p29
S'<built-in method __new__ of type object>'
p30
sS'__format__'
p31
S'<built-in method __format__ of exceptions.IndentationError object>'
p32
sS'__class__'
p33
S"<type 'exceptions.IndentationError'>"
p34
sS'filename'
p35
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py'"
p36
sS'lineno'
p37
S'77'
p38
sS'msg'
p39
S"'unexpected indent'"
p40
sS'__doc__'
p41
S"'Improper indentation.'"
p42
sS'__getitem__'
p43
S"<method-wrapper '__getitem__' of exceptions.IndentationError object>"
p44
sS'__setstate__'
p45
S'<built-in method __setstate__ of exceptions.IndentationError object>'
p46
sS'__getattribute__'
p47
S"<method-wrapper '__getattribute__' of exceptions.IndentationError object>"
p48
sS'print_file_and_line'
p49
S'None'
p50
sS'args'
p51
S'(\'unexpected indent\', (\'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py\', 77, 1, " db.define_table(\'usuarios\',\\n"))'
p52
sS'__subclasshook__'
p53
S'<built-in method __subclasshook__ of type object>'
p54
sS'offset'
p55
S'1'
sS'__unicode__'
p56
S'<built-in method __unicode__ of exceptions.IndentationError object>'
p57
sS'__delattr__'
p58
S"<method-wrapper '__delattr__' of exceptions.IndentationError object>"
p59
sS'__repr__'
p60
S"<method-wrapper '__repr__' of exceptions.IndentationError object>"
p61
sS'__hash__'
p62
S"<method-wrapper '__hash__' of exceptions.IndentationError object>"
p63
ssS'evalue'
p64
S'unexpected indent (db.py, line 77)'
p65
sS'request'
p66
(dp67
S'function'
p68
S"'index'"
p69
sS'body'
p70
S'<cStringIO.StringO object>'
p71
sS'wsgi'
p72
S"<Storage {'start_response': <function <lambda> a...>, 'HTTP_ACCEPT_ENCODING': 'gzip,deflate,sdch'}}>"
p73
sS'extension'
p74
S"'html'"
p75
sS'vars'
p76
S'<Storage {}>'
p77
sS'cid'
p78
S'None'
p79
sS'url'
p80
S'<gluon.html.XML object>'
p81
sg51
S'[]'
p82
sS'controller'
p83
S"'appadmin'"
p84
sS'cookies'
p85
S"<SimpleCookie: session_id_admin='127-0-0-1-30657...'127-0-0-1-f66a923b-35d4-4221-bb69-65adf56edca3'>"
p86
sS'application'
p87
S"'blog'"
p88
sS'ajax'
p89
S'False'
p90
sS'client'
p91
S"'127.0.0.1'"
p92
sS'env'
p93
S"<Storage {'http_user_agent': 'Mozilla/5.0 (X11; ...ce': False, 'path_info': '/blog/appadmin/index'}>"
p94
sS'raw_args'
p95
S'None'
p96
sS'get_vars'
p97
S'<Storage {}>'
p98
sS'folder'
p99
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/'"
p100
sS'now'
p101
S'datetime.datetime(2010, 10, 24, 1, 35, 26, 991858)'
p102
sS'post_vars'
p103
S'<Storage {}>'
p104
ssS'frames'
p105
(lp106
(dp107
S'file'
p108
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py'
p109
sS'dump'
p110
(dp111
S'code'
p112
S'"# -*- coding: utf-8 -*- \\n\\n######################...\',db.articulos, readable=False, writable=False))\\n"'
p113
sS'layer'
p114
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py'"
p115
sS'global compile2'
p116
S'<function compile2>'
p117
sS'ccode'
p118
S'undefined'
p119
ssS'lnum'
p120
I186
sS'lines'
p121
(dp122
I181
S''
sI182
S'    try:'
p123
sI183
S'        if type(code) == types.CodeType:'
p124
sI184
S'            ccode = code'
p125
sI185
S'        else:'
p126
sI186
S'            ccode = compile2(code,layer)'
p127
sI187
S''
sI188
S'        exec ccode in environment'
p128
sI189
S'    except HTTP:'
p129
sI190
S'        raise'
p130
ssS'call'
p131
S'(code="# -*- coding: utf-8 -*- \\n\\n######################...\',db.articulos, readable=False, writable=False))\\n", environment={\'A\': <class \'gluon.html.A\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, \'CLEANUP\': <class \'gluon.validators.CLEANUP\'>, \'CODE\': <class \'gluon.html.CODE\'>, \'CRYPT\': <class \'gluon.validators.CRYPT\'>, \'DAL\': <function DAL>, ...}, layer=\'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py\')'
p132
sS'func'
p133
S'restricted'
p134
sa(dp135
g108
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py'
p136
sg110
(dp137
S'builtincompile'
p138
S'<built-in function compile>'
p139
sS'code'
p140
S'"# -*- coding: utf-8 -*- \\n\\n######################...\',db.articulos, readable=False, writable=False))\\n"'
p141
sS'code.rstrip'
p142
S'<built-in method rstrip of str object>'
p143
sS').replace'
p144
g119
sS'layer'
p145
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py'"
p146
ssg120
I173
sg121
(dp147
I168
S''
sI169
S'def compile2(code,layer):'
p148
sI170
S'    """'
p149
sI171
S"    The +'\\n' is necessary else compile fails when code ends in a comment."
p150
sI172
S'    """'
p151
sI173
S"    return compile(code.rstrip().replace('\\r\\n','\\n')+'\\n', layer, 'exec')"
p152
sI174
S''
sI175
S"def restricted(code, environment={}, layer='Unknown'):"
p153
sI176
S'    """'
p154
sI177
S'    runs code in environment and returns the output. if an exception occurs'
p155
ssg131
S'(code="# -*- coding: utf-8 -*- \\n\\n######################...\',db.articulos, readable=False, writable=False))\\n", layer=\'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py\')'
p156
sg133
S'compile2'
p157
sasS'pyver'
p158
S'Python 2.6.6: /usr/bin/python'
p159
sS'session'
p160
(dp161
S'auth'
p162
S'None'
p163
ssS'etype'
p164
S"<type 'exceptions.IndentationError'>"
p165
sS'date'
p166
S'Sun Oct 24 01:35:26 2010'
p167
sS'response'
p168
(dp169
S'status'
p170
S'200'
p171
sg70
S'<cStringIO.StringO object>'
p172
sg85
S"<SimpleCookie: session_id_blog='127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'>"
p173
sS'_vars'
p174
S'None'
p175
sS'session_file'
p176
S"<open file '/home/j3nnn1/git/pyj3nnn1/web2py/app...9e49980-0272-480c-b712-192f1f1b4547', mode 'rb+'>"
p177
sS'flash'
p178
S"''"
p179
sS'_custom_rollback'
p180
S'None'
p181
sS'session_id'
p182
S"'127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'"
p183
sS'headers'
p184
S"<Storage {'Expires': 'dom, 24 oct 2010 06:05:26 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p185
sS'meta'
p186
S'<Storage {}>'
p187
sS'session_filename'
p188
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/bl...ns/127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'"
p189
sS'postprocessing'
p190
S'[]'
p191
sS'menu'
p192
S'[]'
p193
sS'_view_environment'
p194
S"{'A': <class 'gluon.html.A'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, 'DAL': <function DAL>, ...}"
p195
sS'session_id_name'
p196
S"'session_id_blog'"
p197
sS'_custom_commit'
p198
S'None'
p199
sS'_caller'
p200
S'<function <lambda>>'
p201
sS'files'
p202
S'[]'
p203
sS'view'
p204
S"'appadmin/index.html'"
p205
ssS'locals'
p206
(dp207
g3
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py'"
p208
sg5
S'"# -*- coding: utf-8 -*- \\n\\n######################...\',db.articulos, readable=False, writable=False))\\n"'
p209
sssS'traceback'
p210
S'Traceback (most recent call last):\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py", line 186, in restricted\n    ccode = compile2(code,layer)\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py", line 173, in compile2\n    return compile(code.rstrip().replace(\'\\r\\n\',\'\\n\')+\'\\n\', layer, \'exec\')\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py", line 77\n    db.define_table(\'usuarios\',\n   ^\nIndentationError: unexpected indent\n'
p211
s.