(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'gae\')                           # connect to Google BigTable\n    session.connect(request, response, db = db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\nelse:                                         # else use a normal relational database\n    #db = DAL(\'sqlite://storage.sqlite\')       # if not, use SQLite or other DB\n    db = DAL(\'mysql://j3nnn1:j3nnn1@angvp.com/j3nnn1_blog\') \n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for \n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import *\nmail = Mail()                                  # mailer\nauth = Auth(globals(),db)                      # authentication/authorization\ncrud = Crud(globals(),db)                      # for CRUD helpers using auth\nservice = Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\nplugins = PluginManager()\n\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'  # your SMTP server\nmail.settings.sender = \'you@gmail.com\'         # your email\nmail.settings.login = \'username:password\'      # your credentials or None\n\nauth.settings.hmac_key = \'sha512:f3d5ade2-9740-497b-92a8-a0d5169de496\'   # before define_tables()\nauth.define_tables()                           # creates all needed tables\nauth.settings.mailer = mail                    # for user email verification\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.messages.verify_email = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'verify_email\'])+\'/%(key)s to verify your email\'\nauth.settings.reset_password_requires_verification = True\nauth.messages.reset_password = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'reset_password\'])+\'/%(key)s to reset your password\'\n\n#########################################################################\n## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, uncomment and customize following\n# from gluon.contrib.login_methods.rpx_account import RPXAccount\n# auth.settings.actions_disabled=[\'register\',\'change_password\',\'request_reset_password\']\n# auth.settings.login_form = RPXAccount(request, api_key=\'...\',domain=\'...\',\n#    url = "http://localhost:8000/%s/default/user/login" % request.application)\n## other login methods are in gluon/contrib/login_methods\n#########################################################################\n\ncrud.settings.auth = None                      # =auth to enforce authorization on crud\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n\ndb.define_table(\'usuarios\',\n        Field(\'usuario\', \'string\', requires= [IS_NOT_EMPTY(),IS_NOT_IN_DB(db,\'usuarios.usuario\')], required=True), \n        Field(\'clave\', \'password\', requires= [CRYPT(),IS_NOT_EMPTY()], required=True),\n        Field(\'correo\', \'string\',  readable=False, writable=True, requires= [IS_NOT_EMPTY(), IS_NOT_IN_DB(db,\'usuarios.correo\')], required=True))\n\nimport datetime\nnow = datetime.datetime.today()\n\ndb.define_table(\'articulos\',\n        Field(\'titulo\',    \'string\',  requires=[IS_NOT_EMPTY(),IS_NOT_IN_DB(db,\'articulos.titulo\')], required=True),\n        Field(\'articulo\',  \'text\',    requires=IS_NOT_EMPTY(),required=True),\n        Field(\'fecha\',     \'datetime\',default=now),\n        Field(\'id_usuario\',db.usuarios, readable=False, writable=False))\n        \n\ndb.define_table(\'comentarios\',\n        Field(\'id_articulo\', db.articulos, readable=False, writable=False),\n        Field(\'titulo\',      \'string\',requires = IS_NOT_EMPTY(), required=True),\n        Field(\'comentario\',  \'text\',  requires = IS_NOT_EMPTY(), required=True),\n        Field(\'nombre\',      \'string\',requires = IS_NOT_EMPTY(), required=True),\n        Field(\'correo\',      \'string\',requires = [IS_EMAIL(), IS_NOT_EMPTY()],     required=True),\n        Field(\'url\',         \'string\',required=False),\n        Field(\'fecha\',       \'datetime\', default=now),\n        Field(\'visible\',     \'boolean\'))\n\n\ndb.define_table(\'etiquetas\',\n        Field(\'nombre\', \'string\', requires=IS_NOT_EMPTY(), required=True))\n        \n\ndb.define_table(\'etiquetas_articulos\', \n        Field(\'id_etiqueta\',db.etiquetas, readable=False, writable=False),      \n        Field(\'id_articulo\',db.articulos, readable=False, writable=False))\n'
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py", line 42, in <module>\n    auth.define_tables()                           # creates all needed tables\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/tools.py", line 1156, in define_tables\n    format=\'%(first_name)s %(last_name)s (%(id)s)\')\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/sql.py", line 1360, in define_table\n    t._create(migrate=migrate, fake_migrate=fake_migrate)\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/sql.py", line 1812, in _create\n    self._db._execute(query)\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/sql.py", line 978, in <lambda>\n    self._execute = lambda *a, **b: self._cursor.execute(*a, **b)\n  File "/usr/lib/pymodules/python2.6/MySQLdb/cursors.py", line 166, in execute\n    self.errorhandler(self, exc, value)\n  File "/usr/lib/pymodules/python2.6/MySQLdb/connections.py", line 35, in defaulterrorhandler\n    raise errorclass, errorvalue\nOperationalError: (1050, "Table \'auth_user\' already exists")\n'
p10
s.