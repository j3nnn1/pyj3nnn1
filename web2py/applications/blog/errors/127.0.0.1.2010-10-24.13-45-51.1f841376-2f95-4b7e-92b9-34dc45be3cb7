(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'gae\')                           # connect to Google BigTable\n    session.connect(request, response, db = db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\nelse:                                         # else use a normal relational database\n    #db = DAL(\'sqlite://storage.sqlite\')       # if not, use SQLite or other DB\n    db = DAL(\'mysql://j3nnn1:j3nnn1@angvp.com.ar/j3nnn1_blog\') \n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for \n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import *\nmail = Mail()                                  # mailer\nauth = Auth(globals(),db)                      # authentication/authorization\ncrud = Crud(globals(),db)                      # for CRUD helpers using auth\nservice = Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\nplugins = PluginManager()\n\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'  # your SMTP server\nmail.settings.sender = \'you@gmail.com\'         # your email\nmail.settings.login = \'username:password\'      # your credentials or None\n\nauth.settings.hmac_key = \'sha512:f3d5ade2-9740-497b-92a8-a0d5169de496\'   # before define_tables()\nauth.define_tables()                           # creates all needed tables\nauth.settings.mailer = mail                    # for user email verification\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.messages.verify_email = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'verify_email\'])+\'/%(key)s to verify your email\'\nauth.settings.reset_password_requires_verification = True\nauth.messages.reset_password = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'reset_password\'])+\'/%(key)s to reset your password\'\n\n#########################################################################\n## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, uncomment and customize following\n# from gluon.contrib.login_methods.rpx_account import RPXAccount\n# auth.settings.actions_disabled=[\'register\',\'change_password\',\'request_reset_password\']\n# auth.settings.login_form = RPXAccount(request, api_key=\'...\',domain=\'...\',\n#    url = "http://localhost:8000/%s/default/user/login" % request.application)\n## other login methods are in gluon/contrib/login_methods\n#########################################################################\n\ncrud.settings.auth = None                      # =auth to enforce authorization on crud\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n\ndb.define_table(\'usuarios\',\n        Field(\'usuario\', \'string\', requires= [IS_NOT_EMPTY(),IS_NOT_IN_DB(db,\'usuarios.usuario\')], required=True), \n        Field(\'clave\', \'password\', requires= [CRYPT(),IS_NOT_EMPTY()], required=True),\n        Field(\'correo\', \'string\',  readable=False, writable=True, requires= [IS_NOT_EMPTY(), IS_NOT_IN_DB(db,\'usuarios.correo\')], required=True))\n\nimport datetime\nnow = datetime.datetime.today()\n\ndb.define_table(\'articulos\',\n        Field(\'titulo\',    \'string\',  requires=[IS_NOT_EMPTY(),IS_NOT_IN_DB(db,\'articulos.titulo\')], required=True),\n        Field(\'articulo\',  \'text\',    requires=IS_NOT_EMPTY(),required=True),\n        Field(\'fecha\',     \'datetime\',default=now),\n        Field(\'id_usuario\',db.usuarios, readable=False, writable=False))\n        \n\ndb.define_table(\'comentarios\',\n        Field(\'id_articulo\', db.articulos, readable=False, writable=False),\n        Field(\'titulo\',      \'string\',requires = IS_NOT_EMPTY(), required=True),\n        Field(\'comentario\',  \'text\',  requires = IS_NOT_EMPTY(), required=True),\n        Field(\'nombre\',      \'string\',requires = IS_NOT_EMPTY(), required=True),\n        Field(\'correo\',      \'string\',requires = [IS_EMAIL(), IS_NOT_EMPTY()],     required=True),\n        Field(\'url\',         \'string\',required=False),\n        Field(\'fecha\',       \'datetime\', default=now),\n        Field(\'visible\',     \'boolean\'))\n\n\ndb.define_table(\'etiquetas\',\n        Field(\'nombre\', \'string\', requires=IS_NOT_EMPTY(), required=True))\n        \n\ndb.define_table(\'etiquetas_articulos\', \n        Field(\'id_etiqueta\',db.etiquetas, readable=False, writable=False),      \n        Field(\'id_articulo\',db.articulos, readable=False, writable=False))\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.RuntimeError object>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.RuntimeError object>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.RuntimeError object>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.RuntimeError object>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.RuntimeError object>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.RuntimeError object>'
p22
sS'__reduce__'
p23
S'<built-in method __reduce__ of exceptions.RuntimeError object>'
p24
sS'__str__'
p25
S"<method-wrapper '__str__' of exceptions.RuntimeError object>"
p26
sS'__format__'
p27
S'<built-in method __format__ of exceptions.RuntimeError object>'
p28
sS'__getattribute__'
p29
S"<method-wrapper '__getattribute__' of exceptions.RuntimeError object>"
p30
sS'__class__'
p31
S"<type 'exceptions.RuntimeError'>"
p32
sS'__unicode__'
p33
S'<built-in method __unicode__ of exceptions.RuntimeError object>'
p34
sS'__delattr__'
p35
S"<method-wrapper '__delattr__' of exceptions.RuntimeError object>"
p36
sS'__subclasshook__'
p37
S'<built-in method __subclasshook__ of type object>'
p38
sS'__repr__'
p39
S"<method-wrapper '__repr__' of exceptions.RuntimeError object>"
p40
sS'args'
p41
S'("global name \'MySQLdb\' is not defined (tried 5 times)",)'
p42
sS'__dict__'
p43
S'{}'
p44
sS'__sizeof__'
p45
S'<built-in method __sizeof__ of exceptions.RuntimeError object>'
p46
sS'__doc__'
p47
S"'Unspecified run-time error.'"
p48
sS'__init__'
p49
S"<method-wrapper '__init__' of exceptions.RuntimeError object>"
p50
sS'__new__'
p51
S'<built-in method __new__ of type object>'
p52
ssS'evalue'
p53
S"global name 'MySQLdb' is not defined (tried 5 times)"
p54
sS'request'
p55
(dp56
S'function'
p57
S"'index'"
p58
sS'body'
p59
S'<cStringIO.StringO object>'
p60
sS'wsgi'
p61
S"<Storage {'start_response': <function <lambda> a...>, 'HTTP_ACCEPT_ENCODING': 'gzip,deflate,sdch'}}>"
p62
sS'extension'
p63
S"'html'"
p64
sS'vars'
p65
S'<Storage {}>'
p66
sS'cid'
p67
S'None'
p68
sS'url'
p69
S'<gluon.html.XML object>'
p70
sg41
S'[]'
p71
sS'controller'
p72
S"'appadmin'"
p73
sS'cookies'
p74
S"<SimpleCookie: session_id_admin='127-0-0-1-30657...'127-0-0-1-f66a923b-35d4-4221-bb69-65adf56edca3'>"
p75
sS'application'
p76
S"'blog'"
p77
sS'ajax'
p78
S'False'
p79
sS'client'
p80
S"'127.0.0.1'"
p81
sS'env'
p82
S"<Storage {'http_user_agent': 'Mozilla/5.0 (X11; ...ce': False, 'path_info': '/blog/appadmin/index'}>"
p83
sS'raw_args'
p84
S'None'
p85
sS'get_vars'
p86
S'<Storage {}>'
p87
sS'folder'
p88
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/'"
p89
sS'now'
p90
S'datetime.datetime(2010, 10, 24, 13, 45, 46, 90594)'
p91
sS'post_vars'
p92
S'<Storage {}>'
p93
ssS'frames'
p94
(lp95
(dp96
S'file'
p97
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py'
p98
sS'dump'
p99
(dp100
S'environment'
p101
S"{'A': <class 'gluon.html.A'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, 'DAL': <function DAL>, ...}"
p102
sS'ccode'
p103
S'<code object <module> at 0x91e9968, file "/home/...1/web2py/applications/blog/models/db.py", line 7>'
p104
ssS'lnum'
p105
I188
sS'lines'
p106
(dp107
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p108
sI183
S'        if type(code) == types.CodeType:'
p109
sI184
S'            ccode = code'
p110
sI185
S'        else:'
p111
sI186
S'            ccode = compile2(code,layer)'
p112
sI187
S''
sI188
S'        exec ccode in environment'
p113
sI189
S'    except HTTP:'
p114
sI190
S'        raise'
p115
sI191
S'    except Exception:'
p116
ssS'call'
p117
S'(code="# -*- coding: utf-8 -*- \\n\\n######################...\',db.articulos, readable=False, writable=False))\\n", environment={\'A\': <class \'gluon.html.A\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, \'CLEANUP\': <class \'gluon.validators.CLEANUP\'>, \'CODE\': <class \'gluon.html.CODE\'>, \'CRYPT\': <class \'gluon.validators.CRYPT\'>, \'DAL\': <function DAL>, ...}, layer=\'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py\')'
p118
sS'func'
p119
S'restricted'
p120
sa(dp121
g97
S'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py'
p122
sg99
(dp123
S'DAL'
p124
S'<function DAL>'
p125
sS'db'
p126
S'undefined'
p127
ssg105
I16
sg106
(dp128
I11
S'    # from gluon.contrib.memdb import MEMDB'
p129
sI12
S'    # from google.appengine.api.memcache import Client'
p130
sI13
S'    # session.connect(request, response, db = MEMDB(Client()))'
p131
sI14
S'else:                                         # else use a normal relational database'
p132
sI15
S"    #db = DAL('sqlite://storage.sqlite')       # if not, use SQLite or other DB"
p133
sI16
S"    db = DAL('mysql://j3nnn1:j3nnn1@angvp.com.ar/j3nnn1_blog')"
p134
sI17
S'## if no need for session'
p135
sI18
S'# session.forget()'
p136
sI19
S''
sI20
S'#########################################################################'
p137
ssg117
S'()'
p138
sg119
S'<module>'
p139
sa(dp140
g97
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/sql.py'
p141
sg99
(dp142
S'exception'
p143
S'NameError("global name \'MySQLdb\' is not defined",)'
p144
sS'builtinRuntimeError'
p145
S"<type 'exceptions.RuntimeError'>"
p146
ssg105
I4031
sg106
(dp147
I4032
S''
sI4033
S"if __name__ == '__main__':"
p148
sI4034
S'    import doctest'
p149
sI4035
S'    doctest.testmod()'
p150
sI4026
S'                except SyntaxError, exception:'
p151
sI4027
S'                    raise SyntaxError, exception'
p152
sI4028
S'                except Exception, exception:'
p153
sI4029
S'                    if uri==uris[-1]:'
p154
sI4030
S'                        time.sleep(1)'
p155
sI4031
S'        raise RuntimeError, "%s (tried 5 times)" % exception'
p156
ssg117
S"(uri='mysql://j3nnn1:j3nnn1@angvp.com.ar/j3nnn1_blog', pool_size=0, folder=None, db_codec='UTF-8', check_reserved=None, migrate=True, fake_migrate=False)"
p157
sg119
S'DAL'
p158
sasS'pyver'
p159
S'Python 2.6.6: /usr/bin/python'
p160
sS'session'
p161
(dp162
S'_formkey[articulos_create]'
p163
S"'db3382a3-7549-48b6-9ee3-fe57dd185473'"
p164
sS'auth'
p165
S'None'
p166
sS'last_orderby'
p167
S'None'
p168
sS'last_query'
p169
S"'db.articulos.id>0'"
p170
sS'_formkey[comentarios_create]'
p171
S"'76d6c20a-dac7-40ed-a905-102d82b363d6'"
p172
sS'_formkey[usuarios_create]'
p173
S"'472e0d36-ec31-4fa4-b375-82a298d4f299'"
p174
sS'_formkey[default]'
p175
S"'a1de23bf-1680-4a4f-b9de-957af6cc5cdf'"
p176
ssS'etype'
p177
S"<type 'exceptions.RuntimeError'>"
p178
sS'date'
p179
S'Sun Oct 24 13:45:51 2010'
p180
sS'response'
p181
(dp182
S'status'
p183
S'200'
p184
sg59
S'<cStringIO.StringO object>'
p185
sg74
S"<SimpleCookie: session_id_blog='127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'>"
p186
sS'_vars'
p187
S'None'
p188
sS'session_file'
p189
S"<open file '/home/j3nnn1/git/pyj3nnn1/web2py/app...9e49980-0272-480c-b712-192f1f1b4547', mode 'rb+'>"
p190
sS'flash'
p191
S"''"
p192
sS'_custom_rollback'
p193
S'None'
p194
sS'session_id'
p195
S"'127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'"
p196
sS'headers'
p197
S"<Storage {'Expires': 'Sun, 24 Oct 2010 18:15:46 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p198
sS'meta'
p199
S'<Storage {}>'
p200
sS'session_filename'
p201
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/bl...ns/127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'"
p202
sS'postprocessing'
p203
S'[]'
p204
sS'menu'
p205
S'[]'
p206
sS'_view_environment'
p207
S"{'A': <class 'gluon.html.A'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, 'DAL': <function DAL>, ...}"
p208
sS'session_id_name'
p209
S"'session_id_blog'"
p210
sS'_custom_commit'
p211
S'None'
p212
sS'_caller'
p213
S'<function <lambda>>'
p214
sS'files'
p215
S'[]'
p216
sS'view'
p217
S"'appadmin/index.html'"
p218
ssS'locals'
p219
(dp220
g9
S'NameError("global name \'MySQLdb\' is not defined",)'
p221
sS'db_codec'
p222
S"'UTF-8'"
p223
sS'migrate'
p224
S'True'
p225
sS'k'
S'4'
sS'fake_migrate'
p226
g79
sS'uri'
p227
S"'mysql://j3nnn1:j3nnn1@angvp.com.ar/j3nnn1_blog'"
p228
sS'check_reserved'
p229
S'None'
p230
sg88
S'None'
p231
sS'pool_size'
p232
S'0'
sS'uris'
p233
S"['mysql://j3nnn1:j3nnn1@angvp.com.ar/j3nnn1_blog']"
p234
sssS'traceback'
p235
S'Traceback (most recent call last):\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py", line 16, in <module>\n    db = DAL(\'mysql://j3nnn1:j3nnn1@angvp.com.ar/j3nnn1_blog\')\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/sql.py", line 4031, in DAL\n    raise RuntimeError, "%s (tried 5 times)" % exception\nRuntimeError: global name \'MySQLdb\' is not defined (tried 5 times)\n'
p236
s.