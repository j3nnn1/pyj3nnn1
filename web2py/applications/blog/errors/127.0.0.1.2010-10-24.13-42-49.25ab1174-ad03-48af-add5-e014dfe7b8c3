(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'gae\')                           # connect to Google BigTable\n    session.connect(request, response, db = db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\nelse:                                         # else use a normal relational database\n    #db = DAL(\'sqlite://storage.sqlite\')       # if not, use SQLite or other DB\n    db = DAL(\'mysql://\')\n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for \n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import *\nmail = Mail()                                  # mailer\nauth = Auth(globals(),db)                      # authentication/authorization\ncrud = Crud(globals(),db)                      # for CRUD helpers using auth\nservice = Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\nplugins = PluginManager()\n\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'  # your SMTP server\nmail.settings.sender = \'you@gmail.com\'         # your email\nmail.settings.login = \'username:password\'      # your credentials or None\n\nauth.settings.hmac_key = \'sha512:f3d5ade2-9740-497b-92a8-a0d5169de496\'   # before define_tables()\nauth.define_tables()                           # creates all needed tables\nauth.settings.mailer = mail                    # for user email verification\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.messages.verify_email = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'verify_email\'])+\'/%(key)s to verify your email\'\nauth.settings.reset_password_requires_verification = True\nauth.messages.reset_password = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'reset_password\'])+\'/%(key)s to reset your password\'\n\n#########################################################################\n## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, uncomment and customize following\n# from gluon.contrib.login_methods.rpx_account import RPXAccount\n# auth.settings.actions_disabled=[\'register\',\'change_password\',\'request_reset_password\']\n# auth.settings.login_form = RPXAccount(request, api_key=\'...\',domain=\'...\',\n#    url = "http://localhost:8000/%s/default/user/login" % request.application)\n## other login methods are in gluon/contrib/login_methods\n#########################################################################\n\ncrud.settings.auth = None                      # =auth to enforce authorization on crud\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n\ndb.define_table(\'usuarios\',\n        Field(\'usuario\', \'string\', requires= [IS_NOT_EMPTY(),IS_NOT_IN_DB(db,\'usuarios.usuario\')], required=True), \n        Field(\'clave\', \'password\', requires= [CRYPT(),IS_NOT_EMPTY()], required=True),\n        Field(\'correo\', \'string\',  readable=False, writable=True, requires= [IS_NOT_EMPTY(), IS_NOT_IN_DB(db,\'usuarios.correo\')], required=True))\n\nimport datetime\nnow = datetime.datetime.today()\n\ndb.define_table(\'articulos\',\n        Field(\'titulo\',    \'string\',  requires=[IS_NOT_EMPTY(),IS_NOT_IN_DB(db,\'articulos.titulo\')], required=True),\n        Field(\'articulo\',  \'text\',    requires=IS_NOT_EMPTY(),required=True),\n        Field(\'fecha\',     \'datetime\',default=now),\n        Field(\'id_usuario\',db.usuarios, readable=False, writable=False))\n        \n\ndb.define_table(\'comentarios\',\n        Field(\'id_articulo\', db.articulos, readable=False, writable=False),\n        Field(\'titulo\',      \'string\',requires = IS_NOT_EMPTY(), required=True),\n        Field(\'comentario\',  \'text\',  requires = IS_NOT_EMPTY(), required=True),\n        Field(\'nombre\',      \'string\',requires = IS_NOT_EMPTY(), required=True),\n        Field(\'correo\',      \'string\',requires = [IS_EMAIL(), IS_NOT_EMPTY()],     required=True),\n        Field(\'url\',         \'string\',required=False),\n        Field(\'fecha\',       \'datetime\', default=now),\n        Field(\'visible\',     \'boolean\'))\n\n\ndb.define_table(\'etiquetas\',\n        Field(\'nombre\', \'string\', requires=IS_NOT_EMPTY(), required=True))\n        \n\ndb.define_table(\'etiquetas_articulos\', \n        Field(\'id_etiqueta\',db.etiquetas, readable=False, writable=False),      \n        Field(\'id_articulo\',db.articulos, readable=False, writable=False))\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__getslice__'
p11
S"<method-wrapper '__getslice__' of exceptions.SyntaxError object>"
p12
sS'text'
p13
S'None'
p14
sS'__str__'
p15
S"<method-wrapper '__str__' of exceptions.SyntaxError object>"
p16
sS'__reduce__'
p17
S'<built-in method __reduce__ of exceptions.SyntaxError object>'
p18
sS'__dict__'
p19
S'{}'
p20
sS'__sizeof__'
p21
S'<built-in method __sizeof__ of exceptions.SyntaxError object>'
p22
sS'__init__'
p23
S"<method-wrapper '__init__' of exceptions.SyntaxError object>"
p24
sS'__setattr__'
p25
S"<method-wrapper '__setattr__' of exceptions.SyntaxError object>"
p26
sS'__reduce_ex__'
p27
S'<built-in method __reduce_ex__ of exceptions.SyntaxError object>'
p28
sS'__new__'
p29
S'<built-in method __new__ of type object>'
p30
sS'__format__'
p31
S'<built-in method __format__ of exceptions.SyntaxError object>'
p32
sS'__class__'
p33
S"<type 'exceptions.SyntaxError'>"
p34
sS'filename'
p35
S'None'
p36
sS'lineno'
p37
S'None'
p38
sS'msg'
p39
S"'Invalid URI string in SQLDB: mysql://'"
p40
sS'__doc__'
p41
S"'Invalid syntax.'"
p42
sS'__getitem__'
p43
S"<method-wrapper '__getitem__' of exceptions.SyntaxError object>"
p44
sS'__setstate__'
p45
S'<built-in method __setstate__ of exceptions.SyntaxError object>'
p46
sS'__getattribute__'
p47
S"<method-wrapper '__getattribute__' of exceptions.SyntaxError object>"
p48
sS'print_file_and_line'
p49
S'None'
p50
sS'args'
p51
S"('Invalid URI string in SQLDB: mysql://',)"
p52
sS'__subclasshook__'
p53
S'<built-in method __subclasshook__ of type object>'
p54
sS'offset'
p55
S'None'
p56
sS'__unicode__'
p57
S'<built-in method __unicode__ of exceptions.SyntaxError object>'
p58
sS'__delattr__'
p59
S"<method-wrapper '__delattr__' of exceptions.SyntaxError object>"
p60
sS'__repr__'
p61
S"<method-wrapper '__repr__' of exceptions.SyntaxError object>"
p62
sS'__hash__'
p63
S"<method-wrapper '__hash__' of exceptions.SyntaxError object>"
p64
ssS'evalue'
p65
S'Invalid URI string in SQLDB: mysql://'
p66
sS'request'
p67
(dp68
S'function'
p69
S"'index'"
p70
sS'body'
p71
S'<cStringIO.StringO object>'
p72
sS'wsgi'
p73
S"<Storage {'start_response': <function <lambda> a...>, 'HTTP_ACCEPT_ENCODING': 'gzip,deflate,sdch'}}>"
p74
sS'extension'
p75
S"'html'"
p76
sS'vars'
p77
S'<Storage {}>'
p78
sS'cid'
p79
S'None'
p80
sS'url'
p81
S'<gluon.html.XML object>'
p82
sg51
S'[]'
p83
sS'controller'
p84
S"'appadmin'"
p85
sS'cookies'
p86
S"<SimpleCookie: session_id_admin='127-0-0-1-30657...'127-0-0-1-f66a923b-35d4-4221-bb69-65adf56edca3'>"
p87
sS'application'
p88
S"'blog'"
p89
sS'ajax'
p90
S'False'
p91
sS'client'
p92
S"'127.0.0.1'"
p93
sS'env'
p94
S"<Storage {'http_user_agent': 'Mozilla/5.0 (X11; ...ce': False, 'path_info': '/blog/appadmin/index'}>"
p95
sS'raw_args'
p96
S'None'
p97
sS'get_vars'
p98
S'<Storage {}>'
p99
sS'folder'
p100
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/'"
p101
sS'now'
p102
S'datetime.datetime(2010, 10, 24, 13, 42, 49, 415955)'
p103
sS'post_vars'
p104
S'<Storage {}>'
p105
ssS'frames'
p106
(lp107
(dp108
S'file'
p109
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py'
p110
sS'dump'
p111
(dp112
S'environment'
p113
S"{'A': <class 'gluon.html.A'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, 'DAL': <function DAL>, ...}"
p114
sS'ccode'
p115
S'<code object <module> at 0xaec43ad0, file "/home...1/web2py/applications/blog/models/db.py", line 7>'
p116
ssS'lnum'
p117
I188
sS'lines'
p118
(dp119
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p120
sI183
S'        if type(code) == types.CodeType:'
p121
sI184
S'            ccode = code'
p122
sI185
S'        else:'
p123
sI186
S'            ccode = compile2(code,layer)'
p124
sI187
S''
sI188
S'        exec ccode in environment'
p125
sI189
S'    except HTTP:'
p126
sI190
S'        raise'
p127
sI191
S'    except Exception:'
p128
ssS'call'
p129
S'(code="# -*- coding: utf-8 -*- \\n\\n######################...\',db.articulos, readable=False, writable=False))\\n", environment={\'A\': <class \'gluon.html.A\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, \'CLEANUP\': <class \'gluon.validators.CLEANUP\'>, \'CODE\': <class \'gluon.html.CODE\'>, \'CRYPT\': <class \'gluon.validators.CRYPT\'>, \'DAL\': <function DAL>, ...}, layer=\'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py\')'
p130
sS'func'
p131
S'restricted'
p132
sa(dp133
g109
S'/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py'
p134
sg111
(dp135
S'DAL'
p136
S'<function DAL>'
p137
sS'db'
p138
S'undefined'
p139
ssg117
I16
sg118
(dp140
I11
S'    # from gluon.contrib.memdb import MEMDB'
p141
sI12
S'    # from google.appengine.api.memcache import Client'
p142
sI13
S'    # session.connect(request, response, db = MEMDB(Client()))'
p143
sI14
S'else:                                         # else use a normal relational database'
p144
sI15
S"    #db = DAL('sqlite://storage.sqlite')       # if not, use SQLite or other DB"
p145
sI16
S"    db = DAL('mysql://')"
p146
sI17
S'## if no need for session'
p147
sI18
S'# session.forget()'
p148
sI19
S''
sI20
S'#########################################################################'
p149
ssg129
S'()'
p150
sg131
S'<module>'
p151
sa(dp152
g109
S'/home/j3nnn1/git/pyj3nnn1/web2py/gluon/sql.py'
p153
sg111
(dp154
S'exception'
p155
S"SyntaxError('Invalid URI string in SQLDB: mysql://',)"
p156
sS'builtinSyntaxError'
p157
S"<type 'exceptions.SyntaxError'>"
p158
ssg117
I4027
sg118
(dp159
I4022
S'                try:'
p160
sI4023
S'                    return SQLDB(uri, pool_size=pool_size, folder=folder,'
p161
sI4024
S'                                 db_codec=db_codec, check_reserved=check_reserved,'
p162
sI4025
S'                                 migrate=migrate, fake_migrate=fake_migrate)'
p163
sI4026
S'                except SyntaxError, exception:'
p164
sI4027
S'                    raise SyntaxError, exception'
p165
sI4028
S'                except Exception, exception:'
p166
sI4029
S'                    if uri==uris[-1]:'
p167
sI4030
S'                        time.sleep(1)'
p168
sI4031
S'        raise RuntimeError, "%s (tried 5 times)" % exception'
p169
ssg129
S"(uri='mysql://', pool_size=0, folder=None, db_codec='UTF-8', check_reserved=None, migrate=True, fake_migrate=False)"
p170
sg131
S'DAL'
p171
sasS'pyver'
p172
S'Python 2.6.6: /usr/bin/python'
p173
sS'session'
p174
(dp175
S'_formkey[articulos_create]'
p176
S"'db3382a3-7549-48b6-9ee3-fe57dd185473'"
p177
sS'auth'
p178
S'None'
p179
sS'last_orderby'
p180
S'None'
p181
sS'last_query'
p182
S"'db.articulos.id>0'"
p183
sS'_formkey[comentarios_create]'
p184
S"'76d6c20a-dac7-40ed-a905-102d82b363d6'"
p185
sS'_formkey[usuarios_create]'
p186
S"'472e0d36-ec31-4fa4-b375-82a298d4f299'"
p187
sS'_formkey[default]'
p188
S"'a1de23bf-1680-4a4f-b9de-957af6cc5cdf'"
p189
ssS'etype'
p190
S"<type 'exceptions.SyntaxError'>"
p191
sS'date'
p192
S'Sun Oct 24 13:42:49 2010'
p193
sS'response'
p194
(dp195
S'status'
p196
S'200'
p197
sg71
S'<cStringIO.StringO object>'
p198
sg86
S"<SimpleCookie: session_id_blog='127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'>"
p199
sS'_vars'
p200
S'None'
p201
sS'session_file'
p202
S"<open file '/home/j3nnn1/git/pyj3nnn1/web2py/app...9e49980-0272-480c-b712-192f1f1b4547', mode 'rb+'>"
p203
sS'flash'
p204
S"''"
p205
sS'_custom_rollback'
p206
S'None'
p207
sS'session_id'
p208
S"'127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'"
p209
sS'headers'
p210
S"<Storage {'Expires': 'Sun, 24 Oct 2010 18:12:49 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p211
sS'meta'
p212
S'<Storage {}>'
p213
sS'session_filename'
p214
S"'/home/j3nnn1/git/pyj3nnn1/web2py/applications/bl...ns/127-0-0-1-c9e49980-0272-480c-b712-192f1f1b4547'"
p215
sS'postprocessing'
p216
S'[]'
p217
sS'menu'
p218
S'[]'
p219
sS'_view_environment'
p220
S"{'A': <class 'gluon.html.A'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, 'DAL': <function DAL>, ...}"
p221
sS'session_id_name'
p222
S"'session_id_blog'"
p223
sS'_custom_commit'
p224
S'None'
p225
sS'_caller'
p226
S'<function <lambda>>'
p227
sS'files'
p228
S'[]'
p229
sS'view'
p230
S"'appadmin/index.html'"
p231
ssS'locals'
p232
(dp233
g9
S"SyntaxError('Invalid URI string in SQLDB: mysql://',)"
p234
sS'db_codec'
p235
S"'UTF-8'"
p236
sS'migrate'
p237
S'True'
p238
sS'k'
S'0'
sS'fake_migrate'
p239
g91
sS'uri'
p240
S"'mysql://'"
p241
sS'check_reserved'
p242
S'None'
p243
sg100
S'None'
p244
sS'pool_size'
p245
S'0'
sS'uris'
p246
S"['mysql://']"
p247
sssS'traceback'
p248
S'Traceback (most recent call last):\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/applications/blog/models/db.py", line 16, in <module>\n    db = DAL(\'mysql://\')\n  File "/home/j3nnn1/git/pyj3nnn1/web2py/gluon/sql.py", line 4027, in DAL\n    raise SyntaxError, exception\nSyntaxError: Invalid URI string in SQLDB: mysql://\n'
p249
s.